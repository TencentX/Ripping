/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 221 */
/* metalib md5sum: 1e9590e61fb9003ba725cfc0e6ddb0d7 */

/* creation time: Tue Jun 27 14:58:18 2017 */
/* tdr version: 2.7.3, build at 20141126 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace cs
{


public interface tsf4g_csharp_interface
: IPackable, IUnpackable
{
    TdrError.ErrorType construct();
    TdrError.ErrorType pack(ref TdrWriteBuf destBuf, uint cutVer);
    TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer);
}


public enum  ENM_DBZONESTORAGELIST_COMPRESS
{
    ENM_DB_COMPRESS_UNCOMPRESS = 0,
    ENM_DB_COMPRESS_COMPRESS = 1,
}
public enum  HARDWARE_TYPE_GROUP
{
    HARDWARE_TYPE_TOY = 0, // 玩偶
    HARDWARE_TYPE_PET_CAPTURE = 1, // 捕捉棒
    HARDWARE_TYPE_WEAPON = 2, // 武器
}
public enum  TOY_AUTH_RES_GROUP
{
    TOY_AUTH_RES_NONE = 0, // 未认证
    TOY_AUTH_RES_FAKE = 1, // 盗版
    TOY_AUTH_RES_AUTHENTIC = 2, // 正版
}
public enum  TOY_TYPE_GROUP
{
    TOY_TYPE_ENTITY = 1, // 实体玩具
    TOY_TYPE_VIRTUAL = 2, // 虚拟玩具
    TOY_TYPE_FREE = 3, // 免费玩具
    TOY_TYPE_LIMIT = 4, // 网购受限玩具
    TOY_TYPE_CARD = 5, // 卡片玩具
}
public enum  CS_ATTR_GROUP
{
    CS_ATTR_DUMMY = 0, // null
    CS_ATTR_HP = 1, // 生命
    CS_ATTR_MELEE_ATTACK = 2, // 物理攻击
    CS_ATTR_MAGIC_ATTACK = 3, // 魔法攻击
    CS_ATTR_MELEE_DEFEND = 4, // 物理防守
    CS_ATTR_MAGIC_DEFEND = 5, // 魔法防守
    CS_ATTR_CRITICAL = 6, // 暴击
    CS_BASE_ATTR_MAX = 7, // 最大基础属性类型 增加新基础属性需同步修改此宏
    CS_ATTR_TILI = 101, // 当前体力
    CS_ATTR_LEVEL = 102, // 等级
    CS_ATTR_XP = 103, // 经验
    CS_ATTR_HP_LEARN = 104, // 宠物生命学习力
    CS_ATTR_MELEE_ATTACK_LEARN = 105, // 宠物物攻学习力
    CS_ATTR_MAGIC_ATTACK_LEARN = 106, // 宠物魔攻学习力
    CS_ATTR_MELEE_DEFEND_LEARN = 107, // 宠物物防学习力
    CS_ATTR_MAGIC_DEFEND_LEARN = 108, // 宠物魔防学习力
    CS_ATTR_CRITICAL_LEARN = 109, // 宠物暴击学习力
    CS_ATTR_ACHIEVEMENT_XP = 110, // 成就点数
    CS_ATTR_ACHIEVEMENT_LEVEL = 111, // 成就等级
    CS_ATTR_PVE_TILI = 112, // 当前PVE体力
    CS_ATTR_HEART = 113, // 当前爱心数
    CS_ATTR_EVOLUTION = 114, // 英雄进化标记
}
public enum  REWARD_TYPE_GROUP
{
    PVP33_DAY_REWARD = 0, // 每日奖励
    PVP33_WEEK_WIN_REWARD = 1, // 每周胜场奖励
    PVP33_SEASON_REWARD = 2, // 赛季奖励
    PVP33_WEEK_RANK_REWARD = 3, // 每周段位奖励
}
public enum  REWARD_STATE
{
    PVP33_REWARD_UNFINISEHD = 0, // 未完成-不可领取
    PVP33_REWARD_READY = 1, // 可以领取
    PVP33_REWARD_GOT = 2, // 已经领取
}
public enum  PASS_TYPE
{
    PASS_COMM_TYPE = 1, // 普通关卡
    PASS_ELITE_TYPE = 2, // 精英关卡
    PASS_SKILL_TYPE = 3, // 技能关卡
    PASS_ACTIVITY_TYPE = 4, // 活动关卡
    PASS_LITTLE_TYPE = 5, // 小关卡
    PASS_PVE_TYPE = 20, // PVE关卡
    PASS_PVP_TYPE = 21, // PVP关卡
}
public enum  TASK_STATUS_GROUP
{
    TASK_STATUS_INVALID = -4, // 非法状态
    TASK_STATUS_EXPIRED = -3, // 已过期
    TASK_STATUS_AWARD = -2, // 已领取
    TASK_STATUS_READY = -1, // 可领取
    TASK_STATUS_NONE = 0, // 默认值,未完成
}
public enum  TASK_TYPE_READ_STATUS
{
    TASK_TYPE_STATUS_NONE = 0, // 默认值,未读
    TASK_TYPE_STATUS_READ = 1, // 已读
}
public enum  NAMECARD_READ_STATUS
{
    NAMECARD_STATUS_NONE = 0, // 默认值,未读
    NAMECARD_STATUS_READ = 1, // 已读
}
public enum  SIGN_STATUS_GROUP
{
    SIGN_STATUS_NONE = 0, // 默认值,未完成
    SIGN_STATUS_READY = 1, // 可领取
    SIGN_STATUS_AWARD = 2, // 已领取
}
public enum  DB_CHAT_CONTENT_TYPE
{
    DB_CHAT_CONTENT_TYPE_TEXT = 1, // 文本
    DB_CHAT_CONTENT_TYPE_CUSTOMIZATION = 2, // 定制
}
public enum  DB_CHAT_CHANNEL_TYPE
{
    DB_CHAT_CHANNEL_TYPE_FRIEND = 1, // 好友聊天消息
    DB_CHAT_CHANNEL_TYPE_DOUBLE_PVE = 2, // 双人PVE聊天
    DB_CHAT_CHANNEL_TYPE_WEEKEND_DOUBLE_PVE = 3, // 周末双人PVE聊天
}
public enum  HERO_SERVING_STATUS_GROUP
{
    HERO_SERVING_STATUS_STAGE1 = 1, // 投放状态进行到1阶段
    HERO_SERVING_STATUS_STAGE2 = 2, // 投放状态进行到2阶段
    HERO_SERVING_STATUS_FINISH = 3, // 已完成
}
public enum  DB_FIRST_CHARGE_AWARD_FLAG_TYPE
{
    DB_FIRST_CHARGE_AWARD_FLAG_UNABLE = 0, // 不可领取
    DB_FIRST_CHARGE_AWARD_FLAG_ABLE = 1, // 可领取
    DB_FIRST_CHARGE_AWARD_FLAG_ALREADY = 2, // 已领取
}
public enum  ROLE_STATUS_GROUP
{
    ROLE_STATUS_NONE = 0, // 默认值
    ROLE_STATUS_CLOSED = 1, // 可被封
}
public enum  OPEN_APP_USR_TYPE
{
    OPEN_APP_USR_TYPE_WECHAT = 1, // 微信模式
    OPEN_APP_USR_TYPE_QQ = 2, // 手Q模式
    OPEN_APP_USR_TYPE_GUEST = 3, // Guest模式
}
public enum  USR_TERMINAL_TYPE
{
    USR_TERMINAL_TYPE_IOS = 0, // ios用户
    USR_TERMINAL_TYPE_NO_IOS = 1, // 非ios用户
}
public enum  MAIL_TYPE_GROUP
{
    MAIL_TYPE_SYS = 1, // 系统邮件
    MAIL_TYPE_FRIEND = 2, // 好友邮件
}
public enum  OFFMSG_SYSMSG_TYPE_GROUP
{
    OFFMSG_SYSMSG_ENTER_PVPROOM = 1, // 进入PVPROOM
}
public enum  OFFMSG_TYPE_GROUP
{
    OFFMSG_TYPE_MAIL = 1, // 邮件
    OFFMSG_TYPE_IDIP_MAIL = 2, // 专门为IDIP定制的发送钻石的邮件
    OFFMSG_TYPE_SYS_MSG = 3, // 角色登录拉取后自动处理
    OFFMSG_TYPE_ADD_FRD = 4, // 添加好友申请
    OFFMSG_TYPE_FRD_CHAT = 5, // 好友聊天
}
public enum  GLOBALVALUE_TYPE_GROUP
{
    GLOBALVALUE_TYPE_ROLEID_SED = 1, // 角色IDSED
    GLOBALVALUE_TYPE_REGISTE_NUM = 2, // 角色注册数量
}
public enum  SYS_NOTICE_CONTENT_TYPE
{
    SYS_NOTICE_CONTENT_TEXT = 0, // 文字
    SYS_NOTICE_CONTENT_PIC = 1, // 图片
}
public enum  SYS_NOTICE_TIME_TYPE
{
    SYS_NOTICE_TIME_SEG = 0, // 时间段(起始日期:起始时间  ~  结束日期:结束时间)内生效
    SYS_NOTICE_TIME_DAY_CYCLE = 1, // 日循环(起始日期 ~ 结束日期内每天的起始时间 ~ 结束时间内生效)
}
public enum  SYS_NOTICE_FILTER_TYPE
{
    SYS_NOTICE_FILTER_LEVEL = 1, // 通过等级进行过滤
}
public enum  SYS_NOTICE_ROLL_TYPE
{
    SYS_NOTICE_ROLL_L2R = 0, // 从左至右滚动
    SYS_NOTICE_ROLL_R2L = 1, // 从右至左滚动
    SYS_NOTICE_ROLL_STATIC = 2, // 静止
}
public enum  SYS_NOTICE_ROLL_UI_TYPE
{
    SYS_NOTICE_ROLL_UI_MAIN = 1, // 主界面
    SYS_NOTICE_ROLL_UI_COMMON_BATTLE = 2, // 普通关卡界面
    SYS_NOTICE_ROLL_UI_MART = 3, // 商城界面
    SYS_NOTICE_ROLL_UI_HERO = 4, // 英雄界面
    SYS_NOTICE_ROLL_UI_SKILL_BATTLE = 5, // 超能关卡界面
    SYS_NOTICE_ROLL_UI_ACTIVITY_BATTLE = 6, // 冒险关卡界面
    SYS_NOTICE_ROLL_UI_ENDLESS = 7, // 无尽模式界面
}
public enum  LOGIN_NOTICE_FUNCION_TYPE
{
    LOGIN_NOTICE_FUNCION_TYPE_LOGIN = 1, // 打脸图
    LOGIN_NOTICE_FUNCION_TYPE_SHOPROLL = 2, // 商城轮播
    LOGIN_NOTICE_FUNCION_TYPE_DOLL_SHOW = 3, // 玩具包类目展示
}
public enum  USER_CGI_PRIVILEGE_TYPE
{
    USER_CGI_PRIVILEGE_TYPE_USER_MANAGER = 1, // 管理用户权限
    USER_CGI_PRIVILEGE_TYPE_GEN_CID = 2, // 生成CID权限
    USER_CGI_PRIVILEGE_TYPE_DEL_CID = 3, // 删除CID权限
    USER_CGI_PRIVILEGE_TYPE_GEN_CARD = 4, // 生成CARD权限
    USER_CGI_PRIVILEGE_TYPE_DEL_CARD = 5, // 删除CARD权限
}
public enum  GLOBAL_STRUCT_TYPE
{
    GLOBAL_STRUCT_TYPE_LOGIN_NOTICE = 1, // 登陆公告
    GLOBAL_STRUCT_TYPE_CYCLEROLL_NOTICE = 2, // 走马灯
    GLOBAL_STRUCT_TYPE_USER_CGI_PRIVILEGE = 3, // 用户CGI权限
}
public enum  BAN_TYPE_GROUP
{
    BAN_PVE_TOP_RANK = 0, // 禁止参与pve排行榜
    BAN_PVP_TOP_RANK = 1, // 禁止参与pvp排行榜
    BAN_PVE_PVP_TOP_RANK = 2, // 禁止参与pve and pvp排行榜
    BAN_PROFIT = 3, // 零收益
    BAN_NORMAL_PASS = 4, // 禁玩普通关卡
    BAN_ELITE_PASS = 5, // 禁玩精英关卡
    BAN_ACT_PASS = 6, // 禁玩活动关卡
    BAN_SUPER_PASS = 7, // 禁玩超能关卡
    BAN_PVP_PASS = 8, // 禁玩pvp关卡
    BAN_PVE_PASS = 9, // 禁玩pve关卡
    BAN_ALL_PASS = 10, // 禁玩所有关卡
    BAN_MOREHERO_TOP_RANK = 11, // 禁止参与英雄圣殿排行
}


public class DBCompress : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iVersion;
    public Int32 iLen;
    public byte[] szData;

    /* construct methods */
    public DBCompress()
    {
        szData = new byte[100000];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCompress.CURRVERSION < cutVer)
        {
            cutVer = DBCompress.CURRVERSION;
        }

        /* check cutversion */
        if (DBCompress.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iVersion */
        {
            ret = destBuf.writeInt32(this.iVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLen */
        {
            ret = destBuf.writeInt32(this.iLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szData */
        {
            if (0 > this.iLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100000 < this.iLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szData.Length < this.iLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 szData_i = 0; szData_i < this.iLen; szData_i++)
            {
                ret = destBuf.writeUInt8(this.szData[szData_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCompress.CURRVERSION < cutVer)
        {
            cutVer = DBCompress.CURRVERSION;
        }

        /* check cutversion */
        if (DBCompress.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iVersion */
        {
            ret = srcBuf.readInt32(ref this.iVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iLen */
        {
            ret = srcBuf.readInt32(ref this.iLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szData */
        {
            if (0 > this.iLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100000 < this.iLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szData.Length < this.iLen)
            {
                szData = new byte[this.iLen];
            }

            for (Int32 szData_i = 0; szData_i < this.iLen; szData_i++)
            {
                ret = srcBuf.readUInt8(ref this.szData[szData_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class KeyValue : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iKey; // key
    public Int32 iValue; // value

    /* construct methods */
    public KeyValue()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || KeyValue.CURRVERSION < cutVer)
        {
            cutVer = KeyValue.CURRVERSION;
        }

        /* check cutversion */
        if (KeyValue.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iKey */
        {
            ret = destBuf.writeInt32(this.iKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iValue */
        {
            ret = destBuf.writeInt32(this.iValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || KeyValue.CURRVERSION < cutVer)
        {
            cutVer = KeyValue.CURRVERSION;
        }

        /* check cutversion */
        if (KeyValue.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iKey */
        {
            ret = srcBuf.readInt32(ref this.iKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iValue */
        {
            ret = srcBuf.readInt32(ref this.iValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class AccountKey : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenID; // QQ/微信平台的openid
    public byte bUsrTerminalType; // 平台

    /* construct methods */
    public AccountKey()
    {
        szOpenID = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AccountKey.CURRVERSION < cutVer)
        {
            cutVer = AccountKey.CURRVERSION;
        }

        /* check cutversion */
        if (AccountKey.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bUsrTerminalType */
        if (AccountKey.VERSION_bUsrTerminalType <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bUsrTerminalType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AccountKey.CURRVERSION < cutVer)
        {
            cutVer = AccountKey.CURRVERSION;
        }

        /* check cutversion */
        if (AccountKey.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bUsrTerminalType */
        if (AccountKey.VERSION_bUsrTerminalType <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bUsrTerminalType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bUsrTerminalType = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 98;
    /* entry version info */
    public static readonly uint VERSION_bUsrTerminalType = 98;

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenID = 64;
}


public class DBOpenIDMapping : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenID; // 帐号OpenID
    public byte bUsrTerminalType; // 平台
    public UInt64 ullAccountGID; // 内部全局唯一ID
    public UInt32 dwZoneID; // 创建Zonesvr实体ID

    /* construct methods */
    public DBOpenIDMapping()
    {
        szOpenID = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBOpenIDMapping.CURRVERSION < cutVer)
        {
            cutVer = DBOpenIDMapping.CURRVERSION;
        }

        /* check cutversion */
        if (DBOpenIDMapping.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bUsrTerminalType */
        if (DBOpenIDMapping.VERSION_bUsrTerminalType <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bUsrTerminalType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.ullAccountGID */
        {
            ret = destBuf.writeUInt64(this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwZoneID */
        {
            ret = destBuf.writeUInt32(this.dwZoneID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBOpenIDMapping.CURRVERSION < cutVer)
        {
            cutVer = DBOpenIDMapping.CURRVERSION;
        }

        /* check cutversion */
        if (DBOpenIDMapping.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bUsrTerminalType */
        if (DBOpenIDMapping.VERSION_bUsrTerminalType <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bUsrTerminalType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bUsrTerminalType = 0;
        }

        /* unpack member: this.ullAccountGID */
        {
            ret = srcBuf.readUInt64(ref this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwZoneID */
        {
            ret = srcBuf.readUInt32(ref this.dwZoneID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 98;
    /* entry version info */
    public static readonly uint VERSION_bUsrTerminalType = 98;

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenID = 64;
}


public class DBAccountOnline : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullAccountGID; // 玩家帐号全局唯一GID, 与OpenID对应
    public UInt32 dwZoneID; // 玩家所在zonesvr实体ID
    public UInt32 dwLoginTime; // 玩家login time
    public Int32 iRoleState; // 玩家状态

    /* construct methods */
    public DBAccountOnline()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBAccountOnline.CURRVERSION < cutVer)
        {
            cutVer = DBAccountOnline.CURRVERSION;
        }

        /* check cutversion */
        if (DBAccountOnline.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullAccountGID */
        {
            ret = destBuf.writeUInt64(this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwZoneID */
        {
            ret = destBuf.writeUInt32(this.dwZoneID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLoginTime */
        {
            ret = destBuf.writeUInt32(this.dwLoginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iRoleState */
        if (DBAccountOnline.VERSION_iRoleState <= cutVer)
        {
            ret = destBuf.writeInt32(this.iRoleState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBAccountOnline.CURRVERSION < cutVer)
        {
            cutVer = DBAccountOnline.CURRVERSION;
        }

        /* check cutversion */
        if (DBAccountOnline.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullAccountGID */
        {
            ret = srcBuf.readUInt64(ref this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwZoneID */
        {
            ret = srcBuf.readUInt32(ref this.dwZoneID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLoginTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLoginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iRoleState */
        if (DBAccountOnline.VERSION_iRoleState <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iRoleState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iRoleState = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 121;
    /* entry version info */
    public static readonly uint VERSION_iRoleState = 121;

    /* length of string or wstring */
}


public class DBMigrationRecord : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szDeviceID; // 设备ID
    public byte[] szOpenID; // 游客帐号的OpenID
    public byte bUserType; // 对应的迁移的平台

    /* construct methods */
    public DBMigrationRecord()
    {
        szDeviceID = new byte[64];
        szOpenID = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBMigrationRecord.CURRVERSION < cutVer)
        {
            cutVer = DBMigrationRecord.CURRVERSION;
        }

        /* check cutversion */
        if (DBMigrationRecord.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szDeviceID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szDeviceID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szDeviceID = destBuf.getUsedSize();

            Int32 realSize4szDeviceID = TdrTypeUtil.cstrlen(this.szDeviceID);

            if (realSize4szDeviceID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szDeviceID, realSize4szDeviceID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szDeviceID */
            Int32 size4szDeviceID = destBuf.getUsedSize() - beginPos4szDeviceID;
            ret = destBuf.writeUInt32((UInt32)(size4szDeviceID), sizePos4szDeviceID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bUserType */
        {
            ret = destBuf.writeUInt8(this.bUserType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBMigrationRecord.CURRVERSION < cutVer)
        {
            cutVer = DBMigrationRecord.CURRVERSION;
        }

        /* check cutversion */
        if (DBMigrationRecord.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szDeviceID */
        {
            /* get sizeinfo for this.szDeviceID */
            UInt32 size4szDeviceID = 0;
            ret = srcBuf.readUInt32(ref size4szDeviceID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szDeviceID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szDeviceID > this.szDeviceID.GetLength(0))
            {
                if ((int)size4szDeviceID <= LENGTH_szDeviceID)
                {
                    this.szDeviceID = new byte[size4szDeviceID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szDeviceID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szDeviceID, (int)size4szDeviceID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szDeviceID[(int)size4szDeviceID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szDeviceID = TdrTypeUtil.cstrlen(this.szDeviceID) + 1;
            if (size4szDeviceID != realSize4szDeviceID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bUserType */
        {
            ret = srcBuf.readUInt8(ref this.bUserType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szDeviceID = 64;
    public static readonly uint LENGTH_szOpenID = 64;
}


public class ToyBindKey : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szToyUID; // toy UID

    /* construct methods */
    public ToyBindKey()
    {
        szToyUID = new byte[15];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ToyBindKey.CURRVERSION < cutVer)
        {
            cutVer = ToyBindKey.CURRVERSION;
        }

        /* check cutversion */
        if (ToyBindKey.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szToyUID */
        if (ToyBindKey.VERSION_szToyUID <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szToyUID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szToyUID = destBuf.getUsedSize();

            Int32 realSize4szToyUID = TdrTypeUtil.cstrlen(this.szToyUID);

            if (realSize4szToyUID >= 15)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szToyUID, realSize4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szToyUID */
            Int32 size4szToyUID = destBuf.getUsedSize() - beginPos4szToyUID;
            ret = destBuf.writeUInt32((UInt32)(size4szToyUID), sizePos4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ToyBindKey.CURRVERSION < cutVer)
        {
            cutVer = ToyBindKey.CURRVERSION;
        }

        /* check cutversion */
        if (ToyBindKey.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szToyUID */
        if (ToyBindKey.VERSION_szToyUID <= cutVer)
        {
            /* get sizeinfo for this.szToyUID */
            UInt32 size4szToyUID = 0;
            ret = srcBuf.readUInt32(ref size4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szToyUID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szToyUID > this.szToyUID.GetLength(0))
            {
                if ((int)size4szToyUID <= LENGTH_szToyUID)
                {
                    this.szToyUID = new byte[size4szToyUID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szToyUID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szToyUID, (int)size4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szToyUID[(int)size4szToyUID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szToyUID = TdrTypeUtil.cstrlen(this.szToyUID) + 1;
            if (size4szToyUID != realSize4szToyUID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szToyUID have no defaultvalue */
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 25;
    /* entry version info */
    public static readonly uint VERSION_szToyUID = 25;

    /* length of string or wstring */
    public static readonly uint LENGTH_szToyUID = 15;
}


public class DBToyBindInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szToyUID; // ToyUID
    public byte[] szToyCID; // ToyCID
    public byte[] szCheckSum; // 校验码
    public byte[] szOpenID;
    public UInt32 dwInitTime; // 绑定时间
    public sbyte chAuthRes; // 取值TOY_AUTH_RES_**
    public byte[] szOpenID2; // 预留兼容之后的游戏
    public byte[] szOpenID3; // 预留兼容之后的游戏

    /* construct methods */
    public DBToyBindInfo()
    {
        szToyUID = new byte[15];
        szToyCID = new byte[17];
        szCheckSum = new byte[17];
        szOpenID = new byte[64];
        szOpenID2 = new byte[64];
        szOpenID3 = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBToyBindInfo.CURRVERSION < cutVer)
        {
            cutVer = DBToyBindInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBToyBindInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szToyUID */
        if (DBToyBindInfo.VERSION_szToyUID <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szToyUID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szToyUID = destBuf.getUsedSize();

            Int32 realSize4szToyUID = TdrTypeUtil.cstrlen(this.szToyUID);

            if (realSize4szToyUID >= 15)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szToyUID, realSize4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szToyUID */
            Int32 size4szToyUID = destBuf.getUsedSize() - beginPos4szToyUID;
            ret = destBuf.writeUInt32((UInt32)(size4szToyUID), sizePos4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szToyCID */
        if (DBToyBindInfo.VERSION_szToyCID <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szToyCID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szToyCID = destBuf.getUsedSize();

            Int32 realSize4szToyCID = TdrTypeUtil.cstrlen(this.szToyCID);

            if (realSize4szToyCID >= 17)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szToyCID, realSize4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szToyCID */
            Int32 size4szToyCID = destBuf.getUsedSize() - beginPos4szToyCID;
            ret = destBuf.writeUInt32((UInt32)(size4szToyCID), sizePos4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szCheckSum */
        if (DBToyBindInfo.VERSION_szCheckSum <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szCheckSum = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szCheckSum = destBuf.getUsedSize();

            Int32 realSize4szCheckSum = TdrTypeUtil.cstrlen(this.szCheckSum);

            if (realSize4szCheckSum >= 17)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szCheckSum, realSize4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szCheckSum */
            Int32 size4szCheckSum = destBuf.getUsedSize() - beginPos4szCheckSum;
            ret = destBuf.writeUInt32((UInt32)(size4szCheckSum), sizePos4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwInitTime */
        if (DBToyBindInfo.VERSION_dwInitTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwInitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chAuthRes */
        {
            ret = destBuf.writeInt8(this.chAuthRes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szOpenID2 */
        if (DBToyBindInfo.VERSION_szOpenID2 <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID2 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID2 = destBuf.getUsedSize();

            Int32 realSize4szOpenID2 = TdrTypeUtil.cstrlen(this.szOpenID2);

            if (realSize4szOpenID2 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID2, realSize4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID2 */
            Int32 size4szOpenID2 = destBuf.getUsedSize() - beginPos4szOpenID2;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID2), sizePos4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID3 */
        if (DBToyBindInfo.VERSION_szOpenID3 <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID3 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID3 = destBuf.getUsedSize();

            Int32 realSize4szOpenID3 = TdrTypeUtil.cstrlen(this.szOpenID3);

            if (realSize4szOpenID3 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID3, realSize4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID3 */
            Int32 size4szOpenID3 = destBuf.getUsedSize() - beginPos4szOpenID3;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID3), sizePos4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBToyBindInfo.CURRVERSION < cutVer)
        {
            cutVer = DBToyBindInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBToyBindInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szToyUID */
        if (DBToyBindInfo.VERSION_szToyUID <= cutVer)
        {
            /* get sizeinfo for this.szToyUID */
            UInt32 size4szToyUID = 0;
            ret = srcBuf.readUInt32(ref size4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szToyUID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szToyUID > this.szToyUID.GetLength(0))
            {
                if ((int)size4szToyUID <= LENGTH_szToyUID)
                {
                    this.szToyUID = new byte[size4szToyUID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szToyUID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szToyUID, (int)size4szToyUID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szToyUID[(int)size4szToyUID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szToyUID = TdrTypeUtil.cstrlen(this.szToyUID) + 1;
            if (size4szToyUID != realSize4szToyUID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szToyUID have no defaultvalue */
        }

        /* unpack member: this.szToyCID */
        if (DBToyBindInfo.VERSION_szToyCID <= cutVer)
        {
            /* get sizeinfo for this.szToyCID */
            UInt32 size4szToyCID = 0;
            ret = srcBuf.readUInt32(ref size4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szToyCID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szToyCID > this.szToyCID.GetLength(0))
            {
                if ((int)size4szToyCID <= LENGTH_szToyCID)
                {
                    this.szToyCID = new byte[size4szToyCID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szToyCID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szToyCID, (int)size4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szToyCID[(int)size4szToyCID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szToyCID = TdrTypeUtil.cstrlen(this.szToyCID) + 1;
            if (size4szToyCID != realSize4szToyCID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szToyCID have no defaultvalue */
        }

        /* unpack member: this.szCheckSum */
        if (DBToyBindInfo.VERSION_szCheckSum <= cutVer)
        {
            /* get sizeinfo for this.szCheckSum */
            UInt32 size4szCheckSum = 0;
            ret = srcBuf.readUInt32(ref size4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szCheckSum > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szCheckSum > this.szCheckSum.GetLength(0))
            {
                if ((int)size4szCheckSum <= LENGTH_szCheckSum)
                {
                    this.szCheckSum = new byte[size4szCheckSum];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szCheckSum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szCheckSum, (int)size4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szCheckSum[(int)size4szCheckSum - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szCheckSum = TdrTypeUtil.cstrlen(this.szCheckSum) + 1;
            if (size4szCheckSum != realSize4szCheckSum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szCheckSum have no defaultvalue */
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.dwInitTime */
        if (DBToyBindInfo.VERSION_dwInitTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwInitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwInitTime = 0;
        }

        /* unpack member: this.chAuthRes */
        {
            ret = srcBuf.readInt8(ref this.chAuthRes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szOpenID2 */
        if (DBToyBindInfo.VERSION_szOpenID2 <= cutVer)
        {
            /* get sizeinfo for this.szOpenID2 */
            UInt32 size4szOpenID2 = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID2 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID2 > this.szOpenID2.GetLength(0))
            {
                if ((int)size4szOpenID2 <= LENGTH_szOpenID2)
                {
                    this.szOpenID2 = new byte[size4szOpenID2];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID2)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID2, (int)size4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID2[(int)size4szOpenID2 - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID2 = TdrTypeUtil.cstrlen(this.szOpenID2) + 1;
            if (size4szOpenID2 != realSize4szOpenID2)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID2 have no defaultvalue */
        }

        /* unpack member: this.szOpenID3 */
        if (DBToyBindInfo.VERSION_szOpenID3 <= cutVer)
        {
            /* get sizeinfo for this.szOpenID3 */
            UInt32 size4szOpenID3 = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID3 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID3 > this.szOpenID3.GetLength(0))
            {
                if ((int)size4szOpenID3 <= LENGTH_szOpenID3)
                {
                    this.szOpenID3 = new byte[size4szOpenID3];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID3)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID3, (int)size4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID3[(int)size4szOpenID3 - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID3 = TdrTypeUtil.cstrlen(this.szOpenID3) + 1;
            if (size4szOpenID3 != realSize4szOpenID3)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID3 have no defaultvalue */
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 167;
    /* entry version info */
    public static readonly uint VERSION_szToyUID = 25;
    public static readonly uint VERSION_szToyCID = 25;
    public static readonly uint VERSION_szCheckSum = 104;
    public static readonly uint VERSION_dwInitTime = 110;
    public static readonly uint VERSION_szOpenID2 = 167;
    public static readonly uint VERSION_szOpenID3 = 167;

    /* length of string or wstring */
    public static readonly uint LENGTH_szToyUID = 15;
    public static readonly uint LENGTH_szToyCID = 17;
    public static readonly uint LENGTH_szCheckSum = 17;
    public static readonly uint LENGTH_szOpenID = 64;
    public static readonly uint LENGTH_szOpenID2 = 64;
    public static readonly uint LENGTH_szOpenID3 = 64;
}


public class DBCidCKeyBind : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szToyCID; // ToyCID
    public byte[] szCKey; // CKey6位数字的MD5
    public byte bBindFlag; // 是否已被绑定, 1 已被绑定
    public UInt32 dwInitTime; // 绑定时间
    public byte[] szOpenID; // 预留兼容之后的游戏
    public byte[] szOpenID2; // 预留兼容之后的游戏
    public byte[] szOpenID3; // 预留兼容之后的游戏

    /* construct methods */
    public DBCidCKeyBind()
    {
        szToyCID = new byte[17];
        szCKey = new byte[33];
        szOpenID = new byte[64];
        szOpenID2 = new byte[64];
        szOpenID3 = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCidCKeyBind.CURRVERSION < cutVer)
        {
            cutVer = DBCidCKeyBind.CURRVERSION;
        }

        /* check cutversion */
        if (DBCidCKeyBind.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szToyCID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szToyCID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szToyCID = destBuf.getUsedSize();

            Int32 realSize4szToyCID = TdrTypeUtil.cstrlen(this.szToyCID);

            if (realSize4szToyCID >= 17)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szToyCID, realSize4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szToyCID */
            Int32 size4szToyCID = destBuf.getUsedSize() - beginPos4szToyCID;
            ret = destBuf.writeUInt32((UInt32)(size4szToyCID), sizePos4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szCKey */
        {
            /* record sizeinfo position */
            Int32 sizePos4szCKey = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szCKey = destBuf.getUsedSize();

            Int32 realSize4szCKey = TdrTypeUtil.cstrlen(this.szCKey);

            if (realSize4szCKey >= 33)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szCKey, realSize4szCKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szCKey */
            Int32 size4szCKey = destBuf.getUsedSize() - beginPos4szCKey;
            ret = destBuf.writeUInt32((UInt32)(size4szCKey), sizePos4szCKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bBindFlag */
        if (DBCidCKeyBind.VERSION_bBindFlag <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bBindFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwInitTime */
        if (DBCidCKeyBind.VERSION_dwInitTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwInitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szOpenID */
        if (DBCidCKeyBind.VERSION_szOpenID <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID2 */
        if (DBCidCKeyBind.VERSION_szOpenID2 <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID2 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID2 = destBuf.getUsedSize();

            Int32 realSize4szOpenID2 = TdrTypeUtil.cstrlen(this.szOpenID2);

            if (realSize4szOpenID2 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID2, realSize4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID2 */
            Int32 size4szOpenID2 = destBuf.getUsedSize() - beginPos4szOpenID2;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID2), sizePos4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID3 */
        if (DBCidCKeyBind.VERSION_szOpenID3 <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID3 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID3 = destBuf.getUsedSize();

            Int32 realSize4szOpenID3 = TdrTypeUtil.cstrlen(this.szOpenID3);

            if (realSize4szOpenID3 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID3, realSize4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID3 */
            Int32 size4szOpenID3 = destBuf.getUsedSize() - beginPos4szOpenID3;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID3), sizePos4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCidCKeyBind.CURRVERSION < cutVer)
        {
            cutVer = DBCidCKeyBind.CURRVERSION;
        }

        /* check cutversion */
        if (DBCidCKeyBind.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szToyCID */
        {
            /* get sizeinfo for this.szToyCID */
            UInt32 size4szToyCID = 0;
            ret = srcBuf.readUInt32(ref size4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szToyCID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szToyCID > this.szToyCID.GetLength(0))
            {
                if ((int)size4szToyCID <= LENGTH_szToyCID)
                {
                    this.szToyCID = new byte[size4szToyCID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szToyCID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szToyCID, (int)size4szToyCID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szToyCID[(int)size4szToyCID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szToyCID = TdrTypeUtil.cstrlen(this.szToyCID) + 1;
            if (size4szToyCID != realSize4szToyCID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szCKey */
        {
            /* get sizeinfo for this.szCKey */
            UInt32 size4szCKey = 0;
            ret = srcBuf.readUInt32(ref size4szCKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szCKey > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szCKey > this.szCKey.GetLength(0))
            {
                if ((int)size4szCKey <= LENGTH_szCKey)
                {
                    this.szCKey = new byte[size4szCKey];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szCKey)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szCKey, (int)size4szCKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szCKey[(int)size4szCKey - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szCKey = TdrTypeUtil.cstrlen(this.szCKey) + 1;
            if (size4szCKey != realSize4szCKey)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bBindFlag */
        if (DBCidCKeyBind.VERSION_bBindFlag <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bBindFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bBindFlag = 0;
        }

        /* unpack member: this.dwInitTime */
        if (DBCidCKeyBind.VERSION_dwInitTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwInitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwInitTime = 0;
        }

        /* unpack member: this.szOpenID */
        if (DBCidCKeyBind.VERSION_szOpenID <= cutVer)
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID have no defaultvalue */
        }

        /* unpack member: this.szOpenID2 */
        if (DBCidCKeyBind.VERSION_szOpenID2 <= cutVer)
        {
            /* get sizeinfo for this.szOpenID2 */
            UInt32 size4szOpenID2 = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID2 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID2 > this.szOpenID2.GetLength(0))
            {
                if ((int)size4szOpenID2 <= LENGTH_szOpenID2)
                {
                    this.szOpenID2 = new byte[size4szOpenID2];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID2)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID2, (int)size4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID2[(int)size4szOpenID2 - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID2 = TdrTypeUtil.cstrlen(this.szOpenID2) + 1;
            if (size4szOpenID2 != realSize4szOpenID2)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID2 have no defaultvalue */
        }

        /* unpack member: this.szOpenID3 */
        if (DBCidCKeyBind.VERSION_szOpenID3 <= cutVer)
        {
            /* get sizeinfo for this.szOpenID3 */
            UInt32 size4szOpenID3 = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID3 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID3 > this.szOpenID3.GetLength(0))
            {
                if ((int)size4szOpenID3 <= LENGTH_szOpenID3)
                {
                    this.szOpenID3 = new byte[size4szOpenID3];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID3)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID3, (int)size4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID3[(int)size4szOpenID3 - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID3 = TdrTypeUtil.cstrlen(this.szOpenID3) + 1;
            if (size4szOpenID3 != realSize4szOpenID3)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID3 have no defaultvalue */
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 167;
    /* entry version info */
    public static readonly uint VERSION_bBindFlag = 92;
    public static readonly uint VERSION_dwInitTime = 110;
    public static readonly uint VERSION_szOpenID = 167;
    public static readonly uint VERSION_szOpenID2 = 167;
    public static readonly uint VERSION_szOpenID3 = 167;

    /* length of string or wstring */
    public static readonly uint LENGTH_szToyCID = 17;
    public static readonly uint LENGTH_szCKey = 33;
    public static readonly uint LENGTH_szOpenID = 64;
    public static readonly uint LENGTH_szOpenID2 = 64;
    public static readonly uint LENGTH_szOpenID3 = 64;
}


public class DBCardBindInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szCardID; // Card ID
    public byte[] szSeqID; // 序列号, 显示在卡片上
    public Int32 iResID; // 对应的卡片资源ID
    public UInt16 wVersion; // 批次
    public UInt32 dwInitTime; // 生成时间
    public byte[] szCheckSum; // 校验码
    public byte[] szOpenID;
    public byte[] szOpenID2; // 预留兼容之后的游戏
    public byte[] szOpenID3; // 预留兼容之后的游戏

    /* construct methods */
    public DBCardBindInfo()
    {
        szCardID = new byte[15];
        szSeqID = new byte[16];
        szCheckSum = new byte[17];
        szOpenID = new byte[64];
        szOpenID2 = new byte[64];
        szOpenID3 = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCardBindInfo.CURRVERSION < cutVer)
        {
            cutVer = DBCardBindInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBCardBindInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szCardID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szCardID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szCardID = destBuf.getUsedSize();

            Int32 realSize4szCardID = TdrTypeUtil.cstrlen(this.szCardID);

            if (realSize4szCardID >= 15)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szCardID, realSize4szCardID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szCardID */
            Int32 size4szCardID = destBuf.getUsedSize() - beginPos4szCardID;
            ret = destBuf.writeUInt32((UInt32)(size4szCardID), sizePos4szCardID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szSeqID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szSeqID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szSeqID = destBuf.getUsedSize();

            Int32 realSize4szSeqID = TdrTypeUtil.cstrlen(this.szSeqID);

            if (realSize4szSeqID >= 16)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szSeqID, realSize4szSeqID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szSeqID */
            Int32 size4szSeqID = destBuf.getUsedSize() - beginPos4szSeqID;
            ret = destBuf.writeUInt32((UInt32)(size4szSeqID), sizePos4szSeqID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.iResID */
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wVersion */
        {
            ret = destBuf.writeUInt16(this.wVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwInitTime */
        {
            ret = destBuf.writeUInt32(this.dwInitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szCheckSum */
        {
            /* record sizeinfo position */
            Int32 sizePos4szCheckSum = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szCheckSum = destBuf.getUsedSize();

            Int32 realSize4szCheckSum = TdrTypeUtil.cstrlen(this.szCheckSum);

            if (realSize4szCheckSum >= 17)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szCheckSum, realSize4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szCheckSum */
            Int32 size4szCheckSum = destBuf.getUsedSize() - beginPos4szCheckSum;
            ret = destBuf.writeUInt32((UInt32)(size4szCheckSum), sizePos4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID2 */
        if (DBCardBindInfo.VERSION_szOpenID2 <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID2 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID2 = destBuf.getUsedSize();

            Int32 realSize4szOpenID2 = TdrTypeUtil.cstrlen(this.szOpenID2);

            if (realSize4szOpenID2 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID2, realSize4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID2 */
            Int32 size4szOpenID2 = destBuf.getUsedSize() - beginPos4szOpenID2;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID2), sizePos4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenID3 */
        if (DBCardBindInfo.VERSION_szOpenID3 <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID3 = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID3 = destBuf.getUsedSize();

            Int32 realSize4szOpenID3 = TdrTypeUtil.cstrlen(this.szOpenID3);

            if (realSize4szOpenID3 >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID3, realSize4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID3 */
            Int32 size4szOpenID3 = destBuf.getUsedSize() - beginPos4szOpenID3;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID3), sizePos4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCardBindInfo.CURRVERSION < cutVer)
        {
            cutVer = DBCardBindInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBCardBindInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szCardID */
        {
            /* get sizeinfo for this.szCardID */
            UInt32 size4szCardID = 0;
            ret = srcBuf.readUInt32(ref size4szCardID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szCardID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szCardID > this.szCardID.GetLength(0))
            {
                if ((int)size4szCardID <= LENGTH_szCardID)
                {
                    this.szCardID = new byte[size4szCardID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szCardID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szCardID, (int)size4szCardID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szCardID[(int)size4szCardID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szCardID = TdrTypeUtil.cstrlen(this.szCardID) + 1;
            if (size4szCardID != realSize4szCardID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szSeqID */
        {
            /* get sizeinfo for this.szSeqID */
            UInt32 size4szSeqID = 0;
            ret = srcBuf.readUInt32(ref size4szSeqID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szSeqID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szSeqID > this.szSeqID.GetLength(0))
            {
                if ((int)size4szSeqID <= LENGTH_szSeqID)
                {
                    this.szSeqID = new byte[size4szSeqID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szSeqID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szSeqID, (int)size4szSeqID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szSeqID[(int)size4szSeqID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szSeqID = TdrTypeUtil.cstrlen(this.szSeqID) + 1;
            if (size4szSeqID != realSize4szSeqID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.iResID */
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wVersion */
        {
            ret = srcBuf.readUInt16(ref this.wVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwInitTime */
        {
            ret = srcBuf.readUInt32(ref this.dwInitTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szCheckSum */
        {
            /* get sizeinfo for this.szCheckSum */
            UInt32 size4szCheckSum = 0;
            ret = srcBuf.readUInt32(ref size4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szCheckSum > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szCheckSum > this.szCheckSum.GetLength(0))
            {
                if ((int)size4szCheckSum <= LENGTH_szCheckSum)
                {
                    this.szCheckSum = new byte[size4szCheckSum];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szCheckSum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szCheckSum, (int)size4szCheckSum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szCheckSum[(int)size4szCheckSum - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szCheckSum = TdrTypeUtil.cstrlen(this.szCheckSum) + 1;
            if (size4szCheckSum != realSize4szCheckSum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szOpenID2 */
        if (DBCardBindInfo.VERSION_szOpenID2 <= cutVer)
        {
            /* get sizeinfo for this.szOpenID2 */
            UInt32 size4szOpenID2 = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID2 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID2 > this.szOpenID2.GetLength(0))
            {
                if ((int)size4szOpenID2 <= LENGTH_szOpenID2)
                {
                    this.szOpenID2 = new byte[size4szOpenID2];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID2)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID2, (int)size4szOpenID2);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID2[(int)size4szOpenID2 - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID2 = TdrTypeUtil.cstrlen(this.szOpenID2) + 1;
            if (size4szOpenID2 != realSize4szOpenID2)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID2 have no defaultvalue */
        }

        /* unpack member: this.szOpenID3 */
        if (DBCardBindInfo.VERSION_szOpenID3 <= cutVer)
        {
            /* get sizeinfo for this.szOpenID3 */
            UInt32 size4szOpenID3 = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID3 > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID3 > this.szOpenID3.GetLength(0))
            {
                if ((int)size4szOpenID3 <= LENGTH_szOpenID3)
                {
                    this.szOpenID3 = new byte[size4szOpenID3];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID3)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID3, (int)size4szOpenID3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID3[(int)size4szOpenID3 - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID3 = TdrTypeUtil.cstrlen(this.szOpenID3) + 1;
            if (size4szOpenID3 != realSize4szOpenID3)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szOpenID3 have no defaultvalue */
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 167;
    /* entry version info */
    public static readonly uint VERSION_szOpenID2 = 167;
    public static readonly uint VERSION_szOpenID3 = 167;

    /* length of string or wstring */
    public static readonly uint LENGTH_szCardID = 15;
    public static readonly uint LENGTH_szSeqID = 16;
    public static readonly uint LENGTH_szCheckSum = 17;
    public static readonly uint LENGTH_szOpenID = 64;
    public static readonly uint LENGTH_szOpenID2 = 64;
    public static readonly uint LENGTH_szOpenID3 = 64;
}


public class DBMaxMacSeq : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szProductID; // 厂商/产品ID
    public UInt32 dwMaxMacSeq; // 底座最大蓝牙MAC Seq

    /* construct methods */
    public DBMaxMacSeq()
    {
        szProductID = new byte[7];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBMaxMacSeq.CURRVERSION < cutVer)
        {
            cutVer = DBMaxMacSeq.CURRVERSION;
        }

        /* check cutversion */
        if (DBMaxMacSeq.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szProductID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szProductID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szProductID = destBuf.getUsedSize();

            Int32 realSize4szProductID = TdrTypeUtil.cstrlen(this.szProductID);

            if (realSize4szProductID >= 7)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szProductID, realSize4szProductID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szProductID */
            Int32 size4szProductID = destBuf.getUsedSize() - beginPos4szProductID;
            ret = destBuf.writeUInt32((UInt32)(size4szProductID), sizePos4szProductID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwMaxMacSeq */
        {
            ret = destBuf.writeUInt32(this.dwMaxMacSeq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBMaxMacSeq.CURRVERSION < cutVer)
        {
            cutVer = DBMaxMacSeq.CURRVERSION;
        }

        /* check cutversion */
        if (DBMaxMacSeq.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szProductID */
        {
            /* get sizeinfo for this.szProductID */
            UInt32 size4szProductID = 0;
            ret = srcBuf.readUInt32(ref size4szProductID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szProductID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szProductID > this.szProductID.GetLength(0))
            {
                if ((int)size4szProductID <= LENGTH_szProductID)
                {
                    this.szProductID = new byte[size4szProductID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szProductID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szProductID, (int)size4szProductID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szProductID[(int)size4szProductID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szProductID = TdrTypeUtil.cstrlen(this.szProductID) + 1;
            if (size4szProductID != realSize4szProductID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.dwMaxMacSeq */
        {
            ret = srcBuf.readUInt32(ref this.dwMaxMacSeq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szProductID = 7;
}


public class CardReuseInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bPlatID; // 平台ID
    public Int32 iResID; // 本平台上尚未使用的卡片ResID
    public UInt16 wNum; // 本卡片数量

    /* construct methods */
    public CardReuseInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CardReuseInfo.CURRVERSION < cutVer)
        {
            cutVer = CardReuseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CardReuseInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bPlatID */
        {
            ret = destBuf.writeUInt8(this.bPlatID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iResID */
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CardReuseInfo.CURRVERSION < cutVer)
        {
            cutVer = CardReuseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CardReuseInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bPlatID */
        {
            ret = srcBuf.readUInt8(ref this.bPlatID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iResID */
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBCardReuseInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenID;
    public UInt16 wNum; // 记录数量
    public CardReuseInfo[] astCardList;

    /* construct methods */
    public DBCardReuseInfo()
    {
        szOpenID = new byte[64];
        astCardList = new CardReuseInfo[100];
        for (int astCardList_i = 0; astCardList_i < 100; astCardList_i++)
        {
            astCardList[astCardList_i] = new CardReuseInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCardReuseInfo.CURRVERSION < cutVer)
        {
            cutVer = DBCardReuseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBCardReuseInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astCardList */
        {
            if (100 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astCardList.Length < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astCardList_i = 0; astCardList_i < this.wNum; astCardList_i++)
            {
                ret = this.astCardList[astCardList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCardReuseInfo.CURRVERSION < cutVer)
        {
            cutVer = DBCardReuseInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBCardReuseInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astCardList */
        {
            if (100 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astCardList.Length < this.wNum)
            {
                astCardList = new CardReuseInfo[this.wNum];
                for (Int32 astCardList_i = 0; astCardList_i < this.wNum; astCardList_i++)
                {
                    astCardList[astCardList_i] = new CardReuseInfo();
                }
            }

            for (Int32 astCardList_i = 0; astCardList_i < this.wNum; astCardList_i++)
            {
                ret = this.astCardList[astCardList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenID = 64;
}


/* 实时在线表 */
public class tb_aitoy_onlinecnt : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szGameappid; // 游戏ID
    public UInt32 dwTimekey; // 当前时间
    public byte[] szGsid; // gamesvrid
    public byte[] szZoneareaid; // 大区id
    public Int32 iOnlinecntios; // ios在线人数
    public Int32 iOnlinecntandroid; // android在线人数

    /* construct methods */
    public tb_aitoy_onlinecnt()
    {
        szGameappid = new byte[32];
        szGsid = new byte[32];
        szZoneareaid = new byte[32];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        string szGameappid_def = "0";
        byte []szGameappid_tmp = Encoding.ASCII.GetBytes(szGameappid_def);
        if (szGameappid_tmp.GetLength(0) + 1 > this.szGameappid.GetLength(0))
        {
            if (szGameappid_tmp.GetLength(0) < LENGTH_szGameappid)
            {
                this.szGameappid = new byte[szGameappid_tmp.GetLength(0) + 1];
            }
            else
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }
        }

        for(int i = 0;i < szGameappid_tmp.GetLength(0); i++)
        {
            this.szGameappid[i] = szGameappid_tmp[i];
        }
        this.szGameappid[szGameappid_tmp.GetLength(0)] = 0x00;

        this.dwTimekey = 0;

        /* this.szGsid have no defaultvalue */

        /* this.szZoneareaid have no defaultvalue */

        this.iOnlinecntios = 0;

        this.iOnlinecntandroid = 0;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || tb_aitoy_onlinecnt.CURRVERSION < cutVer)
        {
            cutVer = tb_aitoy_onlinecnt.CURRVERSION;
        }

        /* check cutversion */
        if (tb_aitoy_onlinecnt.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szGameappid */
        {
            /* record sizeinfo position */
            Int32 sizePos4szGameappid = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szGameappid = destBuf.getUsedSize();

            Int32 realSize4szGameappid = TdrTypeUtil.cstrlen(this.szGameappid);

            if (realSize4szGameappid >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szGameappid, realSize4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szGameappid */
            Int32 size4szGameappid = destBuf.getUsedSize() - beginPos4szGameappid;
            ret = destBuf.writeUInt32((UInt32)(size4szGameappid), sizePos4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwTimekey */
        {
            ret = destBuf.writeUInt32(this.dwTimekey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szGsid */
        {
            /* record sizeinfo position */
            Int32 sizePos4szGsid = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szGsid = destBuf.getUsedSize();

            Int32 realSize4szGsid = TdrTypeUtil.cstrlen(this.szGsid);

            if (realSize4szGsid >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szGsid, realSize4szGsid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szGsid */
            Int32 size4szGsid = destBuf.getUsedSize() - beginPos4szGsid;
            ret = destBuf.writeUInt32((UInt32)(size4szGsid), sizePos4szGsid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szZoneareaid */
        {
            /* record sizeinfo position */
            Int32 sizePos4szZoneareaid = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szZoneareaid = destBuf.getUsedSize();

            Int32 realSize4szZoneareaid = TdrTypeUtil.cstrlen(this.szZoneareaid);

            if (realSize4szZoneareaid >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szZoneareaid, realSize4szZoneareaid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szZoneareaid */
            Int32 size4szZoneareaid = destBuf.getUsedSize() - beginPos4szZoneareaid;
            ret = destBuf.writeUInt32((UInt32)(size4szZoneareaid), sizePos4szZoneareaid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.iOnlinecntios */
        {
            ret = destBuf.writeInt32(this.iOnlinecntios);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iOnlinecntandroid */
        {
            ret = destBuf.writeInt32(this.iOnlinecntandroid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || tb_aitoy_onlinecnt.CURRVERSION < cutVer)
        {
            cutVer = tb_aitoy_onlinecnt.CURRVERSION;
        }

        /* check cutversion */
        if (tb_aitoy_onlinecnt.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szGameappid */
        {
            /* get sizeinfo for this.szGameappid */
            UInt32 size4szGameappid = 0;
            ret = srcBuf.readUInt32(ref size4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szGameappid > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szGameappid > this.szGameappid.GetLength(0))
            {
                if ((int)size4szGameappid <= LENGTH_szGameappid)
                {
                    this.szGameappid = new byte[size4szGameappid];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szGameappid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szGameappid, (int)size4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szGameappid[(int)size4szGameappid - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szGameappid = TdrTypeUtil.cstrlen(this.szGameappid) + 1;
            if (size4szGameappid != realSize4szGameappid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.dwTimekey */
        {
            ret = srcBuf.readUInt32(ref this.dwTimekey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szGsid */
        {
            /* get sizeinfo for this.szGsid */
            UInt32 size4szGsid = 0;
            ret = srcBuf.readUInt32(ref size4szGsid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szGsid > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szGsid > this.szGsid.GetLength(0))
            {
                if ((int)size4szGsid <= LENGTH_szGsid)
                {
                    this.szGsid = new byte[size4szGsid];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szGsid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szGsid, (int)size4szGsid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szGsid[(int)size4szGsid - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szGsid = TdrTypeUtil.cstrlen(this.szGsid) + 1;
            if (size4szGsid != realSize4szGsid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szZoneareaid */
        {
            /* get sizeinfo for this.szZoneareaid */
            UInt32 size4szZoneareaid = 0;
            ret = srcBuf.readUInt32(ref size4szZoneareaid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szZoneareaid > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szZoneareaid > this.szZoneareaid.GetLength(0))
            {
                if ((int)size4szZoneareaid <= LENGTH_szZoneareaid)
                {
                    this.szZoneareaid = new byte[size4szZoneareaid];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szZoneareaid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szZoneareaid, (int)size4szZoneareaid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szZoneareaid[(int)size4szZoneareaid - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szZoneareaid = TdrTypeUtil.cstrlen(this.szZoneareaid) + 1;
            if (size4szZoneareaid != realSize4szZoneareaid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.iOnlinecntios */
        {
            ret = srcBuf.readInt32(ref this.iOnlinecntios);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iOnlinecntandroid */
        {
            ret = srcBuf.readInt32(ref this.iOnlinecntandroid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szGameappid = 32;
    public static readonly uint LENGTH_szGsid = 32;
    public static readonly uint LENGTH_szZoneareaid = 32;
}


/* 用户存量表 */
public class tb_aitoy_roleinfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szGameappid; // 游戏ID
    public byte[] szOpenid; // 用户OpenID
    public Int32 iZoneid; // 非分区分服填0
    public Int32 iRegtime; // 注册时间
    public Int32 iLevel; // 等级
    public Int32 iFriends; // 好友数
    public Int32 iMoneyios; // 金钱
    public Int32 iMoneyandroid; // 金钱
    public Int32 iDiamondios; // 钻石
    public Int32 iDiamondandroid; // 钻石
    public Int32 iDevicetype; // ios or android
    public Int32 iTreasurenum; // 传奇宝藏个数
    public Int32 iEquipnum; // 装备个数
    public Int32 iHeronum; // 总英雄个数
    public Int32 iOpermode; // 操作模式
    public UInt32 dwFightPower; // 角色战斗力
    public Int32 iEvolveheronum; // 进化类英雄个数

    /* construct methods */
    public tb_aitoy_roleinfo()
    {
        szGameappid = new byte[32];
        szOpenid = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || tb_aitoy_roleinfo.CURRVERSION < cutVer)
        {
            cutVer = tb_aitoy_roleinfo.CURRVERSION;
        }

        /* check cutversion */
        if (tb_aitoy_roleinfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szGameappid */
        {
            /* record sizeinfo position */
            Int32 sizePos4szGameappid = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szGameappid = destBuf.getUsedSize();

            Int32 realSize4szGameappid = TdrTypeUtil.cstrlen(this.szGameappid);

            if (realSize4szGameappid >= 32)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szGameappid, realSize4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szGameappid */
            Int32 size4szGameappid = destBuf.getUsedSize() - beginPos4szGameappid;
            ret = destBuf.writeUInt32((UInt32)(size4szGameappid), sizePos4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenid */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenid = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenid = destBuf.getUsedSize();

            Int32 realSize4szOpenid = TdrTypeUtil.cstrlen(this.szOpenid);

            if (realSize4szOpenid >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenid, realSize4szOpenid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenid */
            Int32 size4szOpenid = destBuf.getUsedSize() - beginPos4szOpenid;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenid), sizePos4szOpenid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.iZoneid */
        {
            ret = destBuf.writeInt32(this.iZoneid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iRegtime */
        {
            ret = destBuf.writeInt32(this.iRegtime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLevel */
        {
            ret = destBuf.writeInt32(this.iLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFriends */
        {
            ret = destBuf.writeInt32(this.iFriends);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iMoneyios */
        {
            ret = destBuf.writeInt32(this.iMoneyios);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iMoneyandroid */
        {
            ret = destBuf.writeInt32(this.iMoneyandroid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iDiamondios */
        {
            ret = destBuf.writeInt32(this.iDiamondios);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iDiamondandroid */
        {
            ret = destBuf.writeInt32(this.iDiamondandroid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iDevicetype */
        {
            ret = destBuf.writeInt32(this.iDevicetype);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iTreasurenum */
        {
            ret = destBuf.writeInt32(this.iTreasurenum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iEquipnum */
        {
            ret = destBuf.writeInt32(this.iEquipnum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iHeronum */
        {
            ret = destBuf.writeInt32(this.iHeronum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iOpermode */
        {
            ret = destBuf.writeInt32(this.iOpermode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwFightPower */
        {
            ret = destBuf.writeUInt32(this.dwFightPower);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iEvolveheronum */
        {
            ret = destBuf.writeInt32(this.iEvolveheronum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || tb_aitoy_roleinfo.CURRVERSION < cutVer)
        {
            cutVer = tb_aitoy_roleinfo.CURRVERSION;
        }

        /* check cutversion */
        if (tb_aitoy_roleinfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szGameappid */
        {
            /* get sizeinfo for this.szGameappid */
            UInt32 size4szGameappid = 0;
            ret = srcBuf.readUInt32(ref size4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szGameappid > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szGameappid > this.szGameappid.GetLength(0))
            {
                if ((int)size4szGameappid <= LENGTH_szGameappid)
                {
                    this.szGameappid = new byte[size4szGameappid];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szGameappid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szGameappid, (int)size4szGameappid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szGameappid[(int)size4szGameappid - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szGameappid = TdrTypeUtil.cstrlen(this.szGameappid) + 1;
            if (size4szGameappid != realSize4szGameappid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szOpenid */
        {
            /* get sizeinfo for this.szOpenid */
            UInt32 size4szOpenid = 0;
            ret = srcBuf.readUInt32(ref size4szOpenid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenid > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenid > this.szOpenid.GetLength(0))
            {
                if ((int)size4szOpenid <= LENGTH_szOpenid)
                {
                    this.szOpenid = new byte[size4szOpenid];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenid, (int)size4szOpenid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenid[(int)size4szOpenid - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenid = TdrTypeUtil.cstrlen(this.szOpenid) + 1;
            if (size4szOpenid != realSize4szOpenid)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.iZoneid */
        {
            ret = srcBuf.readInt32(ref this.iZoneid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iRegtime */
        {
            ret = srcBuf.readInt32(ref this.iRegtime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iLevel */
        {
            ret = srcBuf.readInt32(ref this.iLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iFriends */
        {
            ret = srcBuf.readInt32(ref this.iFriends);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iMoneyios */
        {
            ret = srcBuf.readInt32(ref this.iMoneyios);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iMoneyandroid */
        {
            ret = srcBuf.readInt32(ref this.iMoneyandroid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iDiamondios */
        {
            ret = srcBuf.readInt32(ref this.iDiamondios);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iDiamondandroid */
        {
            ret = srcBuf.readInt32(ref this.iDiamondandroid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iDevicetype */
        {
            ret = srcBuf.readInt32(ref this.iDevicetype);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iTreasurenum */
        {
            ret = srcBuf.readInt32(ref this.iTreasurenum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iEquipnum */
        {
            ret = srcBuf.readInt32(ref this.iEquipnum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iHeronum */
        {
            ret = srcBuf.readInt32(ref this.iHeronum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iOpermode */
        {
            ret = srcBuf.readInt32(ref this.iOpermode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwFightPower */
        {
            ret = srcBuf.readUInt32(ref this.dwFightPower);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iEvolveheronum */
        {
            ret = srcBuf.readInt32(ref this.iEvolveheronum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szGameappid = 32;
    public static readonly uint LENGTH_szOpenid = 64;
}


/* 计数实体 */
public class CounterOption : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chType; // 类别
    public Int32 iID; // 编号
    public Int32 iCount; // 数目

    /* construct methods */
    public CounterOption()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CounterOption.CURRVERSION < cutVer)
        {
            cutVer = CounterOption.CURRVERSION;
        }

        /* check cutversion */
        if (CounterOption.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chType */
        {
            ret = destBuf.writeInt8(this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iCount */
        {
            ret = destBuf.writeInt32(this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CounterOption.CURRVERSION < cutVer)
        {
            cutVer = CounterOption.CURRVERSION;
        }

        /* check cutversion */
        if (CounterOption.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chType */
        {
            ret = srcBuf.readInt8(ref this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCount */
        {
            ret = srcBuf.readInt32(ref this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 计数周期 */
public class CounterPeriod : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chType; // 类别
    public Int32 iEndTime; // 到期时间

    /* construct methods */
    public CounterPeriod()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CounterPeriod.CURRVERSION < cutVer)
        {
            cutVer = CounterPeriod.CURRVERSION;
        }

        /* check cutversion */
        if (CounterPeriod.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chType */
        {
            ret = destBuf.writeInt8(this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iEndTime */
        {
            ret = destBuf.writeInt32(this.iEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CounterPeriod.CURRVERSION < cutVer)
        {
            cutVer = CounterPeriod.CURRVERSION;
        }

        /* check cutversion */
        if (CounterPeriod.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chType */
        {
            ret = srcBuf.readInt8(ref this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iEndTime */
        {
            ret = srcBuf.readInt32(ref this.iEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 内存每日计数器 */
public class DailyCounter : tsf4g_csharp_interface
{
    /* public members */
    public CounterOption[] astCounters;
    public byte bPeriodNum; // 计数周期控制数目
    public CounterPeriod[] astPeriods; // 周期控制
    public UInt16[] TypeLmt; // Type类型

    /* construct methods */
    public DailyCounter()
    {
        astCounters = new CounterOption[50];
        for (int astCounters_i = 0; astCounters_i < 50; astCounters_i++)
        {
            astCounters[astCounters_i] = new CounterOption();
        }

        astPeriods = new CounterPeriod[7];
        for (int astPeriods_i = 0; astPeriods_i < 7; astPeriods_i++)
        {
            astPeriods[astPeriods_i] = new CounterPeriod();
        }

        TypeLmt = new UInt16[11];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DailyCounter.CURRVERSION < cutVer)
        {
            cutVer = DailyCounter.CURRVERSION;
        }

        /* check cutversion */
        if (DailyCounter.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.astCounters */
        {
            for (Int32 astCounters_i = 0; astCounters_i < 50; astCounters_i++)
            {
                ret = this.astCounters[astCounters_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bPeriodNum */
        {
            ret = destBuf.writeUInt8(this.bPeriodNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPeriods */
        {
            if (7 < this.bPeriodNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPeriods.Length < this.bPeriodNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPeriods_i = 0; astPeriods_i < this.bPeriodNum; astPeriods_i++)
            {
                ret = this.astPeriods[astPeriods_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.TypeLmt */
        {
            for (Int32 TypeLmt_i = 0; TypeLmt_i < 11; TypeLmt_i++)
            {
                ret = destBuf.writeUInt16(this.TypeLmt[TypeLmt_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DailyCounter.CURRVERSION < cutVer)
        {
            cutVer = DailyCounter.CURRVERSION;
        }

        /* check cutversion */
        if (DailyCounter.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.astCounters */
        {
            for (Int32 astCounters_i = 0; astCounters_i < 50; astCounters_i++)
            {
                ret = this.astCounters[astCounters_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bPeriodNum */
        {
            ret = srcBuf.readUInt8(ref this.bPeriodNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPeriods */
        {
            if (7 < this.bPeriodNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPeriods.Length < this.bPeriodNum)
            {
                astPeriods = new CounterPeriod[this.bPeriodNum];
                for (Int32 astPeriods_i = 0; astPeriods_i < this.bPeriodNum; astPeriods_i++)
                {
                    astPeriods[astPeriods_i] = new CounterPeriod();
                }
            }

            for (Int32 astPeriods_i = 0; astPeriods_i < this.bPeriodNum; astPeriods_i++)
            {
                ret = this.astPeriods[astPeriods_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.TypeLmt */
        {
            for (Int32 TypeLmt_i = 0; TypeLmt_i < 11; TypeLmt_i++)
            {
                ret = srcBuf.readUInt16(ref this.TypeLmt[TypeLmt_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* DB每日计数器 */
public class DBDailyCounter : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iNum; // 计数项的数目
    public CounterOption[] astCounters;
    public byte bPeriodNum; // 计数周期控制数目
    public CounterPeriod[] astPeriods; // 周期控制

    /* construct methods */
    public DBDailyCounter()
    {
        astCounters = new CounterOption[50];
        for (int astCounters_i = 0; astCounters_i < 50; astCounters_i++)
        {
            astCounters[astCounters_i] = new CounterOption();
        }

        astPeriods = new CounterPeriod[7];
        for (int astPeriods_i = 0; astPeriods_i < 7; astPeriods_i++)
        {
            astPeriods[astPeriods_i] = new CounterPeriod();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBDailyCounter.CURRVERSION < cutVer)
        {
            cutVer = DBDailyCounter.CURRVERSION;
        }

        /* check cutversion */
        if (DBDailyCounter.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iNum */
        {
            ret = destBuf.writeInt32(this.iNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astCounters */
        {
            if (0 > this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (50 < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astCounters.Length < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astCounters_i = 0; astCounters_i < this.iNum; astCounters_i++)
            {
                ret = this.astCounters[astCounters_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bPeriodNum */
        {
            ret = destBuf.writeUInt8(this.bPeriodNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPeriods */
        {
            if (7 < this.bPeriodNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPeriods.Length < this.bPeriodNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPeriods_i = 0; astPeriods_i < this.bPeriodNum; astPeriods_i++)
            {
                ret = this.astPeriods[astPeriods_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBDailyCounter.CURRVERSION < cutVer)
        {
            cutVer = DBDailyCounter.CURRVERSION;
        }

        /* check cutversion */
        if (DBDailyCounter.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iNum */
        {
            ret = srcBuf.readInt32(ref this.iNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astCounters */
        {
            if (0 > this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (50 < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astCounters.Length < this.iNum)
            {
                astCounters = new CounterOption[this.iNum];
                for (Int32 astCounters_i = 0; astCounters_i < this.iNum; astCounters_i++)
                {
                    astCounters[astCounters_i] = new CounterOption();
                }
            }

            for (Int32 astCounters_i = 0; astCounters_i < this.iNum; astCounters_i++)
            {
                ret = this.astCounters[astCounters_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bPeriodNum */
        {
            ret = srcBuf.readUInt8(ref this.bPeriodNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPeriods */
        {
            if (7 < this.bPeriodNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPeriods.Length < this.bPeriodNum)
            {
                astPeriods = new CounterPeriod[this.bPeriodNum];
                for (Int32 astPeriods_i = 0; astPeriods_i < this.bPeriodNum; astPeriods_i++)
                {
                    astPeriods[astPeriods_i] = new CounterPeriod();
                }
            }

            for (Int32 astPeriods_i = 0; astPeriods_i < this.bPeriodNum; astPeriods_i++)
            {
                ret = this.astPeriods[astPeriods_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PVP33FightAttr : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iMeleeAttack; // 物理攻击
    public Int32 iMagicAttack; // 魔法攻击
    public Int32 iMeleeDefend; // 物理防御
    public Int32 iMagicDefend; // 魔法防御
    public Int32 iCritical; // 暴击
    public Int32 iHp; // 生命值

    /* construct methods */
    public PVP33FightAttr()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33FightAttr.CURRVERSION < cutVer)
        {
            cutVer = PVP33FightAttr.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33FightAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iMeleeAttack */
        {
            ret = destBuf.writeInt32(this.iMeleeAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iMagicAttack */
        {
            ret = destBuf.writeInt32(this.iMagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iMeleeDefend */
        {
            ret = destBuf.writeInt32(this.iMeleeDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iMagicDefend */
        {
            ret = destBuf.writeInt32(this.iMagicDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iCritical */
        {
            ret = destBuf.writeInt32(this.iCritical);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iHp */
        {
            ret = destBuf.writeInt32(this.iHp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33FightAttr.CURRVERSION < cutVer)
        {
            cutVer = PVP33FightAttr.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33FightAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iMeleeAttack */
        {
            ret = srcBuf.readInt32(ref this.iMeleeAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iMagicAttack */
        {
            ret = srcBuf.readInt32(ref this.iMagicAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iMeleeDefend */
        {
            ret = srcBuf.readInt32(ref this.iMeleeDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iMagicDefend */
        {
            ret = srcBuf.readInt32(ref this.iMagicDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCritical */
        {
            ret = srcBuf.readInt32(ref this.iCritical);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iHp */
        {
            ret = srcBuf.readInt32(ref this.iHp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PVP33Hero : tsf4g_csharp_interface
{
    /* public members */
    public sbyte[] szHeroCID;
    public PVP33FightAttr stFightAttr;
    public Int16 nResID;

    /* construct methods */
    public PVP33Hero()
    {
        szHeroCID = new sbyte[16];
        stFightAttr = new PVP33FightAttr();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33Hero.CURRVERSION < cutVer)
        {
            cutVer = PVP33Hero.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33Hero.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szHeroCID */
        {
            for (Int32 szHeroCID_i = 0; szHeroCID_i < 16; szHeroCID_i++)
            {
                ret = destBuf.writeInt8(this.szHeroCID[szHeroCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stFightAttr */
        if (PVP33Hero.VERSION_stFightAttr <= cutVer)
        {
            ret = this.stFightAttr.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nResID */
        if (PVP33Hero.VERSION_nResID <= cutVer)
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33Hero.CURRVERSION < cutVer)
        {
            cutVer = PVP33Hero.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33Hero.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szHeroCID */
        {
            for (Int32 szHeroCID_i = 0; szHeroCID_i < 16; szHeroCID_i++)
            {
                ret = srcBuf.readInt8(ref this.szHeroCID[szHeroCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.stFightAttr */
        if (PVP33Hero.VERSION_stFightAttr <= cutVer)
        {
            ret = this.stFightAttr.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stFightAttr.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.nResID */
        if (PVP33Hero.VERSION_nResID <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nResID = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 198;
    /* entry version info */
    public static readonly uint VERSION_stFightAttr = 197;
    public static readonly uint VERSION_nResID = 198;

    /* length of string or wstring */
}


public class PVP33Pet : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iPetID;
    public PVP33FightAttr stFightAttr;
    public Int16 nResID;

    /* construct methods */
    public PVP33Pet()
    {
        stFightAttr = new PVP33FightAttr();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33Pet.CURRVERSION < cutVer)
        {
            cutVer = PVP33Pet.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33Pet.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iPetID */
        {
            ret = destBuf.writeInt32(this.iPetID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stFightAttr */
        if (PVP33Pet.VERSION_stFightAttr <= cutVer)
        {
            ret = this.stFightAttr.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nResID */
        if (PVP33Pet.VERSION_nResID <= cutVer)
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33Pet.CURRVERSION < cutVer)
        {
            cutVer = PVP33Pet.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33Pet.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iPetID */
        {
            ret = srcBuf.readInt32(ref this.iPetID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stFightAttr */
        if (PVP33Pet.VERSION_stFightAttr <= cutVer)
        {
            ret = this.stFightAttr.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stFightAttr.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.nResID */
        if (PVP33Pet.VERSION_nResID <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nResID = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 198;
    /* entry version info */
    public static readonly uint VERSION_stFightAttr = 197;
    public static readonly uint VERSION_nResID = 198;

    /* length of string or wstring */
}


/* pvp33战斗阵容 */
public class PVP33Team : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iHeroNum;
    public PVP33Hero[] astHeros;
    public Int32 iPetNum;
    public PVP33Pet[] astPets;

    /* construct methods */
    public PVP33Team()
    {
        astHeros = new PVP33Hero[3];
        for (int astHeros_i = 0; astHeros_i < 3; astHeros_i++)
        {
            astHeros[astHeros_i] = new PVP33Hero();
        }

        astPets = new PVP33Pet[3];
        for (int astPets_i = 0; astPets_i < 3; astPets_i++)
        {
            astPets[astPets_i] = new PVP33Pet();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33Team.CURRVERSION < cutVer)
        {
            cutVer = PVP33Team.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33Team.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iHeroNum */
        {
            ret = destBuf.writeInt32(this.iHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astHeros */
        {
            if (0 > this.iHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeros.Length < this.iHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astHeros_i = 0; astHeros_i < this.iHeroNum; astHeros_i++)
            {
                ret = this.astHeros[astHeros_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.iPetNum */
        {
            ret = destBuf.writeInt32(this.iPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPets */
        {
            if (0 > this.iPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPets.Length < this.iPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPets_i = 0; astPets_i < this.iPetNum; astPets_i++)
            {
                ret = this.astPets[astPets_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVP33Team.CURRVERSION < cutVer)
        {
            cutVer = PVP33Team.CURRVERSION;
        }

        /* check cutversion */
        if (PVP33Team.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iHeroNum */
        {
            ret = srcBuf.readInt32(ref this.iHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astHeros */
        {
            if (0 > this.iHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeros.Length < this.iHeroNum)
            {
                astHeros = new PVP33Hero[this.iHeroNum];
                for (Int32 astHeros_i = 0; astHeros_i < this.iHeroNum; astHeros_i++)
                {
                    astHeros[astHeros_i] = new PVP33Hero();
                }
            }

            for (Int32 astHeros_i = 0; astHeros_i < this.iHeroNum; astHeros_i++)
            {
                ret = this.astHeros[astHeros_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.iPetNum */
        {
            ret = srcBuf.readInt32(ref this.iPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPets */
        {
            if (0 > this.iPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPets.Length < this.iPetNum)
            {
                astPets = new PVP33Pet[this.iPetNum];
                for (Int32 astPets_i = 0; astPets_i < this.iPetNum; astPets_i++)
                {
                    astPets[astPets_i] = new PVP33Pet();
                }
            }

            for (Int32 astPets_i = 0; astPets_i < this.iPetNum; astPets_i++)
            {
                ret = this.astPets[astPets_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 198;
    /* entry version info */

    /* length of string or wstring */
}


public class DBPVP33RewardInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nResKey;
    public sbyte chState; // 领取状态 0: 未完成-不可领取, 1: 可以领取, 2: 已经领取
    public Int32 iTime; // 最近一次领取的时间

    /* construct methods */
    public DBPVP33RewardInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVP33RewardInfo.CURRVERSION < cutVer)
        {
            cutVer = DBPVP33RewardInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVP33RewardInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nResKey */
        {
            ret = destBuf.writeInt16(this.nResKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chState */
        {
            ret = destBuf.writeInt8(this.chState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iTime */
        {
            ret = destBuf.writeInt32(this.iTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVP33RewardInfo.CURRVERSION < cutVer)
        {
            cutVer = DBPVP33RewardInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVP33RewardInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nResKey */
        {
            ret = srcBuf.readInt16(ref this.nResKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chState */
        {
            ret = srcBuf.readInt8(ref this.chState);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iTime */
        {
            ret = srcBuf.readInt32(ref this.iTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBPVP33RewardData : tsf4g_csharp_interface
{
    /* public members */
    public byte bNum;
    public DBPVP33RewardInfo[] astRecordInfo;

    /* construct methods */
    public DBPVP33RewardData()
    {
        astRecordInfo = new DBPVP33RewardInfo[20];
        for (int astRecordInfo_i = 0; astRecordInfo_i < 20; astRecordInfo_i++)
        {
            astRecordInfo[astRecordInfo_i] = new DBPVP33RewardInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVP33RewardData.CURRVERSION < cutVer)
        {
            cutVer = DBPVP33RewardData.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVP33RewardData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bNum */
        {
            ret = destBuf.writeUInt8(this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astRecordInfo */
        {
            if (20 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astRecordInfo.Length < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astRecordInfo_i = 0; astRecordInfo_i < this.bNum; astRecordInfo_i++)
            {
                ret = this.astRecordInfo[astRecordInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVP33RewardData.CURRVERSION < cutVer)
        {
            cutVer = DBPVP33RewardData.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVP33RewardData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bNum */
        {
            ret = srcBuf.readUInt8(ref this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astRecordInfo */
        {
            if (20 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astRecordInfo.Length < this.bNum)
            {
                astRecordInfo = new DBPVP33RewardInfo[this.bNum];
                for (Int32 astRecordInfo_i = 0; astRecordInfo_i < this.bNum; astRecordInfo_i++)
                {
                    astRecordInfo[astRecordInfo_i] = new DBPVP33RewardInfo();
                }
            }

            for (Int32 astRecordInfo_i = 0; astRecordInfo_i < this.bNum; astRecordInfo_i++)
            {
                ret = this.astRecordInfo[astRecordInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 需要存DB的3v3数据 */
public class DBPVP33Info : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nPvpLevel; // pvp等级
    public Int16 nPoints; // 积分
    public UInt16 wDayKillHero; // 当日击杀英雄个数
    public UInt32 dwAllKillHero; // 所有击杀英雄个数
    public UInt16 wDayWin; // 当日胜场
    public UInt16 wAllWin; // 所有胜场
    public sbyte chHasTeam; // 是否已经设置阵容
    public PVP33Team stTeam; // 最近一次的阵容
    public byte bFightTimes; // 当日战斗次数
    public UInt32 dwLastFightTime; // 最后一次战斗的时间戳
    public UInt32 dwWinInRow; // 连胜次数
    public byte bPvpSeason; // 赛季
    public DBPVP33RewardData[] astPvp33RewardData;
    public UInt32 dwLossInRow; // 连败次数
    public byte bSeasonReward; // 赛季奖励
    public Int16 nWkHighPvpLevel; // 一周内的最高pvp等级
    public UInt16 wAllLoss; // 所有败场
    public UInt32 dwWkWin; // 一周内胜场个数
    public Int16 nSsHighPvpLevel; // 一个赛季内达到的最高pvp等级
    public sbyte chIsFirstQuerySeason; // 是否是第一次请求赛季信息
    public UInt16 wAfterSeasonRewardNum; // 达到赛季奖励要求段位后又打了几把
    public sbyte chIsFighting; // 是否正在战斗

    /* construct methods */
    public DBPVP33Info()
    {
        stTeam = new PVP33Team();
        astPvp33RewardData = new DBPVP33RewardData[4];
        for (int astPvp33RewardData_i = 0; astPvp33RewardData_i < 4; astPvp33RewardData_i++)
        {
            astPvp33RewardData[astPvp33RewardData_i] = new DBPVP33RewardData();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVP33Info.CURRVERSION < cutVer)
        {
            cutVer = DBPVP33Info.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVP33Info.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nPvpLevel */
        {
            ret = destBuf.writeInt16(this.nPvpLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nPoints */
        {
            ret = destBuf.writeInt16(this.nPoints);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wDayKillHero */
        {
            ret = destBuf.writeUInt16(this.wDayKillHero);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwAllKillHero */
        {
            ret = destBuf.writeUInt32(this.dwAllKillHero);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wDayWin */
        {
            ret = destBuf.writeUInt16(this.wDayWin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAllWin */
        {
            ret = destBuf.writeUInt16(this.wAllWin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chHasTeam */
        {
            ret = destBuf.writeInt8(this.chHasTeam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stTeam */
        {
            ret = this.stTeam.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bFightTimes */
        if (DBPVP33Info.VERSION_bFightTimes <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bFightTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastFightTime */
        if (DBPVP33Info.VERSION_dwLastFightTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastFightTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwWinInRow */
        if (DBPVP33Info.VERSION_dwWinInRow <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwWinInRow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bPvpSeason */
        if (DBPVP33Info.VERSION_bPvpSeason <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bPvpSeason);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPvp33RewardData */
        if (DBPVP33Info.VERSION_astPvp33RewardData <= cutVer)
        {
            for (Int32 astPvp33RewardData_i = 0; astPvp33RewardData_i < 4; astPvp33RewardData_i++)
            {
                ret = this.astPvp33RewardData[astPvp33RewardData_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.dwLossInRow */
        if (DBPVP33Info.VERSION_dwLossInRow <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLossInRow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bSeasonReward */
        if (DBPVP33Info.VERSION_bSeasonReward <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bSeasonReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nWkHighPvpLevel */
        if (DBPVP33Info.VERSION_nWkHighPvpLevel <= cutVer)
        {
            ret = destBuf.writeInt16(this.nWkHighPvpLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAllLoss */
        if (DBPVP33Info.VERSION_wAllLoss <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAllLoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwWkWin */
        if (DBPVP33Info.VERSION_dwWkWin <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwWkWin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nSsHighPvpLevel */
        if (DBPVP33Info.VERSION_nSsHighPvpLevel <= cutVer)
        {
            ret = destBuf.writeInt16(this.nSsHighPvpLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chIsFirstQuerySeason */
        if (DBPVP33Info.VERSION_chIsFirstQuerySeason <= cutVer)
        {
            ret = destBuf.writeInt8(this.chIsFirstQuerySeason);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAfterSeasonRewardNum */
        if (DBPVP33Info.VERSION_wAfterSeasonRewardNum <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAfterSeasonRewardNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chIsFighting */
        if (DBPVP33Info.VERSION_chIsFighting <= cutVer)
        {
            ret = destBuf.writeInt8(this.chIsFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVP33Info.CURRVERSION < cutVer)
        {
            cutVer = DBPVP33Info.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVP33Info.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nPvpLevel */
        {
            ret = srcBuf.readInt16(ref this.nPvpLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nPoints */
        {
            ret = srcBuf.readInt16(ref this.nPoints);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wDayKillHero */
        {
            ret = srcBuf.readUInt16(ref this.wDayKillHero);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwAllKillHero */
        {
            ret = srcBuf.readUInt32(ref this.dwAllKillHero);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wDayWin */
        {
            ret = srcBuf.readUInt16(ref this.wDayWin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wAllWin */
        {
            ret = srcBuf.readUInt16(ref this.wAllWin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chHasTeam */
        {
            ret = srcBuf.readInt8(ref this.chHasTeam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stTeam */
        {
            ret = this.stTeam.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bFightTimes */
        if (DBPVP33Info.VERSION_bFightTimes <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bFightTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bFightTimes = 0;
        }

        /* unpack member: this.dwLastFightTime */
        if (DBPVP33Info.VERSION_dwLastFightTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastFightTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastFightTime = 0;
        }

        /* unpack member: this.dwWinInRow */
        if (DBPVP33Info.VERSION_dwWinInRow <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwWinInRow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwWinInRow = 0;
        }

        /* unpack member: this.bPvpSeason */
        if (DBPVP33Info.VERSION_bPvpSeason <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bPvpSeason);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bPvpSeason = 0;
        }

        /* unpack member: this.astPvp33RewardData */
        if (DBPVP33Info.VERSION_astPvp33RewardData <= cutVer)
        {
            for (Int32 astPvp33RewardData_i = 0; astPvp33RewardData_i < 4; astPvp33RewardData_i++)
            {
                ret = this.astPvp33RewardData[astPvp33RewardData_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            for (Int32 astPvp33RewardData_i = 0; astPvp33RewardData_i < 4; astPvp33RewardData_i++)
            {
                ret = this.astPvp33RewardData[astPvp33RewardData_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.dwLossInRow */
        if (DBPVP33Info.VERSION_dwLossInRow <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLossInRow);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLossInRow = 0;
        }

        /* unpack member: this.bSeasonReward */
        if (DBPVP33Info.VERSION_bSeasonReward <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bSeasonReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bSeasonReward = 0;
        }

        /* unpack member: this.nWkHighPvpLevel */
        if (DBPVP33Info.VERSION_nWkHighPvpLevel <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nWkHighPvpLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nWkHighPvpLevel = 0;
        }

        /* unpack member: this.wAllLoss */
        if (DBPVP33Info.VERSION_wAllLoss <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAllLoss);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAllLoss = 0;
        }

        /* unpack member: this.dwWkWin */
        if (DBPVP33Info.VERSION_dwWkWin <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwWkWin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwWkWin = 0;
        }

        /* unpack member: this.nSsHighPvpLevel */
        if (DBPVP33Info.VERSION_nSsHighPvpLevel <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nSsHighPvpLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nSsHighPvpLevel = 0;
        }

        /* unpack member: this.chIsFirstQuerySeason */
        if (DBPVP33Info.VERSION_chIsFirstQuerySeason <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chIsFirstQuerySeason);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chIsFirstQuerySeason = 0;
        }

        /* unpack member: this.wAfterSeasonRewardNum */
        if (DBPVP33Info.VERSION_wAfterSeasonRewardNum <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAfterSeasonRewardNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAfterSeasonRewardNum = 0;
        }

        /* unpack member: this.chIsFighting */
        if (DBPVP33Info.VERSION_chIsFighting <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chIsFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chIsFighting = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 220;
    /* entry version info */
    public static readonly uint VERSION_bFightTimes = 195;
    public static readonly uint VERSION_dwLastFightTime = 196;
    public static readonly uint VERSION_dwWinInRow = 199;
    public static readonly uint VERSION_bPvpSeason = 200;
    public static readonly uint VERSION_astPvp33RewardData = 201;
    public static readonly uint VERSION_dwLossInRow = 202;
    public static readonly uint VERSION_bSeasonReward = 204;
    public static readonly uint VERSION_nWkHighPvpLevel = 205;
    public static readonly uint VERSION_wAllLoss = 207;
    public static readonly uint VERSION_dwWkWin = 213;
    public static readonly uint VERSION_nSsHighPvpLevel = 215;
    public static readonly uint VERSION_chIsFirstQuerySeason = 218;
    public static readonly uint VERSION_wAfterSeasonRewardNum = 219;
    public static readonly uint VERSION_chIsFighting = 220;

    /* length of string or wstring */
}


public class DBDropItem : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iItemID; // 物品ID
    public UInt16 wRandTime; // 已经随机的次数

    /* construct methods */
    public DBDropItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBDropItem.CURRVERSION < cutVer)
        {
            cutVer = DBDropItem.CURRVERSION;
        }

        /* check cutversion */
        if (DBDropItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iItemID */
        {
            ret = destBuf.writeInt32(this.iItemID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wRandTime */
        {
            ret = destBuf.writeUInt16(this.wRandTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBDropItem.CURRVERSION < cutVer)
        {
            cutVer = DBDropItem.CURRVERSION;
        }

        /* check cutversion */
        if (DBDropItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iItemID */
        {
            ret = srcBuf.readInt32(ref this.iItemID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wRandTime */
        {
            ret = srcBuf.readUInt16(ref this.wRandTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBChest : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iCount; // 宝箱中的物品个数
    public DBDropItem[] astDropItem;

    /* construct methods */
    public DBChest()
    {
        astDropItem = new DBDropItem[10];
        for (int astDropItem_i = 0; astDropItem_i < 10; astDropItem_i++)
        {
            astDropItem[astDropItem_i] = new DBDropItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChest.CURRVERSION < cutVer)
        {
            cutVer = DBChest.CURRVERSION;
        }

        /* check cutversion */
        if (DBChest.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iCount */
        {
            ret = destBuf.writeInt32(this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astDropItem */
        {
            if (0 > this.iCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (10 < this.iCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astDropItem.Length < this.iCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astDropItem_i = 0; astDropItem_i < this.iCount; astDropItem_i++)
            {
                ret = this.astDropItem[astDropItem_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChest.CURRVERSION < cutVer)
        {
            cutVer = DBChest.CURRVERSION;
        }

        /* check cutversion */
        if (DBChest.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iCount */
        {
            ret = srcBuf.readInt32(ref this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astDropItem */
        {
            if (0 > this.iCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (10 < this.iCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astDropItem.Length < this.iCount)
            {
                astDropItem = new DBDropItem[this.iCount];
                for (Int32 astDropItem_i = 0; astDropItem_i < this.iCount; astDropItem_i++)
                {
                    astDropItem[astDropItem_i] = new DBDropItem();
                }
            }

            for (Int32 astDropItem_i = 0; astDropItem_i < this.iCount; astDropItem_i++)
            {
                ret = this.astDropItem[astDropItem_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 关卡 */
public class DBPass : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwPassID; // 关卡ID
    public sbyte chStarLevel; // 通关的评级 0表示该关没有通过
    public sbyte chFinishCount; // 当天完成的次数
    public UInt32 dwLastFinishTime; // 最后一次完成该关卡的时间
    public Int32 iChestCount; // 宝箱的数量
    public DBChest[] astChestList;
    public Int32 iScore; // 关卡历史最高得分
    public sbyte[] szEnterElement; // 关卡元素门是否进入过
    public sbyte chBossHPLeave; // 宠物投放活动boss血量百分比

    /* construct methods */
    public DBPass()
    {
        astChestList = new DBChest[18];
        for (int astChestList_i = 0; astChestList_i < 18; astChestList_i++)
        {
            astChestList[astChestList_i] = new DBChest();
        }

        szEnterElement = new sbyte[5];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPass.CURRVERSION < cutVer)
        {
            cutVer = DBPass.CURRVERSION;
        }

        /* check cutversion */
        if (DBPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwPassID */
        {
            ret = destBuf.writeUInt32(this.dwPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chStarLevel */
        {
            ret = destBuf.writeInt8(this.chStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chFinishCount */
        {
            ret = destBuf.writeInt8(this.chFinishCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastFinishTime */
        {
            ret = destBuf.writeUInt32(this.dwLastFinishTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iChestCount */
        if (DBPass.VERSION_iChestCount <= cutVer)
        {
            ret = destBuf.writeInt32(this.iChestCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astChestList */
        if (DBPass.VERSION_astChestList <= cutVer)
        {
            if (0 > this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (18 < this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astChestList.Length < this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astChestList_i = 0; astChestList_i < this.iChestCount; astChestList_i++)
            {
                ret = this.astChestList[astChestList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.iScore */
        if (DBPass.VERSION_iScore <= cutVer)
        {
            ret = destBuf.writeInt32(this.iScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szEnterElement */
        if (DBPass.VERSION_szEnterElement <= cutVer)
        {
            for (Int32 szEnterElement_i = 0; szEnterElement_i < 5; szEnterElement_i++)
            {
                ret = destBuf.writeInt8(this.szEnterElement[szEnterElement_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.chBossHPLeave */
        if (DBPass.VERSION_chBossHPLeave <= cutVer)
        {
            ret = destBuf.writeInt8(this.chBossHPLeave);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPass.CURRVERSION < cutVer)
        {
            cutVer = DBPass.CURRVERSION;
        }

        /* check cutversion */
        if (DBPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwPassID */
        {
            ret = srcBuf.readUInt32(ref this.dwPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chStarLevel */
        {
            ret = srcBuf.readInt8(ref this.chStarLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chFinishCount */
        {
            ret = srcBuf.readInt8(ref this.chFinishCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastFinishTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastFinishTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iChestCount */
        if (DBPass.VERSION_iChestCount <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iChestCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iChestCount = 0;
        }

        /* unpack member: this.astChestList */
        if (DBPass.VERSION_astChestList <= cutVer)
        {
            if (0 > this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (18 < this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astChestList.Length < this.iChestCount)
            {
                astChestList = new DBChest[this.iChestCount];
                for (Int32 astChestList_i = 0; astChestList_i < this.iChestCount; astChestList_i++)
                {
                    astChestList[astChestList_i] = new DBChest();
                }
            }

            for (Int32 astChestList_i = 0; astChestList_i < this.iChestCount; astChestList_i++)
            {
                ret = this.astChestList[astChestList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (18 < this.iChestCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astChestList_i = 0; astChestList_i < this.iChestCount; astChestList_i++)
            {
                ret = this.astChestList[astChestList_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.iScore */
        if (DBPass.VERSION_iScore <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iScore = 0;
        }

        /* unpack member: this.szEnterElement */
        if (DBPass.VERSION_szEnterElement <= cutVer)
        {
            for (Int32 szEnterElement_i = 0; szEnterElement_i < 5; szEnterElement_i++)
            {
                ret = srcBuf.readInt8(ref this.szEnterElement[szEnterElement_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.chBossHPLeave */
        if (DBPass.VERSION_chBossHPLeave <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chBossHPLeave);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chBossHPLeave = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 162;
    /* entry version info */
    public static readonly uint VERSION_iChestCount = 11;
    public static readonly uint VERSION_astChestList = 11;
    public static readonly uint VERSION_iScore = 48;
    public static readonly uint VERSION_szEnterElement = 54;
    public static readonly uint VERSION_chBossHPLeave = 162;

    /* length of string or wstring */
}


/* 当前关卡缓存数据 */
public class PassCacheData : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iPassID; // 当前正在进行的关卡id

    /* construct methods */
    public PassCacheData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PassCacheData.CURRVERSION < cutVer)
        {
            cutVer = PassCacheData.CURRVERSION;
        }

        /* check cutversion */
        if (PassCacheData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iPassID */
        {
            ret = destBuf.writeInt32(this.iPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PassCacheData.CURRVERSION < cutVer)
        {
            cutVer = PassCacheData.CURRVERSION;
        }

        /* check cutversion */
        if (PassCacheData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iPassID */
        {
            ret = srcBuf.readInt32(ref this.iPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 关卡扫荡数据 */
public class PassSweepData : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iSweepTimes; // 扫荡次数
    public UInt32 dwLastSweepTimes; // 上一次扫荡的时间

    /* construct methods */
    public PassSweepData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PassSweepData.CURRVERSION < cutVer)
        {
            cutVer = PassSweepData.CURRVERSION;
        }

        /* check cutversion */
        if (PassSweepData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iSweepTimes */
        {
            ret = destBuf.writeInt32(this.iSweepTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastSweepTimes */
        {
            ret = destBuf.writeUInt32(this.dwLastSweepTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PassSweepData.CURRVERSION < cutVer)
        {
            cutVer = PassSweepData.CURRVERSION;
        }

        /* check cutversion */
        if (PassSweepData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iSweepTimes */
        {
            ret = srcBuf.readInt32(ref this.iSweepTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastSweepTimes */
        {
            ret = srcBuf.readUInt32(ref this.dwLastSweepTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBChapter : tsf4g_csharp_interface
{
    /* public members */
    public byte bTotalStar; // 本章累计获得星星数
    public byte bStarAward; // bitmap标识是否领取过各档星星奖励

    /* construct methods */
    public DBChapter()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChapter.CURRVERSION < cutVer)
        {
            cutVer = DBChapter.CURRVERSION;
        }

        /* check cutversion */
        if (DBChapter.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bTotalStar */
        {
            ret = destBuf.writeUInt8(this.bTotalStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bStarAward */
        {
            ret = destBuf.writeUInt8(this.bStarAward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChapter.CURRVERSION < cutVer)
        {
            cutVer = DBChapter.CURRVERSION;
        }

        /* check cutversion */
        if (DBChapter.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bTotalStar */
        {
            ret = srcBuf.readUInt8(ref this.bTotalStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bStarAward */
        {
            ret = srcBuf.readUInt8(ref this.bStarAward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBChapterData : tsf4g_csharp_interface
{
    /* public members */
    public byte bChapterNum;
    public DBChapter[] astChapter;

    /* construct methods */
    public DBChapterData()
    {
        astChapter = new DBChapter[8];
        for (int astChapter_i = 0; astChapter_i < 8; astChapter_i++)
        {
            astChapter[astChapter_i] = new DBChapter();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChapterData.CURRVERSION < cutVer)
        {
            cutVer = DBChapterData.CURRVERSION;
        }

        /* check cutversion */
        if (DBChapterData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bChapterNum */
        {
            ret = destBuf.writeUInt8(this.bChapterNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astChapter */
        {
            for (Int32 astChapter_i = 0; astChapter_i < 8; astChapter_i++)
            {
                ret = this.astChapter[astChapter_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChapterData.CURRVERSION < cutVer)
        {
            cutVer = DBChapterData.CURRVERSION;
        }

        /* check cutversion */
        if (DBChapterData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bChapterNum */
        {
            ret = srcBuf.readUInt8(ref this.bChapterNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astChapter */
        {
            for (Int32 astChapter_i = 0; astChapter_i < 8; astChapter_i++)
            {
                ret = this.astChapter[astChapter_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class LittlePassSumCount : tsf4g_csharp_interface
{
    /* public members */
    public byte bIndex; // 关卡mod100
    public byte bTimes; // 当天完成的次数
    public Int32 iLastTime; // 完成次类关卡的最后时间

    /* construct methods */
    public LittlePassSumCount()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LittlePassSumCount.CURRVERSION < cutVer)
        {
            cutVer = LittlePassSumCount.CURRVERSION;
        }

        /* check cutversion */
        if (LittlePassSumCount.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIndex */
        {
            ret = destBuf.writeUInt8(this.bIndex);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bTimes */
        {
            ret = destBuf.writeUInt8(this.bTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLastTime */
        {
            ret = destBuf.writeInt32(this.iLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LittlePassSumCount.CURRVERSION < cutVer)
        {
            cutVer = LittlePassSumCount.CURRVERSION;
        }

        /* check cutversion */
        if (LittlePassSumCount.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIndex */
        {
            ret = srcBuf.readUInt8(ref this.bIndex);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bTimes */
        {
            ret = srcBuf.readUInt8(ref this.bTimes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iLastTime */
        {
            ret = srcBuf.readInt32(ref this.iLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 关卡总体DB */
public class RoleDBPass : tsf4g_csharp_interface
{
    /* public members */
    public byte bComPassNum; // 通过普通关卡的数量
    public DBPass[] astComPassList; // 普通关卡
    public byte bElitePassNum; // 通过精英关卡的数量
    public DBPass[] astElitePassList; // 精英关卡
    public byte bSkillPassNum; // 通过技能关卡的数量
    public DBPass[] astSkillPassList; // 技能关卡
    public DBChapterData stCommChapter; // 普通章节数据
    public DBChapterData stEliteChapter; // 精英章节数据
    public DBChapterData stSkillChapter; // 技能章节数据
    public PassCacheData stPassCache; // 关卡缓存数据
    public PassSweepData stPassSweep; // 关卡扫荡数据
    public byte bActivityPassNum; // 活动关卡需要保存的数量
    public DBPass[] astActivityPassList; // 活动关卡
    public byte bLittlePassNum; // 小关卡的数据
    public DBPass[] astLittlePassList; // little关卡
    public byte bLittlePassTypeNum;
    public LittlePassSumCount[] astLittlePassFinishInfo;

    /* construct methods */
    public RoleDBPass()
    {
        astComPassList = new DBPass[120];
        for (int astComPassList_i = 0; astComPassList_i < 120; astComPassList_i++)
        {
            astComPassList[astComPassList_i] = new DBPass();
        }

        astElitePassList = new DBPass[120];
        for (int astElitePassList_i = 0; astElitePassList_i < 120; astElitePassList_i++)
        {
            astElitePassList[astElitePassList_i] = new DBPass();
        }

        astSkillPassList = new DBPass[60];
        for (int astSkillPassList_i = 0; astSkillPassList_i < 60; astSkillPassList_i++)
        {
            astSkillPassList[astSkillPassList_i] = new DBPass();
        }

        stCommChapter = new DBChapterData();
        stEliteChapter = new DBChapterData();
        stSkillChapter = new DBChapterData();
        stPassCache = new PassCacheData();
        stPassSweep = new PassSweepData();
        astActivityPassList = new DBPass[80];
        for (int astActivityPassList_i = 0; astActivityPassList_i < 80; astActivityPassList_i++)
        {
            astActivityPassList[astActivityPassList_i] = new DBPass();
        }

        astLittlePassList = new DBPass[40];
        for (int astLittlePassList_i = 0; astLittlePassList_i < 40; astLittlePassList_i++)
        {
            astLittlePassList[astLittlePassList_i] = new DBPass();
        }

        astLittlePassFinishInfo = new LittlePassSumCount[10];
        for (int astLittlePassFinishInfo_i = 0; astLittlePassFinishInfo_i < 10; astLittlePassFinishInfo_i++)
        {
            astLittlePassFinishInfo[astLittlePassFinishInfo_i] = new LittlePassSumCount();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBPass.CURRVERSION < cutVer)
        {
            cutVer = RoleDBPass.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bComPassNum */
        {
            ret = destBuf.writeUInt8(this.bComPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astComPassList */
        {
            if (120 < this.bComPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astComPassList.Length < this.bComPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astComPassList_i = 0; astComPassList_i < this.bComPassNum; astComPassList_i++)
            {
                ret = this.astComPassList[astComPassList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bElitePassNum */
        {
            ret = destBuf.writeUInt8(this.bElitePassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astElitePassList */
        {
            if (120 < this.bElitePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astElitePassList.Length < this.bElitePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astElitePassList_i = 0; astElitePassList_i < this.bElitePassNum; astElitePassList_i++)
            {
                ret = this.astElitePassList[astElitePassList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bSkillPassNum */
        {
            ret = destBuf.writeUInt8(this.bSkillPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astSkillPassList */
        {
            if (60 < this.bSkillPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSkillPassList.Length < this.bSkillPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astSkillPassList_i = 0; astSkillPassList_i < this.bSkillPassNum; astSkillPassList_i++)
            {
                ret = this.astSkillPassList[astSkillPassList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stCommChapter */
        {
            ret = this.stCommChapter.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stEliteChapter */
        {
            ret = this.stEliteChapter.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSkillChapter */
        {
            ret = this.stSkillChapter.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPassCache */
        if (RoleDBPass.VERSION_stPassCache <= cutVer)
        {
            ret = this.stPassCache.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPassSweep */
        if (RoleDBPass.VERSION_stPassSweep <= cutVer)
        {
            ret = this.stPassSweep.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bActivityPassNum */
        if (RoleDBPass.VERSION_bActivityPassNum <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bActivityPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astActivityPassList */
        if (RoleDBPass.VERSION_astActivityPassList <= cutVer)
        {
            if (80 < this.bActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityPassList.Length < this.bActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astActivityPassList_i = 0; astActivityPassList_i < this.bActivityPassNum; astActivityPassList_i++)
            {
                ret = this.astActivityPassList[astActivityPassList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bLittlePassNum */
        if (RoleDBPass.VERSION_bLittlePassNum <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bLittlePassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astLittlePassList */
        if (RoleDBPass.VERSION_astLittlePassList <= cutVer)
        {
            if (40 < this.bLittlePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astLittlePassList.Length < this.bLittlePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astLittlePassList_i = 0; astLittlePassList_i < this.bLittlePassNum; astLittlePassList_i++)
            {
                ret = this.astLittlePassList[astLittlePassList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bLittlePassTypeNum */
        if (RoleDBPass.VERSION_bLittlePassTypeNum <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bLittlePassTypeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astLittlePassFinishInfo */
        if (RoleDBPass.VERSION_astLittlePassFinishInfo <= cutVer)
        {
            if (10 < this.bLittlePassTypeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astLittlePassFinishInfo.Length < this.bLittlePassTypeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astLittlePassFinishInfo_i = 0; astLittlePassFinishInfo_i < this.bLittlePassTypeNum; astLittlePassFinishInfo_i++)
            {
                ret = this.astLittlePassFinishInfo[astLittlePassFinishInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBPass.CURRVERSION < cutVer)
        {
            cutVer = RoleDBPass.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bComPassNum */
        {
            ret = srcBuf.readUInt8(ref this.bComPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astComPassList */
        {
            if (120 < this.bComPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astComPassList.Length < this.bComPassNum)
            {
                astComPassList = new DBPass[this.bComPassNum];
                for (Int32 astComPassList_i = 0; astComPassList_i < this.bComPassNum; astComPassList_i++)
                {
                    astComPassList[astComPassList_i] = new DBPass();
                }
            }

            for (Int32 astComPassList_i = 0; astComPassList_i < this.bComPassNum; astComPassList_i++)
            {
                ret = this.astComPassList[astComPassList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bElitePassNum */
        {
            ret = srcBuf.readUInt8(ref this.bElitePassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astElitePassList */
        {
            if (120 < this.bElitePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astElitePassList.Length < this.bElitePassNum)
            {
                astElitePassList = new DBPass[this.bElitePassNum];
                for (Int32 astElitePassList_i = 0; astElitePassList_i < this.bElitePassNum; astElitePassList_i++)
                {
                    astElitePassList[astElitePassList_i] = new DBPass();
                }
            }

            for (Int32 astElitePassList_i = 0; astElitePassList_i < this.bElitePassNum; astElitePassList_i++)
            {
                ret = this.astElitePassList[astElitePassList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bSkillPassNum */
        {
            ret = srcBuf.readUInt8(ref this.bSkillPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astSkillPassList */
        {
            if (60 < this.bSkillPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSkillPassList.Length < this.bSkillPassNum)
            {
                astSkillPassList = new DBPass[this.bSkillPassNum];
                for (Int32 astSkillPassList_i = 0; astSkillPassList_i < this.bSkillPassNum; astSkillPassList_i++)
                {
                    astSkillPassList[astSkillPassList_i] = new DBPass();
                }
            }

            for (Int32 astSkillPassList_i = 0; astSkillPassList_i < this.bSkillPassNum; astSkillPassList_i++)
            {
                ret = this.astSkillPassList[astSkillPassList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.stCommChapter */
        {
            ret = this.stCommChapter.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stEliteChapter */
        {
            ret = this.stEliteChapter.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stSkillChapter */
        {
            ret = this.stSkillChapter.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stPassCache */
        if (RoleDBPass.VERSION_stPassCache <= cutVer)
        {
            ret = this.stPassCache.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stPassCache.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stPassSweep */
        if (RoleDBPass.VERSION_stPassSweep <= cutVer)
        {
            ret = this.stPassSweep.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stPassSweep.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.bActivityPassNum */
        if (RoleDBPass.VERSION_bActivityPassNum <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bActivityPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bActivityPassNum = 0;
        }

        /* unpack member: this.astActivityPassList */
        if (RoleDBPass.VERSION_astActivityPassList <= cutVer)
        {
            if (80 < this.bActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityPassList.Length < this.bActivityPassNum)
            {
                astActivityPassList = new DBPass[this.bActivityPassNum];
                for (Int32 astActivityPassList_i = 0; astActivityPassList_i < this.bActivityPassNum; astActivityPassList_i++)
                {
                    astActivityPassList[astActivityPassList_i] = new DBPass();
                }
            }

            for (Int32 astActivityPassList_i = 0; astActivityPassList_i < this.bActivityPassNum; astActivityPassList_i++)
            {
                ret = this.astActivityPassList[astActivityPassList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (80 < this.bActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astActivityPassList_i = 0; astActivityPassList_i < this.bActivityPassNum; astActivityPassList_i++)
            {
                ret = this.astActivityPassList[astActivityPassList_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.bLittlePassNum */
        if (RoleDBPass.VERSION_bLittlePassNum <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bLittlePassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bLittlePassNum = 0;
        }

        /* unpack member: this.astLittlePassList */
        if (RoleDBPass.VERSION_astLittlePassList <= cutVer)
        {
            if (40 < this.bLittlePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astLittlePassList.Length < this.bLittlePassNum)
            {
                astLittlePassList = new DBPass[this.bLittlePassNum];
                for (Int32 astLittlePassList_i = 0; astLittlePassList_i < this.bLittlePassNum; astLittlePassList_i++)
                {
                    astLittlePassList[astLittlePassList_i] = new DBPass();
                }
            }

            for (Int32 astLittlePassList_i = 0; astLittlePassList_i < this.bLittlePassNum; astLittlePassList_i++)
            {
                ret = this.astLittlePassList[astLittlePassList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (40 < this.bLittlePassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astLittlePassList_i = 0; astLittlePassList_i < this.bLittlePassNum; astLittlePassList_i++)
            {
                ret = this.astLittlePassList[astLittlePassList_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.bLittlePassTypeNum */
        if (RoleDBPass.VERSION_bLittlePassTypeNum <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bLittlePassTypeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bLittlePassTypeNum = 0;
        }

        /* unpack member: this.astLittlePassFinishInfo */
        if (RoleDBPass.VERSION_astLittlePassFinishInfo <= cutVer)
        {
            if (10 < this.bLittlePassTypeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astLittlePassFinishInfo.Length < this.bLittlePassTypeNum)
            {
                astLittlePassFinishInfo = new LittlePassSumCount[this.bLittlePassTypeNum];
                for (Int32 astLittlePassFinishInfo_i = 0; astLittlePassFinishInfo_i < this.bLittlePassTypeNum; astLittlePassFinishInfo_i++)
                {
                    astLittlePassFinishInfo[astLittlePassFinishInfo_i] = new LittlePassSumCount();
                }
            }

            for (Int32 astLittlePassFinishInfo_i = 0; astLittlePassFinishInfo_i < this.bLittlePassTypeNum; astLittlePassFinishInfo_i++)
            {
                ret = this.astLittlePassFinishInfo[astLittlePassFinishInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (10 < this.bLittlePassTypeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astLittlePassFinishInfo_i = 0; astLittlePassFinishInfo_i < this.bLittlePassTypeNum; astLittlePassFinishInfo_i++)
            {
                ret = this.astLittlePassFinishInfo[astLittlePassFinishInfo_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 179;
    /* entry version info */
    public static readonly uint VERSION_stPassCache = 7;
    public static readonly uint VERSION_stPassSweep = 59;
    public static readonly uint VERSION_bActivityPassNum = 162;
    public static readonly uint VERSION_astActivityPassList = 162;
    public static readonly uint VERSION_bLittlePassNum = 171;
    public static readonly uint VERSION_astLittlePassList = 171;
    public static readonly uint VERSION_bLittlePassTypeNum = 179;
    public static readonly uint VERSION_astLittlePassFinishInfo = 179;

    /* length of string or wstring */
}


public class RolePassDBData
{
    /* public members */
    public RoleDBPass stUncompress;
    public DBCompress stCompress;

    /* public methods */
    public RolePassDBData()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        switch (selector)
        {
            case 0:
                if (this.stUncompress == null) this.stUncompress = new RoleDBPass();
                return this.stUncompress;
            case 1:
                if (this.stCompress == null) this.stCompress = new DBCompress();
                return this.stCompress;
        }

        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || RolePassDBData.CURRVERSION < cutVer)
        {
            cutVer = RolePassDBData.CURRVERSION;
        }

        /* check cutversion */
        if (RolePassDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || RolePassDBData.CURRVERSION < cutVer)
        {
            cutVer = RolePassDBData.CURRVERSION;
        }

        /* check cutversion */
        if (RolePassDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 179;
    /* entry version info */

    /* length of string or wstring */
}


public class ZRolePassDBData : tsf4g_csharp_interface
{
    /* public members */
    public byte bIsCompress;
    public RolePassDBData stData;

    /* construct methods */
    public ZRolePassDBData()
    {
        stData = new RolePassDBData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ZRolePassDBData.CURRVERSION < cutVer)
        {
            cutVer = ZRolePassDBData.CURRVERSION;
        }

        /* check cutversion */
        if (ZRolePassDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIsCompress */
        {
            ret = destBuf.writeUInt8(this.bIsCompress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stData */
        {
            Int64 selector4stData = this.bIsCompress;
            ret = this.stData.pack(selector4stData, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ZRolePassDBData.CURRVERSION < cutVer)
        {
            cutVer = ZRolePassDBData.CURRVERSION;
        }

        /* check cutversion */
        if (ZRolePassDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIsCompress */
        {
            ret = srcBuf.readUInt8(ref this.bIsCompress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stData */
        {
            Int64 selector4stData = this.bIsCompress;
            ret = this.stData.unpack(selector4stData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 179;
    /* entry version info */

    /* length of string or wstring */
}


public class TaskStatusUnit : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iTaskID; // 任务ID
    public Int32 iStatus; // 任务进度,取值大于0表示进度,其他取值TASK_STATUS_*

    /* construct methods */
    public TaskStatusUnit()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TaskStatusUnit.CURRVERSION < cutVer)
        {
            cutVer = TaskStatusUnit.CURRVERSION;
        }

        /* check cutversion */
        if (TaskStatusUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iTaskID */
        {
            ret = destBuf.writeInt32(this.iTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iStatus */
        {
            ret = destBuf.writeInt32(this.iStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TaskStatusUnit.CURRVERSION < cutVer)
        {
            cutVer = TaskStatusUnit.CURRVERSION;
        }

        /* check cutversion */
        if (TaskStatusUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iTaskID */
        {
            ret = srcBuf.readInt32(ref this.iTaskID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iStatus */
        {
            ret = srcBuf.readInt32(ref this.iStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class TaskStatusRecord : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wTaskNum; // 当前任务数:包括未完成和可领取
    public TaskStatusUnit[] astTaskStatus; // 任务进度

    /* construct methods */
    public TaskStatusRecord()
    {
        astTaskStatus = new TaskStatusUnit[500];
        for (int astTaskStatus_i = 0; astTaskStatus_i < 500; astTaskStatus_i++)
        {
            astTaskStatus[astTaskStatus_i] = new TaskStatusUnit();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TaskStatusRecord.CURRVERSION < cutVer)
        {
            cutVer = TaskStatusRecord.CURRVERSION;
        }

        /* check cutversion */
        if (TaskStatusRecord.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wTaskNum */
        {
            ret = destBuf.writeUInt16(this.wTaskNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astTaskStatus */
        {
            if (500 < this.wTaskNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astTaskStatus.Length < this.wTaskNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astTaskStatus_i = 0; astTaskStatus_i < this.wTaskNum; astTaskStatus_i++)
            {
                ret = this.astTaskStatus[astTaskStatus_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TaskStatusRecord.CURRVERSION < cutVer)
        {
            cutVer = TaskStatusRecord.CURRVERSION;
        }

        /* check cutversion */
        if (TaskStatusRecord.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wTaskNum */
        {
            ret = srcBuf.readUInt16(ref this.wTaskNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astTaskStatus */
        {
            if (500 < this.wTaskNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astTaskStatus.Length < this.wTaskNum)
            {
                astTaskStatus = new TaskStatusUnit[this.wTaskNum];
                for (Int32 astTaskStatus_i = 0; astTaskStatus_i < this.wTaskNum; astTaskStatus_i++)
                {
                    astTaskStatus[astTaskStatus_i] = new TaskStatusUnit();
                }
            }

            for (Int32 astTaskStatus_i = 0; astTaskStatus_i < this.wTaskNum; astTaskStatus_i++)
            {
                ret = this.astTaskStatus[astTaskStatus_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class TaskPermanence : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wUsedByteNum; // 使用的字节数目，该值由最大的任务id来决定 UsedByteNum = (MaxTaskID + 7 ) / 8
    public sbyte[] szCommonTaskFinishRecord;

    /* construct methods */
    public TaskPermanence()
    {
        szCommonTaskFinishRecord = new sbyte[12500];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TaskPermanence.CURRVERSION < cutVer)
        {
            cutVer = TaskPermanence.CURRVERSION;
        }

        /* check cutversion */
        if (TaskPermanence.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wUsedByteNum */
        {
            ret = destBuf.writeUInt16(this.wUsedByteNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szCommonTaskFinishRecord */
        {
            if (12500 < this.wUsedByteNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szCommonTaskFinishRecord.Length < this.wUsedByteNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 szCommonTaskFinishRecord_i = 0; szCommonTaskFinishRecord_i < this.wUsedByteNum; szCommonTaskFinishRecord_i++)
            {
                ret = destBuf.writeInt8(this.szCommonTaskFinishRecord[szCommonTaskFinishRecord_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TaskPermanence.CURRVERSION < cutVer)
        {
            cutVer = TaskPermanence.CURRVERSION;
        }

        /* check cutversion */
        if (TaskPermanence.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wUsedByteNum */
        {
            ret = srcBuf.readUInt16(ref this.wUsedByteNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szCommonTaskFinishRecord */
        {
            if (12500 < this.wUsedByteNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szCommonTaskFinishRecord.Length < this.wUsedByteNum)
            {
                szCommonTaskFinishRecord = new sbyte[this.wUsedByteNum];
            }

            for (Int32 szCommonTaskFinishRecord_i = 0; szCommonTaskFinishRecord_i < this.wUsedByteNum; szCommonTaskFinishRecord_i++)
            {
                ret = srcBuf.readInt8(ref this.szCommonTaskFinishRecord[szCommonTaskFinishRecord_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 任务数据 */
public class DBTask : tsf4g_csharp_interface
{
    /* public members */
    public TaskStatusRecord stTaskStatusRecord; // 当前任务进度信息
    public TaskPermanence stTaskPermanence; // 任务持久化记录,包含只能完成一次和每日任务
    public UInt32 dwDailyTaskResetTime; // 每日任务刷新时间

    /* construct methods */
    public DBTask()
    {
        stTaskStatusRecord = new TaskStatusRecord();
        stTaskPermanence = new TaskPermanence();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBTask.CURRVERSION < cutVer)
        {
            cutVer = DBTask.CURRVERSION;
        }

        /* check cutversion */
        if (DBTask.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.stTaskStatusRecord */
        {
            ret = this.stTaskStatusRecord.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stTaskPermanence */
        {
            ret = this.stTaskPermanence.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwDailyTaskResetTime */
        {
            ret = destBuf.writeUInt32(this.dwDailyTaskResetTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBTask.CURRVERSION < cutVer)
        {
            cutVer = DBTask.CURRVERSION;
        }

        /* check cutversion */
        if (DBTask.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.stTaskStatusRecord */
        {
            ret = this.stTaskStatusRecord.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stTaskPermanence */
        {
            ret = this.stTaskPermanence.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwDailyTaskResetTime */
        {
            ret = srcBuf.readUInt32(ref this.dwDailyTaskResetTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 徽章属性 */
public class BadgeAttr : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nBadgeAttrID; // 徽章属性ID
    public Int32 iAttrAddType; // 属性增加类型
    public Int32 iAttrAddFunc; // 属性增加方法
    public Int32 iValue; // 属性值
    public Int32 iCount; // 领取次数,等级
    public Int32 iFighting; // 战力提升值

    /* construct methods */
    public BadgeAttr()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BadgeAttr.CURRVERSION < cutVer)
        {
            cutVer = BadgeAttr.CURRVERSION;
        }

        /* check cutversion */
        if (BadgeAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nBadgeAttrID */
        {
            ret = destBuf.writeInt16(this.nBadgeAttrID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAttrAddType */
        {
            ret = destBuf.writeInt32(this.iAttrAddType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAttrAddFunc */
        {
            ret = destBuf.writeInt32(this.iAttrAddFunc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iValue */
        {
            ret = destBuf.writeInt32(this.iValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iCount */
        if (BadgeAttr.VERSION_iCount <= cutVer)
        {
            ret = destBuf.writeInt32(this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFighting */
        if (BadgeAttr.VERSION_iFighting <= cutVer)
        {
            ret = destBuf.writeInt32(this.iFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BadgeAttr.CURRVERSION < cutVer)
        {
            cutVer = BadgeAttr.CURRVERSION;
        }

        /* check cutversion */
        if (BadgeAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nBadgeAttrID */
        {
            ret = srcBuf.readInt16(ref this.nBadgeAttrID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iAttrAddType */
        {
            ret = srcBuf.readInt32(ref this.iAttrAddType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iAttrAddFunc */
        {
            ret = srcBuf.readInt32(ref this.iAttrAddFunc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iValue */
        {
            ret = srcBuf.readInt32(ref this.iValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCount */
        if (BadgeAttr.VERSION_iCount <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iCount = 0;
        }

        /* unpack member: this.iFighting */
        if (BadgeAttr.VERSION_iFighting <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iFighting = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 39;
    /* entry version info */
    public static readonly uint VERSION_iCount = 34;
    public static readonly uint VERSION_iFighting = 39;

    /* length of string or wstring */
}


/* 徽章墙 */
public class DBBadgeWall : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nNum; // 数目
    public BadgeAttr[] astBadgeList; // 徽章属性列表

    /* construct methods */
    public DBBadgeWall()
    {
        astBadgeList = new BadgeAttr[12];
        for (int astBadgeList_i = 0; astBadgeList_i < 12; astBadgeList_i++)
        {
            astBadgeList[astBadgeList_i] = new BadgeAttr();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBBadgeWall.CURRVERSION < cutVer)
        {
            cutVer = DBBadgeWall.CURRVERSION;
        }

        /* check cutversion */
        if (DBBadgeWall.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astBadgeList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (12 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astBadgeList.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astBadgeList_i = 0; astBadgeList_i < this.nNum; astBadgeList_i++)
            {
                ret = this.astBadgeList[astBadgeList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBBadgeWall.CURRVERSION < cutVer)
        {
            cutVer = DBBadgeWall.CURRVERSION;
        }

        /* check cutversion */
        if (DBBadgeWall.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astBadgeList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (12 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astBadgeList.Length < this.nNum)
            {
                astBadgeList = new BadgeAttr[this.nNum];
                for (Int32 astBadgeList_i = 0; astBadgeList_i < this.nNum; astBadgeList_i++)
                {
                    astBadgeList[astBadgeList_i] = new BadgeAttr();
                }
            }

            for (Int32 astBadgeList_i = 0; astBadgeList_i < this.nNum; astBadgeList_i++)
            {
                ret = this.astBadgeList[astBadgeList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 39;
    /* entry version info */

    /* length of string or wstring */
}


/* 徽章属性 */
public class BadgeSummary : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nBadgeAttrID; // 徽章属性ID
    public Int32 iValue; // 属性值
    public Int32 iCount; // 领取次数,等级
    public Int32 iFighting; // 战力提升值

    /* construct methods */
    public BadgeSummary()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BadgeSummary.CURRVERSION < cutVer)
        {
            cutVer = BadgeSummary.CURRVERSION;
        }

        /* check cutversion */
        if (BadgeSummary.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nBadgeAttrID */
        {
            ret = destBuf.writeInt16(this.nBadgeAttrID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iValue */
        {
            ret = destBuf.writeInt32(this.iValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iCount */
        if (BadgeSummary.VERSION_iCount <= cutVer)
        {
            ret = destBuf.writeInt32(this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFighting */
        if (BadgeSummary.VERSION_iFighting <= cutVer)
        {
            ret = destBuf.writeInt32(this.iFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BadgeSummary.CURRVERSION < cutVer)
        {
            cutVer = BadgeSummary.CURRVERSION;
        }

        /* check cutversion */
        if (BadgeSummary.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nBadgeAttrID */
        {
            ret = srcBuf.readInt16(ref this.nBadgeAttrID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iValue */
        {
            ret = srcBuf.readInt32(ref this.iValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCount */
        if (BadgeSummary.VERSION_iCount <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iCount = 0;
        }

        /* unpack member: this.iFighting */
        if (BadgeSummary.VERSION_iFighting <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iFighting = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 71;
    /* entry version info */
    public static readonly uint VERSION_iCount = 71;
    public static readonly uint VERSION_iFighting = 71;

    /* length of string or wstring */
}


/* 徽章墙 */
public class DBBadgeWallSummary : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nNum; // 数目
    public BadgeSummary[] astBadgeList; // 徽章属性列表

    /* construct methods */
    public DBBadgeWallSummary()
    {
        astBadgeList = new BadgeSummary[12];
        for (int astBadgeList_i = 0; astBadgeList_i < 12; astBadgeList_i++)
        {
            astBadgeList[astBadgeList_i] = new BadgeSummary();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBBadgeWallSummary.CURRVERSION < cutVer)
        {
            cutVer = DBBadgeWallSummary.CURRVERSION;
        }

        /* check cutversion */
        if (DBBadgeWallSummary.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astBadgeList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (12 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astBadgeList.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astBadgeList_i = 0; astBadgeList_i < this.nNum; astBadgeList_i++)
            {
                ret = this.astBadgeList[astBadgeList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBBadgeWallSummary.CURRVERSION < cutVer)
        {
            cutVer = DBBadgeWallSummary.CURRVERSION;
        }

        /* check cutversion */
        if (DBBadgeWallSummary.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astBadgeList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (12 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astBadgeList.Length < this.nNum)
            {
                astBadgeList = new BadgeSummary[this.nNum];
                for (Int32 astBadgeList_i = 0; astBadgeList_i < this.nNum; astBadgeList_i++)
                {
                    astBadgeList[astBadgeList_i] = new BadgeSummary();
                }
            }

            for (Int32 astBadgeList_i = 0; astBadgeList_i < this.nNum; astBadgeList_i++)
            {
                ret = this.astBadgeList[astBadgeList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 71;
    /* entry version info */

    /* length of string or wstring */
}


/* 名字牌 */
public class NameCard : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iNameCardID; // 名字牌ID
    public byte bStatus; // 名字牌状态,如上
    public UInt32 dwTime; // 领取时间

    /* construct methods */
    public NameCard()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NameCard.CURRVERSION < cutVer)
        {
            cutVer = NameCard.CURRVERSION;
        }

        /* check cutversion */
        if (NameCard.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iNameCardID */
        {
            ret = destBuf.writeInt32(this.iNameCardID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bStatus */
        {
            ret = destBuf.writeUInt8(this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwTime */
        if (NameCard.VERSION_dwTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || NameCard.CURRVERSION < cutVer)
        {
            cutVer = NameCard.CURRVERSION;
        }

        /* check cutversion */
        if (NameCard.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iNameCardID */
        {
            ret = srcBuf.readInt32(ref this.iNameCardID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bStatus */
        {
            ret = srcBuf.readUInt8(ref this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwTime */
        if (NameCard.VERSION_dwTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwTime = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 45;
    /* entry version info */
    public static readonly uint VERSION_dwTime = 45;

    /* length of string or wstring */
}


/* 名牌背包 */
public class DBNameCard : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNum; // 当前名牌数量
    public NameCard[] astNameCardList; // 名字牌ID列表

    /* construct methods */
    public DBNameCard()
    {
        astNameCardList = new NameCard[50];
        for (int astNameCardList_i = 0; astNameCardList_i < 50; astNameCardList_i++)
        {
            astNameCardList[astNameCardList_i] = new NameCard();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBNameCard.CURRVERSION < cutVer)
        {
            cutVer = DBNameCard.CURRVERSION;
        }

        /* check cutversion */
        if (DBNameCard.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astNameCardList */
        {
            if (50 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astNameCardList.Length < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astNameCardList_i = 0; astNameCardList_i < this.wNum; astNameCardList_i++)
            {
                ret = this.astNameCardList[astNameCardList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBNameCard.CURRVERSION < cutVer)
        {
            cutVer = DBNameCard.CURRVERSION;
        }

        /* check cutversion */
        if (DBNameCard.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astNameCardList */
        {
            if (50 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astNameCardList.Length < this.wNum)
            {
                astNameCardList = new NameCard[this.wNum];
                for (Int32 astNameCardList_i = 0; astNameCardList_i < this.wNum; astNameCardList_i++)
                {
                    astNameCardList[astNameCardList_i] = new NameCard();
                }
            }

            for (Int32 astNameCardList_i = 0; astNameCardList_i < this.wNum; astNameCardList_i++)
            {
                ret = this.astNameCardList[astNameCardList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 45;
    /* entry version info */

    /* length of string or wstring */
}


public class SkillUnit : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // 技能ID
    public byte bLevel; // 技能等级

    /* construct methods */
    public SkillUnit()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillUnit.CURRVERSION < cutVer)
        {
            cutVer = SkillUnit.CURRVERSION;
        }

        /* check cutversion */
        if (SkillUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bLevel */
        {
            ret = destBuf.writeUInt8(this.bLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SkillUnit.CURRVERSION < cutVer)
        {
            cutVer = SkillUnit.CURRVERSION;
        }

        /* check cutversion */
        if (SkillUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bLevel */
        {
            ret = srcBuf.readUInt8(ref this.bLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class HeroSkill : tsf4g_csharp_interface
{
    /* public members */
    public byte bActiveNum; // Active Skill Num
    public SkillUnit[] astActiveSkill; // Active Skill Info
    public byte bPassiveNum; // Passive Skill Num
    public SkillUnit[] astPassiveSkill; // Passive Skill Info

    /* construct methods */
    public HeroSkill()
    {
        astActiveSkill = new SkillUnit[5];
        for (int astActiveSkill_i = 0; astActiveSkill_i < 5; astActiveSkill_i++)
        {
            astActiveSkill[astActiveSkill_i] = new SkillUnit();
        }

        astPassiveSkill = new SkillUnit[6];
        for (int astPassiveSkill_i = 0; astPassiveSkill_i < 6; astPassiveSkill_i++)
        {
            astPassiveSkill[astPassiveSkill_i] = new SkillUnit();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroSkill.CURRVERSION < cutVer)
        {
            cutVer = HeroSkill.CURRVERSION;
        }

        /* check cutversion */
        if (HeroSkill.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bActiveNum */
        {
            ret = destBuf.writeUInt8(this.bActiveNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astActiveSkill */
        {
            if (5 < this.bActiveNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActiveSkill.Length < this.bActiveNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astActiveSkill_i = 0; astActiveSkill_i < this.bActiveNum; astActiveSkill_i++)
            {
                ret = this.astActiveSkill[astActiveSkill_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bPassiveNum */
        {
            ret = destBuf.writeUInt8(this.bPassiveNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPassiveSkill */
        {
            if (6 < this.bPassiveNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPassiveSkill.Length < this.bPassiveNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPassiveSkill_i = 0; astPassiveSkill_i < this.bPassiveNum; astPassiveSkill_i++)
            {
                ret = this.astPassiveSkill[astPassiveSkill_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroSkill.CURRVERSION < cutVer)
        {
            cutVer = HeroSkill.CURRVERSION;
        }

        /* check cutversion */
        if (HeroSkill.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bActiveNum */
        {
            ret = srcBuf.readUInt8(ref this.bActiveNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astActiveSkill */
        {
            if (5 < this.bActiveNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActiveSkill.Length < this.bActiveNum)
            {
                astActiveSkill = new SkillUnit[this.bActiveNum];
                for (Int32 astActiveSkill_i = 0; astActiveSkill_i < this.bActiveNum; astActiveSkill_i++)
                {
                    astActiveSkill[astActiveSkill_i] = new SkillUnit();
                }
            }

            for (Int32 astActiveSkill_i = 0; astActiveSkill_i < this.bActiveNum; astActiveSkill_i++)
            {
                ret = this.astActiveSkill[astActiveSkill_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bPassiveNum */
        {
            ret = srcBuf.readUInt8(ref this.bPassiveNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPassiveSkill */
        {
            if (6 < this.bPassiveNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPassiveSkill.Length < this.bPassiveNum)
            {
                astPassiveSkill = new SkillUnit[this.bPassiveNum];
                for (Int32 astPassiveSkill_i = 0; astPassiveSkill_i < this.bPassiveNum; astPassiveSkill_i++)
                {
                    astPassiveSkill[astPassiveSkill_i] = new SkillUnit();
                }
            }

            for (Int32 astPassiveSkill_i = 0; astPassiveSkill_i < this.bPassiveNum; astPassiveSkill_i++)
            {
                ret = this.astPassiveSkill[astPassiveSkill_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 英雄装备信息 */
public class HeroEquipDB : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwInstID; // 物品实例ID
    public Int32 iResID; // 装备ResID

    /* construct methods */
    public HeroEquipDB()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroEquipDB.CURRVERSION < cutVer)
        {
            cutVer = HeroEquipDB.CURRVERSION;
        }

        /* check cutversion */
        if (HeroEquipDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwInstID */
        {
            ret = destBuf.writeUInt32(this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iResID */
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroEquipDB.CURRVERSION < cutVer)
        {
            cutVer = HeroEquipDB.CURRVERSION;
        }

        /* check cutversion */
        if (HeroEquipDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwInstID */
        {
            ret = srcBuf.readUInt32(ref this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iResID */
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 英雄穿戴装备信息 */
public class HeroWearEquipDB : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wCount; // 已穿着装备个数
    public HeroEquipDB[] astEquip; // 穿着装备ID数组

    /* construct methods */
    public HeroWearEquipDB()
    {
        astEquip = new HeroEquipDB[2];
        for (int astEquip_i = 0; astEquip_i < 2; astEquip_i++)
        {
            astEquip[astEquip_i] = new HeroEquipDB();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroWearEquipDB.CURRVERSION < cutVer)
        {
            cutVer = HeroWearEquipDB.CURRVERSION;
        }

        /* check cutversion */
        if (HeroWearEquipDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wCount */
        {
            ret = destBuf.writeUInt16(this.wCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astEquip */
        {
            if (2 < this.wCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astEquip.Length < this.wCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astEquip_i = 0; astEquip_i < this.wCount; astEquip_i++)
            {
                ret = this.astEquip[astEquip_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroWearEquipDB.CURRVERSION < cutVer)
        {
            cutVer = HeroWearEquipDB.CURRVERSION;
        }

        /* check cutversion */
        if (HeroWearEquipDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wCount */
        {
            ret = srcBuf.readUInt16(ref this.wCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astEquip */
        {
            if (2 < this.wCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astEquip.Length < this.wCount)
            {
                astEquip = new HeroEquipDB[this.wCount];
                for (Int32 astEquip_i = 0; astEquip_i < this.wCount; astEquip_i++)
                {
                    astEquip[astEquip_i] = new HeroEquipDB();
                }
            }

            for (Int32 astEquip_i = 0; astEquip_i < this.wCount; astEquip_i++)
            {
                ret = this.astEquip[astEquip_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 英雄额外属性 */
public class HeroExtraAttr : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wAttrType; // 额外属性类型
    public Int32 iAttrValue; // 额外属性值

    /* construct methods */
    public HeroExtraAttr()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroExtraAttr.CURRVERSION < cutVer)
        {
            cutVer = HeroExtraAttr.CURRVERSION;
        }

        /* check cutversion */
        if (HeroExtraAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wAttrType */
        {
            ret = destBuf.writeUInt16(this.wAttrType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAttrValue */
        {
            ret = destBuf.writeInt32(this.iAttrValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroExtraAttr.CURRVERSION < cutVer)
        {
            cutVer = HeroExtraAttr.CURRVERSION;
        }

        /* check cutversion */
        if (HeroExtraAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wAttrType */
        {
            ret = srcBuf.readUInt16(ref this.wAttrType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iAttrValue */
        {
            ret = srcBuf.readInt32(ref this.iAttrValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 英雄额外属性 */
public class HeroExtraAttrInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wExtraAttrCount; // 额外属性个数
    public HeroExtraAttr[] astExtraAttrList; // 额外属性列表

    /* construct methods */
    public HeroExtraAttrInfo()
    {
        astExtraAttrList = new HeroExtraAttr[6];
        for (int astExtraAttrList_i = 0; astExtraAttrList_i < 6; astExtraAttrList_i++)
        {
            astExtraAttrList[astExtraAttrList_i] = new HeroExtraAttr();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroExtraAttrInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroExtraAttrInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroExtraAttrInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wExtraAttrCount */
        {
            ret = destBuf.writeUInt16(this.wExtraAttrCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astExtraAttrList */
        {
            if (6 < this.wExtraAttrCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astExtraAttrList.Length < this.wExtraAttrCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astExtraAttrList_i = 0; astExtraAttrList_i < this.wExtraAttrCount; astExtraAttrList_i++)
            {
                ret = this.astExtraAttrList[astExtraAttrList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroExtraAttrInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroExtraAttrInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroExtraAttrInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wExtraAttrCount */
        {
            ret = srcBuf.readUInt16(ref this.wExtraAttrCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astExtraAttrList */
        {
            if (6 < this.wExtraAttrCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astExtraAttrList.Length < this.wExtraAttrCount)
            {
                astExtraAttrList = new HeroExtraAttr[this.wExtraAttrCount];
                for (Int32 astExtraAttrList_i = 0; astExtraAttrList_i < this.wExtraAttrCount; astExtraAttrList_i++)
                {
                    astExtraAttrList[astExtraAttrList_i] = new HeroExtraAttr();
                }
            }

            for (Int32 astExtraAttrList_i = 0; astExtraAttrList_i < this.wExtraAttrCount; astExtraAttrList_i++)
            {
                ret = this.astExtraAttrList[astExtraAttrList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 宝藏插槽 */
public class TreasureSlot : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chID; // 插槽ID
    public Int32 iInstID; // 放置的宝藏实例ID
    public sbyte chUnLock; // 是否解锁
    public Int32 iResID; // 资源ID

    /* construct methods */
    public TreasureSlot()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TreasureSlot.CURRVERSION < cutVer)
        {
            cutVer = TreasureSlot.CURRVERSION;
        }

        /* check cutversion */
        if (TreasureSlot.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chID */
        {
            ret = destBuf.writeInt8(this.chID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iInstID */
        {
            ret = destBuf.writeInt32(this.iInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chUnLock */
        {
            ret = destBuf.writeInt8(this.chUnLock);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iResID */
        if (TreasureSlot.VERSION_iResID <= cutVer)
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TreasureSlot.CURRVERSION < cutVer)
        {
            cutVer = TreasureSlot.CURRVERSION;
        }

        /* check cutversion */
        if (TreasureSlot.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chID */
        {
            ret = srcBuf.readInt8(ref this.chID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iInstID */
        {
            ret = srcBuf.readInt32(ref this.iInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chUnLock */
        {
            ret = srcBuf.readInt8(ref this.chUnLock);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iResID */
        if (TreasureSlot.VERSION_iResID <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iResID = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 67;
    /* entry version info */
    public static readonly uint VERSION_iResID = 67;

    /* length of string or wstring */
}


/* 传奇宝藏 */
public class Treasure : tsf4g_csharp_interface
{
    /* public members */
    public byte bNum;
    public TreasureSlot[] astSlotList;

    /* construct methods */
    public Treasure()
    {
        astSlotList = new TreasureSlot[7];
        for (int astSlotList_i = 0; astSlotList_i < 7; astSlotList_i++)
        {
            astSlotList[astSlotList_i] = new TreasureSlot();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Treasure.CURRVERSION < cutVer)
        {
            cutVer = Treasure.CURRVERSION;
        }

        /* check cutversion */
        if (Treasure.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bNum */
        {
            ret = destBuf.writeUInt8(this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astSlotList */
        {
            if (7 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSlotList.Length < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astSlotList_i = 0; astSlotList_i < this.bNum; astSlotList_i++)
            {
                ret = this.astSlotList[astSlotList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Treasure.CURRVERSION < cutVer)
        {
            cutVer = Treasure.CURRVERSION;
        }

        /* check cutversion */
        if (Treasure.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bNum */
        {
            ret = srcBuf.readUInt8(ref this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astSlotList */
        {
            if (7 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSlotList.Length < this.bNum)
            {
                astSlotList = new TreasureSlot[this.bNum];
                for (Int32 astSlotList_i = 0; astSlotList_i < this.bNum; astSlotList_i++)
                {
                    astSlotList[astSlotList_i] = new TreasureSlot();
                }
            }

            for (Int32 astSlotList_i = 0; astSlotList_i < this.bNum; astSlotList_i++)
            {
                ret = this.astSlotList[astSlotList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 67;
    /* entry version info */

    /* length of string or wstring */
}


/* 新装备单个信息 */
public class DBNewEquipSingleInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // 装备ID
    public byte bLevel; // 装备等级

    /* construct methods */
    public DBNewEquipSingleInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBNewEquipSingleInfo.CURRVERSION < cutVer)
        {
            cutVer = DBNewEquipSingleInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBNewEquipSingleInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bLevel */
        {
            ret = destBuf.writeUInt8(this.bLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBNewEquipSingleInfo.CURRVERSION < cutVer)
        {
            cutVer = DBNewEquipSingleInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBNewEquipSingleInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bLevel */
        {
            ret = srcBuf.readUInt8(ref this.bLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 新装备信息 */
public class DBNewEquipInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bCommCnt; // 普通装备个数
    public DBNewEquipSingleInfo[] astCommEquips; // 各普通槽位装备等级
    public byte bSpecCnt; // 特殊装备个数
    public DBNewEquipSingleInfo[] astSpecEquips; // 各特殊槽位装备等级

    /* construct methods */
    public DBNewEquipInfo()
    {
        astCommEquips = new DBNewEquipSingleInfo[6];
        for (int astCommEquips_i = 0; astCommEquips_i < 6; astCommEquips_i++)
        {
            astCommEquips[astCommEquips_i] = new DBNewEquipSingleInfo();
        }

        astSpecEquips = new DBNewEquipSingleInfo[2];
        for (int astSpecEquips_i = 0; astSpecEquips_i < 2; astSpecEquips_i++)
        {
            astSpecEquips[astSpecEquips_i] = new DBNewEquipSingleInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBNewEquipInfo.CURRVERSION < cutVer)
        {
            cutVer = DBNewEquipInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBNewEquipInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bCommCnt */
        {
            ret = destBuf.writeUInt8(this.bCommCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astCommEquips */
        {
            if (6 < this.bCommCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astCommEquips.Length < this.bCommCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astCommEquips_i = 0; astCommEquips_i < this.bCommCnt; astCommEquips_i++)
            {
                ret = this.astCommEquips[astCommEquips_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bSpecCnt */
        {
            ret = destBuf.writeUInt8(this.bSpecCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astSpecEquips */
        {
            if (2 < this.bSpecCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSpecEquips.Length < this.bSpecCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astSpecEquips_i = 0; astSpecEquips_i < this.bSpecCnt; astSpecEquips_i++)
            {
                ret = this.astSpecEquips[astSpecEquips_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBNewEquipInfo.CURRVERSION < cutVer)
        {
            cutVer = DBNewEquipInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBNewEquipInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bCommCnt */
        {
            ret = srcBuf.readUInt8(ref this.bCommCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astCommEquips */
        {
            if (6 < this.bCommCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astCommEquips.Length < this.bCommCnt)
            {
                astCommEquips = new DBNewEquipSingleInfo[this.bCommCnt];
                for (Int32 astCommEquips_i = 0; astCommEquips_i < this.bCommCnt; astCommEquips_i++)
                {
                    astCommEquips[astCommEquips_i] = new DBNewEquipSingleInfo();
                }
            }

            for (Int32 astCommEquips_i = 0; astCommEquips_i < this.bCommCnt; astCommEquips_i++)
            {
                ret = this.astCommEquips[astCommEquips_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bSpecCnt */
        {
            ret = srcBuf.readUInt8(ref this.bSpecCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astSpecEquips */
        {
            if (2 < this.bSpecCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSpecEquips.Length < this.bSpecCnt)
            {
                astSpecEquips = new DBNewEquipSingleInfo[this.bSpecCnt];
                for (Int32 astSpecEquips_i = 0; astSpecEquips_i < this.bSpecCnt; astSpecEquips_i++)
                {
                    astSpecEquips[astSpecEquips_i] = new DBNewEquipSingleInfo();
                }
            }

            for (Int32 astSpecEquips_i = 0; astSpecEquips_i < this.bSpecCnt; astSpecEquips_i++)
            {
                ret = this.astSpecEquips[astSpecEquips_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 符文训练信息 */
public class TrainingInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bIsTraining; // 是否正在训练
    public UInt32 dwLastTraingTime; // 最后训练时间
    public UInt32 dwCurdayTrainingTime; // 当天已训练时间
    public UInt32 dwCurdayTrainingXP; // 当天训练增加经验数
    public byte bAttrCnt; // 属性值数
    public Int32[] AttrValue; // 属性经验值
    public UInt16 wTrainingLevel; // 当前训练等级

    /* construct methods */
    public TrainingInfo()
    {
        AttrValue = new Int32[6];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TrainingInfo.CURRVERSION < cutVer)
        {
            cutVer = TrainingInfo.CURRVERSION;
        }

        /* check cutversion */
        if (TrainingInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIsTraining */
        {
            ret = destBuf.writeUInt8(this.bIsTraining);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastTraingTime */
        {
            ret = destBuf.writeUInt32(this.dwLastTraingTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwCurdayTrainingTime */
        {
            ret = destBuf.writeUInt32(this.dwCurdayTrainingTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwCurdayTrainingXP */
        {
            ret = destBuf.writeUInt32(this.dwCurdayTrainingXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bAttrCnt */
        {
            ret = destBuf.writeUInt8(this.bAttrCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.AttrValue */
        {
            if (6 < this.bAttrCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (AttrValue.Length < this.bAttrCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 AttrValue_i = 0; AttrValue_i < this.bAttrCnt; AttrValue_i++)
            {
                ret = destBuf.writeInt32(this.AttrValue[AttrValue_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.wTrainingLevel */
        {
            ret = destBuf.writeUInt16(this.wTrainingLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TrainingInfo.CURRVERSION < cutVer)
        {
            cutVer = TrainingInfo.CURRVERSION;
        }

        /* check cutversion */
        if (TrainingInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIsTraining */
        {
            ret = srcBuf.readUInt8(ref this.bIsTraining);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastTraingTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastTraingTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwCurdayTrainingTime */
        {
            ret = srcBuf.readUInt32(ref this.dwCurdayTrainingTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwCurdayTrainingXP */
        {
            ret = srcBuf.readUInt32(ref this.dwCurdayTrainingXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bAttrCnt */
        {
            ret = srcBuf.readUInt8(ref this.bAttrCnt);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AttrValue */
        {
            if (6 < this.bAttrCnt)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (AttrValue.Length < this.bAttrCnt)
            {
                AttrValue = new Int32[this.bAttrCnt];
            }

            for (Int32 AttrValue_i = 0; AttrValue_i < this.bAttrCnt; AttrValue_i++)
            {
                ret = srcBuf.readInt32(ref this.AttrValue[AttrValue_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.wTrainingLevel */
        {
            ret = srcBuf.readUInt16(ref this.wTrainingLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBHeroActivateInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bAlreadyActivateNum; // 已激活的英雄数
    public Int16[] AlreadyActivateHeros; // 已激活的英雄

    /* construct methods */
    public DBHeroActivateInfo()
    {
        AlreadyActivateHeros = new Int16[20];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBHeroActivateInfo.CURRVERSION < cutVer)
        {
            cutVer = DBHeroActivateInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBHeroActivateInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bAlreadyActivateNum */
        {
            ret = destBuf.writeUInt8(this.bAlreadyActivateNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.AlreadyActivateHeros */
        {
            if (20 < this.bAlreadyActivateNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (AlreadyActivateHeros.Length < this.bAlreadyActivateNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 AlreadyActivateHeros_i = 0; AlreadyActivateHeros_i < this.bAlreadyActivateNum; AlreadyActivateHeros_i++)
            {
                ret = destBuf.writeInt16(this.AlreadyActivateHeros[AlreadyActivateHeros_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBHeroActivateInfo.CURRVERSION < cutVer)
        {
            cutVer = DBHeroActivateInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBHeroActivateInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bAlreadyActivateNum */
        {
            ret = srcBuf.readUInt8(ref this.bAlreadyActivateNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.AlreadyActivateHeros */
        {
            if (20 < this.bAlreadyActivateNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (AlreadyActivateHeros.Length < this.bAlreadyActivateNum)
            {
                AlreadyActivateHeros = new Int16[this.bAlreadyActivateNum];
            }

            for (Int32 AlreadyActivateHeros_i = 0; AlreadyActivateHeros_i < this.bAlreadyActivateNum; AlreadyActivateHeros_i++)
            {
                ret = srcBuf.readInt16(ref this.AlreadyActivateHeros[AlreadyActivateHeros_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class HeroInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szCID; // 英雄InstID
    public Int16 nResID; // 英雄资源ID
    public sbyte chAuth; // 玩具验证结果,取值为TOY_AUTH_RES_**
    public sbyte chToyType; // 取值TOY_TYPE_***
    public UInt32 dwBindTime; // 绑定时间
    public Int16 nLevel; // 英雄等级
    public Int32 iXP; // 英雄当前经验
    public byte bIsEvolution; // 是否是进化而来的
    public UInt32 dwFighting; // 英雄战力,由客户端同步
    public Int16 nLastWeaponID; // 最近使用的武器ID
    public Int16 nLastVirtualWeaponID; // 最近使用的虚拟武器ID
    public byte[] szClientWeaponCID; // 客户端保存的最近武器的ID,服务端没用到
    public byte[] szCurVirtualWeaponID; // 最近使用的虚拟武器CID
    public HeroSkill stSkill; // 英雄技能信息
    public HeroWearEquipDB stWearEquip; // 英雄穿戴装备信息
    public HeroExtraAttrInfo stExtraAttrInfo; // 英雄额外属性
    public byte[] szUID; // 英雄UID
    public DBNewEquipInfo stNewEquipInfo; // 新装备系统
    public TrainingInfo stTraining; // 符文训练

    /* construct methods */
    public HeroInfo()
    {
        szCID = new byte[16];
        szClientWeaponCID = new byte[16];
        szCurVirtualWeaponID = new byte[16];
        stSkill = new HeroSkill();
        stWearEquip = new HeroWearEquipDB();
        stExtraAttrInfo = new HeroExtraAttrInfo();
        szUID = new byte[14];
        stNewEquipInfo = new DBNewEquipInfo();
        stTraining = new TrainingInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szCID */
        if (HeroInfo.VERSION_szCID <= cutVer)
        {
            for (Int32 szCID_i = 0; szCID_i < 16; szCID_i++)
            {
                ret = destBuf.writeUInt8(this.szCID[szCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nResID */
        if (HeroInfo.VERSION_nResID <= cutVer)
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chAuth */
        {
            ret = destBuf.writeInt8(this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chToyType */
        if (HeroInfo.VERSION_chToyType <= cutVer)
        {
            ret = destBuf.writeInt8(this.chToyType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBindTime */
        if (HeroInfo.VERSION_dwBindTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwBindTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLevel */
        if (HeroInfo.VERSION_nLevel <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iXP */
        if (HeroInfo.VERSION_iXP <= cutVer)
        {
            ret = destBuf.writeInt32(this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bIsEvolution */
        if (HeroInfo.VERSION_bIsEvolution <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bIsEvolution);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwFighting */
        if (HeroInfo.VERSION_dwFighting <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLastWeaponID */
        if (HeroInfo.VERSION_nLastWeaponID <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLastWeaponID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLastVirtualWeaponID */
        if (HeroInfo.VERSION_nLastVirtualWeaponID <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLastVirtualWeaponID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szClientWeaponCID */
        if (HeroInfo.VERSION_szClientWeaponCID <= cutVer)
        {
            for (Int32 szClientWeaponCID_i = 0; szClientWeaponCID_i < 16; szClientWeaponCID_i++)
            {
                ret = destBuf.writeUInt8(this.szClientWeaponCID[szClientWeaponCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.szCurVirtualWeaponID */
        if (HeroInfo.VERSION_szCurVirtualWeaponID <= cutVer)
        {
            for (Int32 szCurVirtualWeaponID_i = 0; szCurVirtualWeaponID_i < 16; szCurVirtualWeaponID_i++)
            {
                ret = destBuf.writeUInt8(this.szCurVirtualWeaponID[szCurVirtualWeaponID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stSkill */
        if (HeroInfo.VERSION_stSkill <= cutVer)
        {
            ret = this.stSkill.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stWearEquip */
        if (HeroInfo.VERSION_stWearEquip <= cutVer)
        {
            ret = this.stWearEquip.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stExtraAttrInfo */
        if (HeroInfo.VERSION_stExtraAttrInfo <= cutVer)
        {
            ret = this.stExtraAttrInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szUID */
        if (HeroInfo.VERSION_szUID <= cutVer)
        {
            for (Int32 szUID_i = 0; szUID_i < 14; szUID_i++)
            {
                ret = destBuf.writeUInt8(this.szUID[szUID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stNewEquipInfo */
        if (HeroInfo.VERSION_stNewEquipInfo <= cutVer)
        {
            ret = this.stNewEquipInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stTraining */
        if (HeroInfo.VERSION_stTraining <= cutVer)
        {
            ret = this.stTraining.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szCID */
        if (HeroInfo.VERSION_szCID <= cutVer)
        {
            for (Int32 szCID_i = 0; szCID_i < 16; szCID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szCID[szCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.nResID */
        if (HeroInfo.VERSION_nResID <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nResID = 0;
        }

        /* unpack member: this.chAuth */
        {
            ret = srcBuf.readInt8(ref this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chToyType */
        if (HeroInfo.VERSION_chToyType <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chToyType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chToyType = 0;
        }

        /* unpack member: this.dwBindTime */
        if (HeroInfo.VERSION_dwBindTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwBindTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwBindTime = 0;
        }

        /* unpack member: this.nLevel */
        if (HeroInfo.VERSION_nLevel <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLevel = 0;
        }

        /* unpack member: this.iXP */
        if (HeroInfo.VERSION_iXP <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iXP = 0;
        }

        /* unpack member: this.bIsEvolution */
        if (HeroInfo.VERSION_bIsEvolution <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bIsEvolution);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bIsEvolution = 0;
        }

        /* unpack member: this.dwFighting */
        if (HeroInfo.VERSION_dwFighting <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwFighting = 0;
        }

        /* unpack member: this.nLastWeaponID */
        if (HeroInfo.VERSION_nLastWeaponID <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLastWeaponID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLastWeaponID = 0;
        }

        /* unpack member: this.nLastVirtualWeaponID */
        if (HeroInfo.VERSION_nLastVirtualWeaponID <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLastVirtualWeaponID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLastVirtualWeaponID = 0;
        }

        /* unpack member: this.szClientWeaponCID */
        if (HeroInfo.VERSION_szClientWeaponCID <= cutVer)
        {
            for (Int32 szClientWeaponCID_i = 0; szClientWeaponCID_i < 16; szClientWeaponCID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szClientWeaponCID[szClientWeaponCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.szCurVirtualWeaponID */
        if (HeroInfo.VERSION_szCurVirtualWeaponID <= cutVer)
        {
            for (Int32 szCurVirtualWeaponID_i = 0; szCurVirtualWeaponID_i < 16; szCurVirtualWeaponID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szCurVirtualWeaponID[szCurVirtualWeaponID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.stSkill */
        if (HeroInfo.VERSION_stSkill <= cutVer)
        {
            ret = this.stSkill.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stSkill.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stWearEquip */
        if (HeroInfo.VERSION_stWearEquip <= cutVer)
        {
            ret = this.stWearEquip.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stWearEquip.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stExtraAttrInfo */
        if (HeroInfo.VERSION_stExtraAttrInfo <= cutVer)
        {
            ret = this.stExtraAttrInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stExtraAttrInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.szUID */
        if (HeroInfo.VERSION_szUID <= cutVer)
        {
            for (Int32 szUID_i = 0; szUID_i < 14; szUID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szUID[szUID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.stNewEquipInfo */
        if (HeroInfo.VERSION_stNewEquipInfo <= cutVer)
        {
            ret = this.stNewEquipInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stNewEquipInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stTraining */
        if (HeroInfo.VERSION_stTraining <= cutVer)
        {
            ret = this.stTraining.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stTraining.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 136;
    /* entry version info */
    public static readonly uint VERSION_szCID = 22;
    public static readonly uint VERSION_nResID = 5;
    public static readonly uint VERSION_chToyType = 49;
    public static readonly uint VERSION_dwBindTime = 49;
    public static readonly uint VERSION_nLevel = 5;
    public static readonly uint VERSION_iXP = 5;
    public static readonly uint VERSION_bIsEvolution = 135;
    public static readonly uint VERSION_dwFighting = 68;
    public static readonly uint VERSION_nLastWeaponID = 69;
    public static readonly uint VERSION_nLastVirtualWeaponID = 124;
    public static readonly uint VERSION_szClientWeaponCID = 130;
    public static readonly uint VERSION_szCurVirtualWeaponID = 125;
    public static readonly uint VERSION_stSkill = 5;
    public static readonly uint VERSION_stWearEquip = 5;
    public static readonly uint VERSION_stExtraAttrInfo = 37;
    public static readonly uint VERSION_szUID = 74;
    public static readonly uint VERSION_stNewEquipInfo = 134;
    public static readonly uint VERSION_stTraining = 136;

    /* length of string or wstring */
}


public class OneHeroSummaryInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nResID; // 英雄资源ID
    public Int16 nLevel; // 英雄等级
    public byte bIsEvolution; // 是否是进化而来

    /* construct methods */
    public OneHeroSummaryInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OneHeroSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = OneHeroSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (OneHeroSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLevel */
        if (OneHeroSummaryInfo.VERSION_nLevel <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bIsEvolution */
        if (OneHeroSummaryInfo.VERSION_bIsEvolution <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bIsEvolution);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OneHeroSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = OneHeroSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (OneHeroSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nLevel */
        if (OneHeroSummaryInfo.VERSION_nLevel <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLevel = 0;
        }

        /* unpack member: this.bIsEvolution */
        if (OneHeroSummaryInfo.VERSION_bIsEvolution <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bIsEvolution);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bIsEvolution = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 137;
    /* entry version info */
    public static readonly uint VERSION_nLevel = 137;
    public static readonly uint VERSION_bIsEvolution = 137;

    /* length of string or wstring */
}


/* 英雄概要消息 */
public class HeroSummaryInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wHeroNum; // 绑定的英雄数
    public OneHeroSummaryInfo[] astHeroList; // 绑定的英雄列表
    public Int16 nResID; // 英雄资源ID
    public sbyte chAuth; // 玩具验证结果,取值为TOY_AUTH_RES_**
    public Int16 nLevel; // 英雄等级
    public Int32 iXP; // 英雄当前经验

    /* construct methods */
    public HeroSummaryInfo()
    {
        astHeroList = new OneHeroSummaryInfo[100];
        for (int astHeroList_i = 0; astHeroList_i < 100; astHeroList_i++)
        {
            astHeroList[astHeroList_i] = new OneHeroSummaryInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wHeroNum */
        if (HeroSummaryInfo.VERSION_wHeroNum <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astHeroList */
        if (HeroSummaryInfo.VERSION_astHeroList <= cutVer)
        {
            if (100 < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeroList.Length < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
            {
                ret = this.astHeroList[astHeroList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nResID */
        if (HeroSummaryInfo.VERSION_nResID <= cutVer)
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chAuth */
        {
            ret = destBuf.writeInt8(this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLevel */
        if (HeroSummaryInfo.VERSION_nLevel <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iXP */
        if (HeroSummaryInfo.VERSION_iXP <= cutVer)
        {
            ret = destBuf.writeInt32(this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wHeroNum */
        if (HeroSummaryInfo.VERSION_wHeroNum <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wHeroNum = 0;
        }

        /* unpack member: this.astHeroList */
        if (HeroSummaryInfo.VERSION_astHeroList <= cutVer)
        {
            if (100 < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeroList.Length < this.wHeroNum)
            {
                astHeroList = new OneHeroSummaryInfo[this.wHeroNum];
                for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
                {
                    astHeroList[astHeroList_i] = new OneHeroSummaryInfo();
                }
            }

            for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
            {
                ret = this.astHeroList[astHeroList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (100 < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
            {
                ret = this.astHeroList[astHeroList_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.nResID */
        if (HeroSummaryInfo.VERSION_nResID <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nResID = 0;
        }

        /* unpack member: this.chAuth */
        {
            ret = srcBuf.readInt8(ref this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nLevel */
        if (HeroSummaryInfo.VERSION_nLevel <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLevel = 0;
        }

        /* unpack member: this.iXP */
        if (HeroSummaryInfo.VERSION_iXP <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iXP = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 137;
    /* entry version info */
    public static readonly uint VERSION_wHeroNum = 64;
    public static readonly uint VERSION_astHeroList = 64;
    public static readonly uint VERSION_nResID = 5;
    public static readonly uint VERSION_nLevel = 5;
    public static readonly uint VERSION_iXP = 5;

    /* length of string or wstring */
}


public class RoleDBHero : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wHeroNum; // 绑定的英雄数
    public HeroInfo[] astHeroList; // 绑定的英雄列表
    public UInt32 dwMaxHeroInstID; // 英雄最新instid,一直递增
    public DBHeroActivateInfo stActivateInfo; // 激活英雄信息

    /* construct methods */
    public RoleDBHero()
    {
        astHeroList = new HeroInfo[100];
        for (int astHeroList_i = 0; astHeroList_i < 100; astHeroList_i++)
        {
            astHeroList[astHeroList_i] = new HeroInfo();
        }

        stActivateInfo = new DBHeroActivateInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBHero.CURRVERSION < cutVer)
        {
            cutVer = RoleDBHero.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBHero.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wHeroNum */
        {
            ret = destBuf.writeUInt16(this.wHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astHeroList */
        {
            if (100 < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeroList.Length < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
            {
                ret = this.astHeroList[astHeroList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.dwMaxHeroInstID */
        if (RoleDBHero.VERSION_dwMaxHeroInstID <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwMaxHeroInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stActivateInfo */
        if (RoleDBHero.VERSION_stActivateInfo <= cutVer)
        {
            ret = this.stActivateInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBHero.CURRVERSION < cutVer)
        {
            cutVer = RoleDBHero.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBHero.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wHeroNum */
        {
            ret = srcBuf.readUInt16(ref this.wHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astHeroList */
        {
            if (100 < this.wHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeroList.Length < this.wHeroNum)
            {
                astHeroList = new HeroInfo[this.wHeroNum];
                for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
                {
                    astHeroList[astHeroList_i] = new HeroInfo();
                }
            }

            for (Int32 astHeroList_i = 0; astHeroList_i < this.wHeroNum; astHeroList_i++)
            {
                ret = this.astHeroList[astHeroList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.dwMaxHeroInstID */
        if (RoleDBHero.VERSION_dwMaxHeroInstID <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwMaxHeroInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwMaxHeroInstID = 0;
        }

        /* unpack member: this.stActivateInfo */
        if (RoleDBHero.VERSION_stActivateInfo <= cutVer)
        {
            ret = this.stActivateInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stActivateInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 199;
    /* entry version info */
    public static readonly uint VERSION_dwMaxHeroInstID = 6;
    public static readonly uint VERSION_stActivateInfo = 199;

    /* length of string or wstring */
}


public class RoleHeroDBData
{
    /* public members */
    public RoleDBHero stUncompress;
    public DBCompress stCompress;

    /* public methods */
    public RoleHeroDBData()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        switch (selector)
        {
            case 0:
                if (this.stUncompress == null) this.stUncompress = new RoleDBHero();
                return this.stUncompress;
            case 1:
                if (this.stCompress == null) this.stCompress = new DBCompress();
                return this.stCompress;
        }

        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || RoleHeroDBData.CURRVERSION < cutVer)
        {
            cutVer = RoleHeroDBData.CURRVERSION;
        }

        /* check cutversion */
        if (RoleHeroDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || RoleHeroDBData.CURRVERSION < cutVer)
        {
            cutVer = RoleHeroDBData.CURRVERSION;
        }

        /* check cutversion */
        if (RoleHeroDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 199;
    /* entry version info */

    /* length of string or wstring */
}


public class ZRoleHeroDBData : tsf4g_csharp_interface
{
    /* public members */
    public byte bIsCompress;
    public RoleHeroDBData stData;

    /* construct methods */
    public ZRoleHeroDBData()
    {
        stData = new RoleHeroDBData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ZRoleHeroDBData.CURRVERSION < cutVer)
        {
            cutVer = ZRoleHeroDBData.CURRVERSION;
        }

        /* check cutversion */
        if (ZRoleHeroDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIsCompress */
        {
            ret = destBuf.writeUInt8(this.bIsCompress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stData */
        {
            Int64 selector4stData = this.bIsCompress;
            ret = this.stData.pack(selector4stData, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ZRoleHeroDBData.CURRVERSION < cutVer)
        {
            cutVer = ZRoleHeroDBData.CURRVERSION;
        }

        /* check cutversion */
        if (ZRoleHeroDBData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIsCompress */
        {
            ret = srcBuf.readUInt8(ref this.bIsCompress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stData */
        {
            Int64 selector4stData = this.bIsCompress;
            ret = this.stData.unpack(selector4stData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 199;
    /* entry version info */

    /* length of string or wstring */
}


public class PetSkill : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chNum; // 技能个数
    public SkillUnit[] astSkills; // 技能信息

    /* construct methods */
    public PetSkill()
    {
        astSkills = new SkillUnit[2];
        for (int astSkills_i = 0; astSkills_i < 2; astSkills_i++)
        {
            astSkills[astSkills_i] = new SkillUnit();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetSkill.CURRVERSION < cutVer)
        {
            cutVer = PetSkill.CURRVERSION;
        }

        /* check cutversion */
        if (PetSkill.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chNum */
        if (PetSkill.VERSION_chNum <= cutVer)
        {
            ret = destBuf.writeInt8(this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astSkills */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (2 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSkills.Length < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astSkills_i = 0; astSkills_i < this.chNum; astSkills_i++)
            {
                ret = this.astSkills[astSkills_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetSkill.CURRVERSION < cutVer)
        {
            cutVer = PetSkill.CURRVERSION;
        }

        /* check cutversion */
        if (PetSkill.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chNum */
        if (PetSkill.VERSION_chNum <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chNum = 0;
        }

        /* unpack member: this.astSkills */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (2 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSkills.Length < this.chNum)
            {
                astSkills = new SkillUnit[this.chNum];
                for (Int32 astSkills_i = 0; astSkills_i < this.chNum; astSkills_i++)
                {
                    astSkills[astSkills_i] = new SkillUnit();
                }
            }

            for (Int32 astSkills_i = 0; astSkills_i < this.chNum; astSkills_i++)
            {
                ret = this.astSkills[astSkills_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 15;
    /* entry version info */
    public static readonly uint VERSION_chNum = 15;

    /* length of string or wstring */
}


public class PetLearn : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chNum; // 学习力种类数
    public Int16[] LearnPoints; // 学习力点数

    /* construct methods */
    public PetLearn()
    {
        LearnPoints = new Int16[6];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetLearn.CURRVERSION < cutVer)
        {
            cutVer = PetLearn.CURRVERSION;
        }

        /* check cutversion */
        if (PetLearn.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chNum */
        if (PetLearn.VERSION_chNum <= cutVer)
        {
            ret = destBuf.writeInt8(this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.LearnPoints */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (6 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (LearnPoints.Length < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 LearnPoints_i = 0; LearnPoints_i < this.chNum; LearnPoints_i++)
            {
                ret = destBuf.writeInt16(this.LearnPoints[LearnPoints_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetLearn.CURRVERSION < cutVer)
        {
            cutVer = PetLearn.CURRVERSION;
        }

        /* check cutversion */
        if (PetLearn.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chNum */
        if (PetLearn.VERSION_chNum <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chNum = 0;
        }

        /* unpack member: this.LearnPoints */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (6 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (LearnPoints.Length < this.chNum)
            {
                LearnPoints = new Int16[this.chNum];
            }

            for (Int32 LearnPoints_i = 0; LearnPoints_i < this.chNum; LearnPoints_i++)
            {
                ret = srcBuf.readInt16(ref this.LearnPoints[LearnPoints_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 14;
    /* entry version info */
    public static readonly uint VERSION_chNum = 14;

    /* length of string or wstring */
}


public class PetInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nResID; // 宠物资源ID
    public UInt16 wLevel; // 宠物等级
    public Int32 iXP; // 宠物经验
    public PetLearn stLearn; // 宠物学习力
    public PetSkill stSkill; // 宠物技能
    public UInt32 dwCreateTime; // 宠物创建时间
    public UInt32 dwFighting; // 宠物战力值

    /* construct methods */
    public PetInfo()
    {
        stLearn = new PetLearn();
        stSkill = new PetSkill();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetInfo.CURRVERSION < cutVer)
        {
            cutVer = PetInfo.CURRVERSION;
        }

        /* check cutversion */
        if (PetInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wLevel */
        {
            ret = destBuf.writeUInt16(this.wLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iXP */
        {
            ret = destBuf.writeInt32(this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stLearn */
        {
            ret = this.stLearn.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSkill */
        {
            ret = this.stSkill.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwCreateTime */
        if (PetInfo.VERSION_dwCreateTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwCreateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwFighting */
        if (PetInfo.VERSION_dwFighting <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetInfo.CURRVERSION < cutVer)
        {
            cutVer = PetInfo.CURRVERSION;
        }

        /* check cutversion */
        if (PetInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wLevel */
        {
            ret = srcBuf.readUInt16(ref this.wLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iXP */
        {
            ret = srcBuf.readInt32(ref this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stLearn */
        {
            ret = this.stLearn.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stSkill */
        {
            ret = this.stSkill.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwCreateTime */
        if (PetInfo.VERSION_dwCreateTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwCreateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwCreateTime = 0;
        }

        /* unpack member: this.dwFighting */
        if (PetInfo.VERSION_dwFighting <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwFighting = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 72;
    /* entry version info */
    public static readonly uint VERSION_dwCreateTime = 17;
    public static readonly uint VERSION_dwFighting = 72;

    /* length of string or wstring */
}


public class OnePetSummaryInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nResID; // 宠物资源ID

    /* construct methods */
    public OnePetSummaryInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OnePetSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = OnePetSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (OnePetSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OnePetSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = OnePetSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (OnePetSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 宠物概要信息 */
public class PetSummaryInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nPetNum; // 宠物数量
    public OnePetSummaryInfo[] astPetList;
    public Int16 nResID; // 宠物资源ID
    public UInt16 wLevel; // 宠物等级
    public Int32 iXP; // 宠物经验

    /* construct methods */
    public PetSummaryInfo()
    {
        astPetList = new OnePetSummaryInfo[100];
        for (int astPetList_i = 0; astPetList_i < 100; astPetList_i++)
        {
            astPetList[astPetList_i] = new OnePetSummaryInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = PetSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (PetSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nPetNum */
        if (PetSummaryInfo.VERSION_nPetNum <= cutVer)
        {
            ret = destBuf.writeInt16(this.nPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPetList */
        if (PetSummaryInfo.VERSION_astPetList <= cutVer)
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPetList.Length < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
            {
                ret = this.astPetList[astPetList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wLevel */
        {
            ret = destBuf.writeUInt16(this.wLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iXP */
        {
            ret = destBuf.writeInt32(this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetSummaryInfo.CURRVERSION < cutVer)
        {
            cutVer = PetSummaryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (PetSummaryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nPetNum */
        if (PetSummaryInfo.VERSION_nPetNum <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nPetNum = 0;
        }

        /* unpack member: this.astPetList */
        if (PetSummaryInfo.VERSION_astPetList <= cutVer)
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPetList.Length < this.nPetNum)
            {
                astPetList = new OnePetSummaryInfo[this.nPetNum];
                for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
                {
                    astPetList[astPetList_i] = new OnePetSummaryInfo();
                }
            }

            for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
            {
                ret = this.astPetList[astPetList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
            {
                ret = this.astPetList[astPetList_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wLevel */
        {
            ret = srcBuf.readUInt16(ref this.wLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iXP */
        {
            ret = srcBuf.readInt32(ref this.iXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 64;
    /* entry version info */
    public static readonly uint VERSION_nPetNum = 64;
    public static readonly uint VERSION_astPetList = 64;

    /* length of string or wstring */
}


public class PetCapture : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szCID; // 捕捉棒CID
    public sbyte chAuth; // 捕捉棒验证结果,取值为TOY_AUTH_RES_**
    public sbyte chToyType; // 取值TOY_TYPE_***
    public UInt32 dwBindTime; // 绑定时间
    public Int16 nResID; // 关联的宠物ID
    public byte[] szUID; // UID

    /* construct methods */
    public PetCapture()
    {
        szCID = new byte[16];
        szUID = new byte[14];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetCapture.CURRVERSION < cutVer)
        {
            cutVer = PetCapture.CURRVERSION;
        }

        /* check cutversion */
        if (PetCapture.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szCID */
        {
            for (Int32 szCID_i = 0; szCID_i < 16; szCID_i++)
            {
                ret = destBuf.writeUInt8(this.szCID[szCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.chAuth */
        {
            ret = destBuf.writeInt8(this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chToyType */
        if (PetCapture.VERSION_chToyType <= cutVer)
        {
            ret = destBuf.writeInt8(this.chToyType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBindTime */
        if (PetCapture.VERSION_dwBindTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwBindTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szUID */
        if (PetCapture.VERSION_szUID <= cutVer)
        {
            for (Int32 szUID_i = 0; szUID_i < 14; szUID_i++)
            {
                ret = destBuf.writeUInt8(this.szUID[szUID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PetCapture.CURRVERSION < cutVer)
        {
            cutVer = PetCapture.CURRVERSION;
        }

        /* check cutversion */
        if (PetCapture.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szCID */
        {
            for (Int32 szCID_i = 0; szCID_i < 16; szCID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szCID[szCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.chAuth */
        {
            ret = srcBuf.readInt8(ref this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chToyType */
        if (PetCapture.VERSION_chToyType <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chToyType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chToyType = 0;
        }

        /* unpack member: this.dwBindTime */
        if (PetCapture.VERSION_dwBindTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwBindTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwBindTime = 0;
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szUID */
        if (PetCapture.VERSION_szUID <= cutVer)
        {
            for (Int32 szUID_i = 0; szUID_i < 14; szUID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szUID[szUID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 75;
    /* entry version info */
    public static readonly uint VERSION_chToyType = 49;
    public static readonly uint VERSION_dwBindTime = 49;
    public static readonly uint VERSION_szUID = 75;

    /* length of string or wstring */
}


public class RoleDBPetCapture : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nPetCaptureNum; // 绑定的捕捉棒数
    public PetCapture[] astPetCaptureList; // 绑定的捕捉棒列表

    /* construct methods */
    public RoleDBPetCapture()
    {
        astPetCaptureList = new PetCapture[20];
        for (int astPetCaptureList_i = 0; astPetCaptureList_i < 20; astPetCaptureList_i++)
        {
            astPetCaptureList[astPetCaptureList_i] = new PetCapture();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBPetCapture.CURRVERSION < cutVer)
        {
            cutVer = RoleDBPetCapture.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBPetCapture.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nPetCaptureNum */
        {
            ret = destBuf.writeInt16(this.nPetCaptureNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPetCaptureList */
        {
            if (0 > this.nPetCaptureNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (20 < this.nPetCaptureNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPetCaptureList.Length < this.nPetCaptureNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPetCaptureList_i = 0; astPetCaptureList_i < this.nPetCaptureNum; astPetCaptureList_i++)
            {
                ret = this.astPetCaptureList[astPetCaptureList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBPetCapture.CURRVERSION < cutVer)
        {
            cutVer = RoleDBPetCapture.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBPetCapture.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nPetCaptureNum */
        {
            ret = srcBuf.readInt16(ref this.nPetCaptureNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPetCaptureList */
        {
            if (0 > this.nPetCaptureNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (20 < this.nPetCaptureNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPetCaptureList.Length < this.nPetCaptureNum)
            {
                astPetCaptureList = new PetCapture[this.nPetCaptureNum];
                for (Int32 astPetCaptureList_i = 0; astPetCaptureList_i < this.nPetCaptureNum; astPetCaptureList_i++)
                {
                    astPetCaptureList[astPetCaptureList_i] = new PetCapture();
                }
            }

            for (Int32 astPetCaptureList_i = 0; astPetCaptureList_i < this.nPetCaptureNum; astPetCaptureList_i++)
            {
                ret = this.astPetCaptureList[astPetCaptureList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 75;
    /* entry version info */

    /* length of string or wstring */
}


public class RoleDBPet : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nPetNum; // 宠物数量
    public PetInfo[] astPetList; // 宠物列表
    public Int32 iPetEnergy; // 宠物能量值 每场战斗会设为固定值 待废弃

    /* construct methods */
    public RoleDBPet()
    {
        astPetList = new PetInfo[100];
        for (int astPetList_i = 0; astPetList_i < 100; astPetList_i++)
        {
            astPetList[astPetList_i] = new PetInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBPet.CURRVERSION < cutVer)
        {
            cutVer = RoleDBPet.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBPet.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nPetNum */
        {
            ret = destBuf.writeInt16(this.nPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPetList */
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPetList.Length < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
            {
                ret = this.astPetList[astPetList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.iPetEnergy */
        if (RoleDBPet.VERSION_iPetEnergy <= cutVer)
        {
            ret = destBuf.writeInt32(this.iPetEnergy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBPet.CURRVERSION < cutVer)
        {
            cutVer = RoleDBPet.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBPet.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nPetNum */
        {
            ret = srcBuf.readInt16(ref this.nPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPetList */
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPetList.Length < this.nPetNum)
            {
                astPetList = new PetInfo[this.nPetNum];
                for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
                {
                    astPetList[astPetList_i] = new PetInfo();
                }
            }

            for (Int32 astPetList_i = 0; astPetList_i < this.nPetNum; astPetList_i++)
            {
                ret = this.astPetList[astPetList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.iPetEnergy */
        if (RoleDBPet.VERSION_iPetEnergy <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iPetEnergy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iPetEnergy = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 72;
    /* entry version info */
    public static readonly uint VERSION_iPetEnergy = 15;

    /* length of string or wstring */
}


public class WeaponInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nResID; // 武器ID
    public byte[] szCID; // 武器CID
    public sbyte chAuth; // 验证结果,取值为TOY_AUTH_RES_**
    public sbyte chToyType; // 取值TOY_TYPE_***
    public UInt32 dwBindTime; // 绑定时间
    public byte bBindStatus; // 绑定状态, 1 绑定
    public byte[] szUID; // UID

    /* construct methods */
    public WeaponInfo()
    {
        szCID = new byte[16];
        szUID = new byte[14];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || WeaponInfo.CURRVERSION < cutVer)
        {
            cutVer = WeaponInfo.CURRVERSION;
        }

        /* check cutversion */
        if (WeaponInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szCID */
        {
            for (Int32 szCID_i = 0; szCID_i < 16; szCID_i++)
            {
                ret = destBuf.writeUInt8(this.szCID[szCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.chAuth */
        {
            ret = destBuf.writeInt8(this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chToyType */
        if (WeaponInfo.VERSION_chToyType <= cutVer)
        {
            ret = destBuf.writeInt8(this.chToyType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBindTime */
        if (WeaponInfo.VERSION_dwBindTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwBindTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bBindStatus */
        if (WeaponInfo.VERSION_bBindStatus <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bBindStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szUID */
        if (WeaponInfo.VERSION_szUID <= cutVer)
        {
            for (Int32 szUID_i = 0; szUID_i < 14; szUID_i++)
            {
                ret = destBuf.writeUInt8(this.szUID[szUID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || WeaponInfo.CURRVERSION < cutVer)
        {
            cutVer = WeaponInfo.CURRVERSION;
        }

        /* check cutversion */
        if (WeaponInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szCID */
        {
            for (Int32 szCID_i = 0; szCID_i < 16; szCID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szCID[szCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.chAuth */
        {
            ret = srcBuf.readInt8(ref this.chAuth);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chToyType */
        if (WeaponInfo.VERSION_chToyType <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chToyType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chToyType = 0;
        }

        /* unpack member: this.dwBindTime */
        if (WeaponInfo.VERSION_dwBindTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwBindTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwBindTime = 0;
        }

        /* unpack member: this.bBindStatus */
        if (WeaponInfo.VERSION_bBindStatus <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bBindStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bBindStatus = 0;
        }

        /* unpack member: this.szUID */
        if (WeaponInfo.VERSION_szUID <= cutVer)
        {
            for (Int32 szUID_i = 0; szUID_i < 14; szUID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szUID[szUID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 75;
    /* entry version info */
    public static readonly uint VERSION_chToyType = 49;
    public static readonly uint VERSION_dwBindTime = 49;
    public static readonly uint VERSION_bBindStatus = 70;
    public static readonly uint VERSION_szUID = 75;

    /* length of string or wstring */
}


public class DBWeapon : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nNum; // 武器数量
    public WeaponInfo[] astWeaponInfo; // 武器列表

    /* construct methods */
    public DBWeapon()
    {
        astWeaponInfo = new WeaponInfo[200];
        for (int astWeaponInfo_i = 0; astWeaponInfo_i < 200; astWeaponInfo_i++)
        {
            astWeaponInfo[astWeaponInfo_i] = new WeaponInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBWeapon.CURRVERSION < cutVer)
        {
            cutVer = DBWeapon.CURRVERSION;
        }

        /* check cutversion */
        if (DBWeapon.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astWeaponInfo */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astWeaponInfo.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astWeaponInfo_i = 0; astWeaponInfo_i < this.nNum; astWeaponInfo_i++)
            {
                ret = this.astWeaponInfo[astWeaponInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBWeapon.CURRVERSION < cutVer)
        {
            cutVer = DBWeapon.CURRVERSION;
        }

        /* check cutversion */
        if (DBWeapon.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astWeaponInfo */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astWeaponInfo.Length < this.nNum)
            {
                astWeaponInfo = new WeaponInfo[this.nNum];
                for (Int32 astWeaponInfo_i = 0; astWeaponInfo_i < this.nNum; astWeaponInfo_i++)
                {
                    astWeaponInfo[astWeaponInfo_i] = new WeaponInfo();
                }
            }

            for (Int32 astWeaponInfo_i = 0; astWeaponInfo_i < this.nNum; astWeaponInfo_i++)
            {
                ret = this.astWeaponInfo[astWeaponInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 75;
    /* entry version info */

    /* length of string or wstring */
}


public class EquipDB : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwInstID; // 物品实例ID 用于支持堆叠为1的物品
    public Int32 iResID; // 物品资源ID

    /* construct methods */
    public EquipDB()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EquipDB.CURRVERSION < cutVer)
        {
            cutVer = EquipDB.CURRVERSION;
        }

        /* check cutversion */
        if (EquipDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwInstID */
        {
            ret = destBuf.writeUInt32(this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iResID */
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EquipDB.CURRVERSION < cutVer)
        {
            cutVer = EquipDB.CURRVERSION;
        }

        /* check cutversion */
        if (EquipDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwInstID */
        {
            ret = srcBuf.readUInt32(ref this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iResID */
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PropDB : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwInstID; // 物品实例ID 用于支持堆叠为1的物品
    public Int32 iResID; // 物品资源ID
    public UInt16 wNumber; // 物品堆叠数

    /* construct methods */
    public PropDB()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PropDB.CURRVERSION < cutVer)
        {
            cutVer = PropDB.CURRVERSION;
        }

        /* check cutversion */
        if (PropDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwInstID */
        {
            ret = destBuf.writeUInt32(this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iResID */
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wNumber */
        {
            ret = destBuf.writeUInt16(this.wNumber);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PropDB.CURRVERSION < cutVer)
        {
            cutVer = PropDB.CURRVERSION;
        }

        /* check cutversion */
        if (PropDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwInstID */
        {
            ret = srcBuf.readUInt32(ref this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iResID */
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wNumber */
        {
            ret = srcBuf.readUInt16(ref this.wNumber);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PropBagDB : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nNum;
    public PropDB[] astProps;

    /* construct methods */
    public PropBagDB()
    {
        astProps = new PropDB[999];
        for (int astProps_i = 0; astProps_i < 999; astProps_i++)
        {
            astProps[astProps_i] = new PropDB();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PropBagDB.CURRVERSION < cutVer)
        {
            cutVer = PropBagDB.CURRVERSION;
        }

        /* check cutversion */
        if (PropBagDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astProps */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (999 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astProps.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astProps_i = 0; astProps_i < this.nNum; astProps_i++)
            {
                ret = this.astProps[astProps_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PropBagDB.CURRVERSION < cutVer)
        {
            cutVer = PropBagDB.CURRVERSION;
        }

        /* check cutversion */
        if (PropBagDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astProps */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (999 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astProps.Length < this.nNum)
            {
                astProps = new PropDB[this.nNum];
                for (Int32 astProps_i = 0; astProps_i < this.nNum; astProps_i++)
                {
                    astProps[astProps_i] = new PropDB();
                }
            }

            for (Int32 astProps_i = 0; astProps_i < this.nNum; astProps_i++)
            {
                ret = this.astProps[astProps_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class EquipBagDB : tsf4g_csharp_interface
{
    /* public members */
    public byte bInitBirthEquip; // 是否初始化出生装备(新老号区别)
    public Int16 nNum;
    public EquipDB[] astEquips;

    /* construct methods */
    public EquipBagDB()
    {
        astEquips = new EquipDB[999];
        for (int astEquips_i = 0; astEquips_i < 999; astEquips_i++)
        {
            astEquips[astEquips_i] = new EquipDB();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EquipBagDB.CURRVERSION < cutVer)
        {
            cutVer = EquipBagDB.CURRVERSION;
        }

        /* check cutversion */
        if (EquipBagDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bInitBirthEquip */
        if (EquipBagDB.VERSION_bInitBirthEquip <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bInitBirthEquip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astEquips */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (999 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astEquips.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astEquips_i = 0; astEquips_i < this.nNum; astEquips_i++)
            {
                ret = this.astEquips[astEquips_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || EquipBagDB.CURRVERSION < cutVer)
        {
            cutVer = EquipBagDB.CURRVERSION;
        }

        /* check cutversion */
        if (EquipBagDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bInitBirthEquip */
        if (EquipBagDB.VERSION_bInitBirthEquip <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bInitBirthEquip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bInitBirthEquip = 0;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astEquips */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (999 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astEquips.Length < this.nNum)
            {
                astEquips = new EquipDB[this.nNum];
                for (Int32 astEquips_i = 0; astEquips_i < this.nNum; astEquips_i++)
                {
                    astEquips[astEquips_i] = new EquipDB();
                }
            }

            for (Int32 astEquips_i = 0; astEquips_i < this.nNum; astEquips_i++)
            {
                ret = this.astEquips[astEquips_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 194;
    /* entry version info */
    public static readonly uint VERSION_bInitBirthEquip = 194;

    /* length of string or wstring */
}


public class RoleDBBag : tsf4g_csharp_interface
{
    /* public members */
    public EquipBagDB stEquipBag; // 装备背包
    public PropBagDB stPropBag; // 道具背包
    public UInt32 dwMaxItemInstID; // 角色当前最大的物品instid,用于生成物品instid,一直递增

    /* construct methods */
    public RoleDBBag()
    {
        stEquipBag = new EquipBagDB();
        stPropBag = new PropBagDB();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBBag.CURRVERSION < cutVer)
        {
            cutVer = RoleDBBag.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBBag.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.stEquipBag */
        {
            ret = this.stEquipBag.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPropBag */
        {
            ret = this.stPropBag.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMaxItemInstID */
        {
            ret = destBuf.writeUInt32(this.dwMaxItemInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBBag.CURRVERSION < cutVer)
        {
            cutVer = RoleDBBag.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBBag.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.stEquipBag */
        {
            ret = this.stEquipBag.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stPropBag */
        {
            ret = this.stPropBag.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwMaxItemInstID */
        {
            ret = srcBuf.readUInt32(ref this.dwMaxItemInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 194;
    /* entry version info */

    /* length of string or wstring */
}


public class BanDB : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwBanType; // 禁止类型
    public UInt32 dwBanEndTime; // 禁止截止时间

    /* construct methods */
    public BanDB()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BanDB.CURRVERSION < cutVer)
        {
            cutVer = BanDB.CURRVERSION;
        }

        /* check cutversion */
        if (BanDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwBanType */
        {
            ret = destBuf.writeUInt32(this.dwBanType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBanEndTime */
        {
            ret = destBuf.writeUInt32(this.dwBanEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BanDB.CURRVERSION < cutVer)
        {
            cutVer = BanDB.CURRVERSION;
        }

        /* check cutversion */
        if (BanDB.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwBanType */
        {
            ret = srcBuf.readUInt32(ref this.dwBanType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwBanEndTime */
        {
            ret = srcBuf.readUInt32(ref this.dwBanEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class BanEndInfo : tsf4g_csharp_interface
{
    /* public members */
    public BanDB[] astBans; // 禁止时间数据

    /* construct methods */
    public BanEndInfo()
    {
        astBans = new BanDB[64];
        for (int astBans_i = 0; astBans_i < 64; astBans_i++)
        {
            astBans[astBans_i] = new BanDB();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BanEndInfo.CURRVERSION < cutVer)
        {
            cutVer = BanEndInfo.CURRVERSION;
        }

        /* check cutversion */
        if (BanEndInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.astBans */
        {
            for (Int32 astBans_i = 0; astBans_i < 64; astBans_i++)
            {
                ret = this.astBans[astBans_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || BanEndInfo.CURRVERSION < cutVer)
        {
            cutVer = BanEndInfo.CURRVERSION;
        }

        /* check cutversion */
        if (BanEndInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.astBans */
        {
            for (Int32 astBans_i = 0; astBans_i < 64; astBans_i++)
            {
                ret = this.astBans[astBans_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 已使用过的配方ID列表 */
public class FormulaUsed : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // 已使用过的配方ID

    /* construct methods */
    public FormulaUsed()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FormulaUsed.CURRVERSION < cutVer)
        {
            cutVer = FormulaUsed.CURRVERSION;
        }

        /* check cutversion */
        if (FormulaUsed.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || FormulaUsed.CURRVERSION < cutVer)
        {
            cutVer = FormulaUsed.CURRVERSION;
        }

        /* check cutversion */
        if (FormulaUsed.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 配方列表 */
public class RoleDBFormula : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nNum;
    public FormulaUsed[] astFormulaList;

    /* construct methods */
    public RoleDBFormula()
    {
        astFormulaList = new FormulaUsed[20];
        for (int astFormulaList_i = 0; astFormulaList_i < 20; astFormulaList_i++)
        {
            astFormulaList[astFormulaList_i] = new FormulaUsed();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBFormula.CURRVERSION < cutVer)
        {
            cutVer = RoleDBFormula.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBFormula.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astFormulaList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (20 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astFormulaList.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astFormulaList_i = 0; astFormulaList_i < this.nNum; astFormulaList_i++)
            {
                ret = this.astFormulaList[astFormulaList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBFormula.CURRVERSION < cutVer)
        {
            cutVer = RoleDBFormula.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBFormula.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astFormulaList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (20 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astFormulaList.Length < this.nNum)
            {
                astFormulaList = new FormulaUsed[this.nNum];
                for (Int32 astFormulaList_i = 0; astFormulaList_i < this.nNum; astFormulaList_i++)
                {
                    astFormulaList[astFormulaList_i] = new FormulaUsed();
                }
            }

            for (Int32 astFormulaList_i = 0; astFormulaList_i < this.nNum; astFormulaList_i++)
            {
                ret = this.astFormulaList[astFormulaList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 最近使用的英雄 宠物等 */
public class DBLastToyInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szHeroCID; // 英雄CID
    public Int16 nPetResID; // 宠物资源ID

    /* construct methods */
    public DBLastToyInfo()
    {
        szHeroCID = new byte[16];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLastToyInfo.CURRVERSION < cutVer)
        {
            cutVer = DBLastToyInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBLastToyInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szHeroCID */
        {
            for (Int32 szHeroCID_i = 0; szHeroCID_i < 16; szHeroCID_i++)
            {
                ret = destBuf.writeUInt8(this.szHeroCID[szHeroCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nPetResID */
        {
            ret = destBuf.writeInt16(this.nPetResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLastToyInfo.CURRVERSION < cutVer)
        {
            cutVer = DBLastToyInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBLastToyInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szHeroCID */
        {
            for (Int32 szHeroCID_i = 0; szHeroCID_i < 16; szHeroCID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szHeroCID[szHeroCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.nPetResID */
        {
            ret = srcBuf.readInt16(ref this.nPetResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PVERound : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nRoundID; // 回合ID
    public Int32 iAccumulatePoint; // 积分
    public Int32 iComboPoint; // 连击加分
    public Int32 iExtraPoint; // 额外加分
    public Int32 iUsedTime; // 使用时间
    public Int32 iEnergy; // 能量值
    public Int32 iGold; // 金币
    public Int32 iEnergyPoint; // 能量积分

    /* construct methods */
    public PVERound()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVERound.CURRVERSION < cutVer)
        {
            cutVer = PVERound.CURRVERSION;
        }

        /* check cutversion */
        if (PVERound.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nRoundID */
        {
            ret = destBuf.writeInt16(this.nRoundID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAccumulatePoint */
        {
            ret = destBuf.writeInt32(this.iAccumulatePoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iComboPoint */
        {
            ret = destBuf.writeInt32(this.iComboPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iExtraPoint */
        {
            ret = destBuf.writeInt32(this.iExtraPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iUsedTime */
        {
            ret = destBuf.writeInt32(this.iUsedTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iEnergy */
        {
            ret = destBuf.writeInt32(this.iEnergy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iGold */
        {
            ret = destBuf.writeInt32(this.iGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iEnergyPoint */
        if (PVERound.VERSION_iEnergyPoint <= cutVer)
        {
            ret = destBuf.writeInt32(this.iEnergyPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVERound.CURRVERSION < cutVer)
        {
            cutVer = PVERound.CURRVERSION;
        }

        /* check cutversion */
        if (PVERound.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nRoundID */
        {
            ret = srcBuf.readInt16(ref this.nRoundID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iAccumulatePoint */
        {
            ret = srcBuf.readInt32(ref this.iAccumulatePoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iComboPoint */
        {
            ret = srcBuf.readInt32(ref this.iComboPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iExtraPoint */
        {
            ret = srcBuf.readInt32(ref this.iExtraPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iUsedTime */
        {
            ret = srcBuf.readInt32(ref this.iUsedTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iEnergy */
        {
            ret = srcBuf.readInt32(ref this.iEnergy);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iGold */
        {
            ret = srcBuf.readInt32(ref this.iGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iEnergyPoint */
        if (PVERound.VERSION_iEnergyPoint <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iEnergyPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iEnergyPoint = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 53;
    /* entry version info */
    public static readonly uint VERSION_iEnergyPoint = 53;

    /* length of string or wstring */
}


public class PVERoundHero : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szHeroCID; // 英雄CID
    public byte bStatus; // 英雄状态, 0活着 1死亡
    public Int16 nHP; // 英雄血量

    /* construct methods */
    public PVERoundHero()
    {
        szHeroCID = new byte[16];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVERoundHero.CURRVERSION < cutVer)
        {
            cutVer = PVERoundHero.CURRVERSION;
        }

        /* check cutversion */
        if (PVERoundHero.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szHeroCID */
        {
            for (Int32 szHeroCID_i = 0; szHeroCID_i < 16; szHeroCID_i++)
            {
                ret = destBuf.writeUInt8(this.szHeroCID[szHeroCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bStatus */
        {
            ret = destBuf.writeUInt8(this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nHP */
        if (PVERoundHero.VERSION_nHP <= cutVer)
        {
            ret = destBuf.writeInt16(this.nHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVERoundHero.CURRVERSION < cutVer)
        {
            cutVer = PVERoundHero.CURRVERSION;
        }

        /* check cutversion */
        if (PVERoundHero.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szHeroCID */
        {
            for (Int32 szHeroCID_i = 0; szHeroCID_i < 16; szHeroCID_i++)
            {
                ret = srcBuf.readUInt8(ref this.szHeroCID[szHeroCID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.bStatus */
        {
            ret = srcBuf.readUInt8(ref this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nHP */
        if (PVERoundHero.VERSION_nHP <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nHP = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 47;
    /* entry version info */
    public static readonly uint VERSION_nHP = 47;

    /* length of string or wstring */
}


public class PVERoundPet : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iPetID; // 宠物ID
    public byte bStatus; // 宠物状态
    public Int16 nHP; // 宠物血量

    /* construct methods */
    public PVERoundPet()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVERoundPet.CURRVERSION < cutVer)
        {
            cutVer = PVERoundPet.CURRVERSION;
        }

        /* check cutversion */
        if (PVERoundPet.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iPetID */
        if (PVERoundPet.VERSION_iPetID <= cutVer)
        {
            ret = destBuf.writeInt32(this.iPetID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bStatus */
        {
            ret = destBuf.writeUInt8(this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nHP */
        if (PVERoundPet.VERSION_nHP <= cutVer)
        {
            ret = destBuf.writeInt16(this.nHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVERoundPet.CURRVERSION < cutVer)
        {
            cutVer = PVERoundPet.CURRVERSION;
        }

        /* check cutversion */
        if (PVERoundPet.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iPetID */
        if (PVERoundPet.VERSION_iPetID <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iPetID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iPetID = 0;
        }

        /* unpack member: this.bStatus */
        {
            ret = srcBuf.readUInt8(ref this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nHP */
        if (PVERoundPet.VERSION_nHP <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nHP = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 50;
    /* entry version info */
    public static readonly uint VERSION_iPetID = 50;
    public static readonly uint VERSION_nHP = 47;

    /* length of string or wstring */
}


public class PVEUsedItem : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // 道具ID
    public Int16 nNum; // 本场使用数量

    /* construct methods */
    public PVEUsedItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVEUsedItem.CURRVERSION < cutVer)
        {
            cutVer = PVEUsedItem.CURRVERSION;
        }

        /* check cutversion */
        if (PVEUsedItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVEUsedItem.CURRVERSION < cutVer)
        {
            cutVer = PVEUsedItem.CURRVERSION;
        }

        /* check cutversion */
        if (PVEUsedItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PVEContinueData : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iProgress; // 续关ID
    public Int16 nItemNum; // 上次扫荡时使用的物品记录
    public PVEUsedItem[] astItemList;
    public Int32 iGold; // 上次扫荡获得的金币
    public Int32 iAccumulatePoint; // 上次扫荡获得的积分

    /* construct methods */
    public PVEContinueData()
    {
        astItemList = new PVEUsedItem[4];
        for (int astItemList_i = 0; astItemList_i < 4; astItemList_i++)
        {
            astItemList[astItemList_i] = new PVEUsedItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVEContinueData.CURRVERSION < cutVer)
        {
            cutVer = PVEContinueData.CURRVERSION;
        }

        /* check cutversion */
        if (PVEContinueData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iProgress */
        {
            ret = destBuf.writeInt32(this.iProgress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nItemNum */
        {
            ret = destBuf.writeInt16(this.nItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astItemList */
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (4 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astItemList.Length < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
            {
                ret = this.astItemList[astItemList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.iGold */
        {
            ret = destBuf.writeInt32(this.iGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAccumulatePoint */
        {
            ret = destBuf.writeInt32(this.iAccumulatePoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVEContinueData.CURRVERSION < cutVer)
        {
            cutVer = PVEContinueData.CURRVERSION;
        }

        /* check cutversion */
        if (PVEContinueData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iProgress */
        {
            ret = srcBuf.readInt32(ref this.iProgress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nItemNum */
        {
            ret = srcBuf.readInt16(ref this.nItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astItemList */
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (4 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astItemList.Length < this.nItemNum)
            {
                astItemList = new PVEUsedItem[this.nItemNum];
                for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
                {
                    astItemList[astItemList_i] = new PVEUsedItem();
                }
            }

            for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
            {
                ret = this.astItemList[astItemList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.iGold */
        {
            ret = srcBuf.readInt32(ref this.iGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iAccumulatePoint */
        {
            ret = srcBuf.readInt32(ref this.iAccumulatePoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DPVEInfo : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chMatchFinshCount; // 完成次数
    public Int32 iLastFinishTime; // 上次完成时间

    /* construct methods */
    public DPVEInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DPVEInfo.CURRVERSION < cutVer)
        {
            cutVer = DPVEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DPVEInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chMatchFinshCount */
        {
            ret = destBuf.writeInt8(this.chMatchFinshCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLastFinishTime */
        {
            ret = destBuf.writeInt32(this.iLastFinishTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DPVEInfo.CURRVERSION < cutVer)
        {
            cutVer = DPVEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DPVEInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chMatchFinshCount */
        {
            ret = srcBuf.readInt8(ref this.chMatchFinshCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iLastFinishTime */
        {
            ret = srcBuf.readInt32(ref this.iLastFinishTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBPVEInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nProgress; // 当前进度(回合ID)
    public Int16 nRoundNum; // 回合数
    public PVERound[] astBestRoundInfo; // 各回合最好数据
    public PVERound stRecentRoundInfo; // 各回合最近数据
    public Int16 nHeroNum; // 回合英雄数
    public PVERoundHero[] astRoundHero; // 当前英雄状态
    public Int16 nPetNum; // 宠物数
    public PVERoundPet[] astRoundPet;
    public Int16 nItemNum; // 使用的道具种类
    public PVEUsedItem[] astItemList;
    public Int16 nMaxSweepRound; // 最大扫荡回合,用于续关
    public UInt32 dwLastSweepTime; // 最近扫荡时间,用于续关
    public byte bSweepTimesThisDay; // 当天扫荡次数
    public UInt32 dwLastGameTime; // 最近游戏时间
    public UInt32 dwBestRoundThisWeek; // 本周最高回合数
    public UInt32 dwMaxPointsThisWeek; // 本周最高分
    public UInt32 dwLastLevelPoint; // 最近层的分数
    public UInt32 dwMaxRound; // 历史最高回合
    public DPVEInfo stDPVEInfo; // 双人匹配pve

    /* construct methods */
    public DBPVEInfo()
    {
        astBestRoundInfo = new PVERound[200];
        for (int astBestRoundInfo_i = 0; astBestRoundInfo_i < 200; astBestRoundInfo_i++)
        {
            astBestRoundInfo[astBestRoundInfo_i] = new PVERound();
        }

        stRecentRoundInfo = new PVERound();
        astRoundHero = new PVERoundHero[100];
        for (int astRoundHero_i = 0; astRoundHero_i < 100; astRoundHero_i++)
        {
            astRoundHero[astRoundHero_i] = new PVERoundHero();
        }

        astRoundPet = new PVERoundPet[100];
        for (int astRoundPet_i = 0; astRoundPet_i < 100; astRoundPet_i++)
        {
            astRoundPet[astRoundPet_i] = new PVERoundPet();
        }

        astItemList = new PVEUsedItem[4];
        for (int astItemList_i = 0; astItemList_i < 4; astItemList_i++)
        {
            astItemList[astItemList_i] = new PVEUsedItem();
        }

        stDPVEInfo = new DPVEInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVEInfo.CURRVERSION < cutVer)
        {
            cutVer = DBPVEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVEInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nProgress */
        if (DBPVEInfo.VERSION_nProgress <= cutVer)
        {
            ret = destBuf.writeInt16(this.nProgress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nRoundNum */
        if (DBPVEInfo.VERSION_nRoundNum <= cutVer)
        {
            ret = destBuf.writeInt16(this.nRoundNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astBestRoundInfo */
        if (DBPVEInfo.VERSION_astBestRoundInfo <= cutVer)
        {
            if (0 > this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astBestRoundInfo.Length < this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astBestRoundInfo_i = 0; astBestRoundInfo_i < this.nRoundNum; astBestRoundInfo_i++)
            {
                ret = this.astBestRoundInfo[astBestRoundInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stRecentRoundInfo */
        if (DBPVEInfo.VERSION_stRecentRoundInfo <= cutVer)
        {
            ret = this.stRecentRoundInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nHeroNum */
        {
            ret = destBuf.writeInt16(this.nHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astRoundHero */
        {
            if (0 > this.nHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astRoundHero.Length < this.nHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astRoundHero_i = 0; astRoundHero_i < this.nHeroNum; astRoundHero_i++)
            {
                ret = this.astRoundHero[astRoundHero_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nPetNum */
        if (DBPVEInfo.VERSION_nPetNum <= cutVer)
        {
            ret = destBuf.writeInt16(this.nPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astRoundPet */
        if (DBPVEInfo.VERSION_astRoundPet <= cutVer)
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astRoundPet.Length < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astRoundPet_i = 0; astRoundPet_i < this.nPetNum; astRoundPet_i++)
            {
                ret = this.astRoundPet[astRoundPet_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nItemNum */
        if (DBPVEInfo.VERSION_nItemNum <= cutVer)
        {
            ret = destBuf.writeInt16(this.nItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astItemList */
        if (DBPVEInfo.VERSION_astItemList <= cutVer)
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (4 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astItemList.Length < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
            {
                ret = this.astItemList[astItemList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nMaxSweepRound */
        if (DBPVEInfo.VERSION_nMaxSweepRound <= cutVer)
        {
            ret = destBuf.writeInt16(this.nMaxSweepRound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastSweepTime */
        if (DBPVEInfo.VERSION_dwLastSweepTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastSweepTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bSweepTimesThisDay */
        if (DBPVEInfo.VERSION_bSweepTimesThisDay <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bSweepTimesThisDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastGameTime */
        if (DBPVEInfo.VERSION_dwLastGameTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastGameTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBestRoundThisWeek */
        if (DBPVEInfo.VERSION_dwBestRoundThisWeek <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwBestRoundThisWeek);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMaxPointsThisWeek */
        if (DBPVEInfo.VERSION_dwMaxPointsThisWeek <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwMaxPointsThisWeek);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastLevelPoint */
        if (DBPVEInfo.VERSION_dwLastLevelPoint <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastLevelPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMaxRound */
        if (DBPVEInfo.VERSION_dwMaxRound <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwMaxRound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDPVEInfo */
        if (DBPVEInfo.VERSION_stDPVEInfo <= cutVer)
        {
            ret = this.stDPVEInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPVEInfo.CURRVERSION < cutVer)
        {
            cutVer = DBPVEInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBPVEInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nProgress */
        if (DBPVEInfo.VERSION_nProgress <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nProgress);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nProgress = 0;
        }

        /* unpack member: this.nRoundNum */
        if (DBPVEInfo.VERSION_nRoundNum <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nRoundNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nRoundNum = 0;
        }

        /* unpack member: this.astBestRoundInfo */
        if (DBPVEInfo.VERSION_astBestRoundInfo <= cutVer)
        {
            if (0 > this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astBestRoundInfo.Length < this.nRoundNum)
            {
                astBestRoundInfo = new PVERound[this.nRoundNum];
                for (Int32 astBestRoundInfo_i = 0; astBestRoundInfo_i < this.nRoundNum; astBestRoundInfo_i++)
                {
                    astBestRoundInfo[astBestRoundInfo_i] = new PVERound();
                }
            }

            for (Int32 astBestRoundInfo_i = 0; astBestRoundInfo_i < this.nRoundNum; astBestRoundInfo_i++)
            {
                ret = this.astBestRoundInfo[astBestRoundInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nRoundNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astBestRoundInfo_i = 0; astBestRoundInfo_i < this.nRoundNum; astBestRoundInfo_i++)
            {
                ret = this.astBestRoundInfo[astBestRoundInfo_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.stRecentRoundInfo */
        if (DBPVEInfo.VERSION_stRecentRoundInfo <= cutVer)
        {
            ret = this.stRecentRoundInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stRecentRoundInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.nHeroNum */
        {
            ret = srcBuf.readInt16(ref this.nHeroNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astRoundHero */
        {
            if (0 > this.nHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nHeroNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astRoundHero.Length < this.nHeroNum)
            {
                astRoundHero = new PVERoundHero[this.nHeroNum];
                for (Int32 astRoundHero_i = 0; astRoundHero_i < this.nHeroNum; astRoundHero_i++)
                {
                    astRoundHero[astRoundHero_i] = new PVERoundHero();
                }
            }

            for (Int32 astRoundHero_i = 0; astRoundHero_i < this.nHeroNum; astRoundHero_i++)
            {
                ret = this.astRoundHero[astRoundHero_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.nPetNum */
        if (DBPVEInfo.VERSION_nPetNum <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nPetNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nPetNum = 0;
        }

        /* unpack member: this.astRoundPet */
        if (DBPVEInfo.VERSION_astRoundPet <= cutVer)
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astRoundPet.Length < this.nPetNum)
            {
                astRoundPet = new PVERoundPet[this.nPetNum];
                for (Int32 astRoundPet_i = 0; astRoundPet_i < this.nPetNum; astRoundPet_i++)
                {
                    astRoundPet[astRoundPet_i] = new PVERoundPet();
                }
            }

            for (Int32 astRoundPet_i = 0; astRoundPet_i < this.nPetNum; astRoundPet_i++)
            {
                ret = this.astRoundPet[astRoundPet_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (100 < this.nPetNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astRoundPet_i = 0; astRoundPet_i < this.nPetNum; astRoundPet_i++)
            {
                ret = this.astRoundPet[astRoundPet_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.nItemNum */
        if (DBPVEInfo.VERSION_nItemNum <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nItemNum = 0;
        }

        /* unpack member: this.astItemList */
        if (DBPVEInfo.VERSION_astItemList <= cutVer)
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (4 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astItemList.Length < this.nItemNum)
            {
                astItemList = new PVEUsedItem[this.nItemNum];
                for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
                {
                    astItemList[astItemList_i] = new PVEUsedItem();
                }
            }

            for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
            {
                ret = this.astItemList[astItemList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (4 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astItemList_i = 0; astItemList_i < this.nItemNum; astItemList_i++)
            {
                ret = this.astItemList[astItemList_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.nMaxSweepRound */
        if (DBPVEInfo.VERSION_nMaxSweepRound <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nMaxSweepRound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nMaxSweepRound = 0;
        }

        /* unpack member: this.dwLastSweepTime */
        if (DBPVEInfo.VERSION_dwLastSweepTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastSweepTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastSweepTime = 0;
        }

        /* unpack member: this.bSweepTimesThisDay */
        if (DBPVEInfo.VERSION_bSweepTimesThisDay <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bSweepTimesThisDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bSweepTimesThisDay = 0;
        }

        /* unpack member: this.dwLastGameTime */
        if (DBPVEInfo.VERSION_dwLastGameTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastGameTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastGameTime = 0;
        }

        /* unpack member: this.dwBestRoundThisWeek */
        if (DBPVEInfo.VERSION_dwBestRoundThisWeek <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwBestRoundThisWeek);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwBestRoundThisWeek = 0;
        }

        /* unpack member: this.dwMaxPointsThisWeek */
        if (DBPVEInfo.VERSION_dwMaxPointsThisWeek <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwMaxPointsThisWeek);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwMaxPointsThisWeek = 0;
        }

        /* unpack member: this.dwLastLevelPoint */
        if (DBPVEInfo.VERSION_dwLastLevelPoint <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastLevelPoint);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastLevelPoint = 0;
        }

        /* unpack member: this.dwMaxRound */
        if (DBPVEInfo.VERSION_dwMaxRound <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwMaxRound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwMaxRound = 0;
        }

        /* unpack member: this.stDPVEInfo */
        if (DBPVEInfo.VERSION_stDPVEInfo <= cutVer)
        {
            ret = this.stDPVEInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDPVEInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 203;
    /* entry version info */
    public static readonly uint VERSION_nProgress = 41;
    public static readonly uint VERSION_nRoundNum = 41;
    public static readonly uint VERSION_astBestRoundInfo = 41;
    public static readonly uint VERSION_stRecentRoundInfo = 41;
    public static readonly uint VERSION_nPetNum = 46;
    public static readonly uint VERSION_astRoundPet = 46;
    public static readonly uint VERSION_nItemNum = 86;
    public static readonly uint VERSION_astItemList = 86;
    public static readonly uint VERSION_nMaxSweepRound = 86;
    public static readonly uint VERSION_dwLastSweepTime = 90;
    public static readonly uint VERSION_bSweepTimesThisDay = 138;
    public static readonly uint VERSION_dwLastGameTime = 138;
    public static readonly uint VERSION_dwBestRoundThisWeek = 138;
    public static readonly uint VERSION_dwMaxPointsThisWeek = 155;
    public static readonly uint VERSION_dwLastLevelPoint = 183;
    public static readonly uint VERSION_dwMaxRound = 184;
    public static readonly uint VERSION_stDPVEInfo = 203;

    /* length of string or wstring */
}


public class DBLotteryPackage : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // 礼包ID
    public UInt16 wMinTime; // 保底次数

    /* construct methods */
    public DBLotteryPackage()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLotteryPackage.CURRVERSION < cutVer)
        {
            cutVer = DBLotteryPackage.CURRVERSION;
        }

        /* check cutversion */
        if (DBLotteryPackage.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMinTime */
        {
            ret = destBuf.writeUInt16(this.wMinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLotteryPackage.CURRVERSION < cutVer)
        {
            cutVer = DBLotteryPackage.CURRVERSION;
        }

        /* check cutversion */
        if (DBLotteryPackage.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMinTime */
        {
            ret = srcBuf.readUInt16(ref this.wMinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBLotteryItem : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // 物品ID
    public UInt16 wMinTime; // 保底次数

    /* construct methods */
    public DBLotteryItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLotteryItem.CURRVERSION < cutVer)
        {
            cutVer = DBLotteryItem.CURRVERSION;
        }

        /* check cutversion */
        if (DBLotteryItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMinTime */
        {
            ret = destBuf.writeUInt16(this.wMinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLotteryItem.CURRVERSION < cutVer)
        {
            cutVer = DBLotteryItem.CURRVERSION;
        }

        /* check cutversion */
        if (DBLotteryItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMinTime */
        {
            ret = srcBuf.readUInt16(ref this.wMinTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBSignInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwLastSignTime; // 最后签到时间
    public Int32 iSignFinish; // 本月截至到今天的签到情况

    /* construct methods */
    public DBSignInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSignInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSignInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSignInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwLastSignTime */
        {
            ret = destBuf.writeUInt32(this.dwLastSignTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iSignFinish */
        {
            ret = destBuf.writeInt32(this.iSignFinish);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSignInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSignInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSignInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwLastSignTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastSignTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iSignFinish */
        {
            ret = srcBuf.readInt32(ref this.iSignFinish);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class SevenDayLoginStatus : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szStatus; // 七天登录状态列表

    /* construct methods */
    public SevenDayLoginStatus()
    {
        szStatus = new byte[7];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SevenDayLoginStatus.CURRVERSION < cutVer)
        {
            cutVer = SevenDayLoginStatus.CURRVERSION;
        }

        /* check cutversion */
        if (SevenDayLoginStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szStatus */
        {
            for (Int32 szStatus_i = 0; szStatus_i < 7; szStatus_i++)
            {
                ret = destBuf.writeUInt8(this.szStatus[szStatus_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SevenDayLoginStatus.CURRVERSION < cutVer)
        {
            cutVer = SevenDayLoginStatus.CURRVERSION;
        }

        /* check cutversion */
        if (SevenDayLoginStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szStatus */
        {
            for (Int32 szStatus_i = 0; szStatus_i < 7; szStatus_i++)
            {
                ret = srcBuf.readUInt8(ref this.szStatus[szStatus_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class SevenDayLogin : tsf4g_csharp_interface
{
    /* public members */
    public byte bIsSevenDayLogin; // 是否需要开启七天登录功能,1 开启; 0 不开启
    public SevenDayLoginStatus stSevenDayLoginStatus; // 七天登录信息

    /* construct methods */
    public SevenDayLogin()
    {
        stSevenDayLoginStatus = new SevenDayLoginStatus();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.bIsSevenDayLogin = 1;

        ret = this.stSevenDayLoginStatus.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SevenDayLogin.CURRVERSION < cutVer)
        {
            cutVer = SevenDayLogin.CURRVERSION;
        }

        /* check cutversion */
        if (SevenDayLogin.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIsSevenDayLogin */
        {
            ret = destBuf.writeUInt8(this.bIsSevenDayLogin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSevenDayLoginStatus */
        {
            if (1 == this.bIsSevenDayLogin)
            {
                ret = this.stSevenDayLoginStatus.pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SevenDayLogin.CURRVERSION < cutVer)
        {
            cutVer = SevenDayLogin.CURRVERSION;
        }

        /* check cutversion */
        if (SevenDayLogin.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIsSevenDayLogin */
        {
            ret = srcBuf.readUInt8(ref this.bIsSevenDayLogin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stSevenDayLoginStatus */
        {
            if (1 == this.bIsSevenDayLogin)
            {
                ret = this.stSevenDayLoginStatus.unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBLotteryInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nPackageNum; // 礼包数量
    public DBLotteryPackage[] astPackage;
    public Int16 nItemNum; // 道具数量
    public DBLotteryItem[] astItem;
    public sbyte chLotteryCount; // 当天的抽奖次数
    public Int32 iLotteryTime; // 最后一次的抽奖时间

    /* construct methods */
    public DBLotteryInfo()
    {
        astPackage = new DBLotteryPackage[8];
        for (int astPackage_i = 0; astPackage_i < 8; astPackage_i++)
        {
            astPackage[astPackage_i] = new DBLotteryPackage();
        }

        astItem = new DBLotteryItem[30];
        for (int astItem_i = 0; astItem_i < 30; astItem_i++)
        {
            astItem[astItem_i] = new DBLotteryItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLotteryInfo.CURRVERSION < cutVer)
        {
            cutVer = DBLotteryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBLotteryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nPackageNum */
        {
            ret = destBuf.writeInt16(this.nPackageNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPackage */
        {
            if (0 > this.nPackageNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (8 < this.nPackageNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPackage.Length < this.nPackageNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPackage_i = 0; astPackage_i < this.nPackageNum; astPackage_i++)
            {
                ret = this.astPackage[astPackage_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nItemNum */
        {
            ret = destBuf.writeInt16(this.nItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astItem */
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (30 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astItem.Length < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astItem_i = 0; astItem_i < this.nItemNum; astItem_i++)
            {
                ret = this.astItem[astItem_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.chLotteryCount */
        {
            ret = destBuf.writeInt8(this.chLotteryCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLotteryTime */
        {
            ret = destBuf.writeInt32(this.iLotteryTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLotteryInfo.CURRVERSION < cutVer)
        {
            cutVer = DBLotteryInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBLotteryInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nPackageNum */
        {
            ret = srcBuf.readInt16(ref this.nPackageNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPackage */
        {
            if (0 > this.nPackageNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (8 < this.nPackageNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPackage.Length < this.nPackageNum)
            {
                astPackage = new DBLotteryPackage[this.nPackageNum];
                for (Int32 astPackage_i = 0; astPackage_i < this.nPackageNum; astPackage_i++)
                {
                    astPackage[astPackage_i] = new DBLotteryPackage();
                }
            }

            for (Int32 astPackage_i = 0; astPackage_i < this.nPackageNum; astPackage_i++)
            {
                ret = this.astPackage[astPackage_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.nItemNum */
        {
            ret = srcBuf.readInt16(ref this.nItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astItem */
        {
            if (0 > this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (30 < this.nItemNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astItem.Length < this.nItemNum)
            {
                astItem = new DBLotteryItem[this.nItemNum];
                for (Int32 astItem_i = 0; astItem_i < this.nItemNum; astItem_i++)
                {
                    astItem[astItem_i] = new DBLotteryItem();
                }
            }

            for (Int32 astItem_i = 0; astItem_i < this.nItemNum; astItem_i++)
            {
                ret = this.astItem[astItem_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.chLotteryCount */
        {
            ret = srcBuf.readInt8(ref this.chLotteryCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iLotteryTime */
        {
            ret = srcBuf.readInt32(ref this.iLotteryTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class RankRewardStat : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullRewardStat; // 发奖状态，按位表示。支持多个排行榜
    public UInt32 dwLastRewardTime; // 上次操作时间

    /* construct methods */
    public RankRewardStat()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RankRewardStat.CURRVERSION < cutVer)
        {
            cutVer = RankRewardStat.CURRVERSION;
        }

        /* check cutversion */
        if (RankRewardStat.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullRewardStat */
        {
            ret = destBuf.writeUInt64(this.ullRewardStat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastRewardTime */
        {
            ret = destBuf.writeUInt32(this.dwLastRewardTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RankRewardStat.CURRVERSION < cutVer)
        {
            cutVer = RankRewardStat.CURRVERSION;
        }

        /* check cutversion */
        if (RankRewardStat.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullRewardStat */
        {
            ret = srcBuf.readUInt64(ref this.ullRewardStat);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastRewardTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastRewardTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 单个好友信息 */
public class DBSingleFriendInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullFriendGID; // 好友GID
    public UInt32 dwLastSendTime; // 最后送心时间

    /* construct methods */
    public DBSingleFriendInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleFriendInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSingleFriendInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleFriendInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullFriendGID */
        {
            ret = destBuf.writeUInt64(this.ullFriendGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastSendTime */
        {
            ret = destBuf.writeUInt32(this.dwLastSendTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleFriendInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSingleFriendInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleFriendInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullFriendGID */
        {
            ret = srcBuf.readUInt64(ref this.ullFriendGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastSendTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastSendTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 好友信息 */
public class DBFriendInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nNum; // 好友数量
    public DBSingleFriendInfo[] astFriendList;
    public Int16 nDailyRecvHeartNum; // 当日收心颗数
    public UInt32 dwLastRecvHeartTime; // 最后一次收心时间
    public Int32 iNpcFriendID; // Npc好友ID

    /* construct methods */
    public DBFriendInfo()
    {
        astFriendList = new DBSingleFriendInfo[200];
        for (int astFriendList_i = 0; astFriendList_i < 200; astFriendList_i++)
        {
            astFriendList[astFriendList_i] = new DBSingleFriendInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBFriendInfo.CURRVERSION < cutVer)
        {
            cutVer = DBFriendInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBFriendInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astFriendList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astFriendList.Length < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astFriendList_i = 0; astFriendList_i < this.nNum; astFriendList_i++)
            {
                ret = this.astFriendList[astFriendList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.nDailyRecvHeartNum */
        if (DBFriendInfo.VERSION_nDailyRecvHeartNum <= cutVer)
        {
            ret = destBuf.writeInt16(this.nDailyRecvHeartNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastRecvHeartTime */
        if (DBFriendInfo.VERSION_dwLastRecvHeartTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastRecvHeartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iNpcFriendID */
        if (DBFriendInfo.VERSION_iNpcFriendID <= cutVer)
        {
            ret = destBuf.writeInt32(this.iNpcFriendID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBFriendInfo.CURRVERSION < cutVer)
        {
            cutVer = DBFriendInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBFriendInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astFriendList */
        {
            if (0 > this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astFriendList.Length < this.nNum)
            {
                astFriendList = new DBSingleFriendInfo[this.nNum];
                for (Int32 astFriendList_i = 0; astFriendList_i < this.nNum; astFriendList_i++)
                {
                    astFriendList[astFriendList_i] = new DBSingleFriendInfo();
                }
            }

            for (Int32 astFriendList_i = 0; astFriendList_i < this.nNum; astFriendList_i++)
            {
                ret = this.astFriendList[astFriendList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.nDailyRecvHeartNum */
        if (DBFriendInfo.VERSION_nDailyRecvHeartNum <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nDailyRecvHeartNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nDailyRecvHeartNum = 0;
        }

        /* unpack member: this.dwLastRecvHeartTime */
        if (DBFriendInfo.VERSION_dwLastRecvHeartTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastRecvHeartTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastRecvHeartTime = 0;
        }

        /* unpack member: this.iNpcFriendID */
        if (DBFriendInfo.VERSION_iNpcFriendID <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iNpcFriendID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iNpcFriendID = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 150;
    /* entry version info */
    public static readonly uint VERSION_nDailyRecvHeartNum = 122;
    public static readonly uint VERSION_dwLastRecvHeartTime = 122;
    public static readonly uint VERSION_iNpcFriendID = 150;

    /* length of string or wstring */
}


/* 活动关卡信息 */
public class DBActionPassInfo : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chType; // 活动关卡类型
    public byte bFinishCount; // 该关卡当天完成次数
    public UInt32 dwLastFinshTime; // 最后完成时间
    public Int32 iFinishPassCount; // 完成该类关卡的数量
    public Int32[] FinishPassID; // 完成该类关卡的ID

    /* construct methods */
    public DBActionPassInfo()
    {
        FinishPassID = new Int32[5];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBActionPassInfo.CURRVERSION < cutVer)
        {
            cutVer = DBActionPassInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBActionPassInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chType */
        {
            ret = destBuf.writeInt8(this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bFinishCount */
        {
            ret = destBuf.writeUInt8(this.bFinishCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastFinshTime */
        {
            ret = destBuf.writeUInt32(this.dwLastFinshTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFinishPassCount */
        {
            ret = destBuf.writeInt32(this.iFinishPassCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.FinishPassID */
        {
            if (0 > this.iFinishPassCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (5 < this.iFinishPassCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (FinishPassID.Length < this.iFinishPassCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 FinishPassID_i = 0; FinishPassID_i < this.iFinishPassCount; FinishPassID_i++)
            {
                ret = destBuf.writeInt32(this.FinishPassID[FinishPassID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBActionPassInfo.CURRVERSION < cutVer)
        {
            cutVer = DBActionPassInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBActionPassInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chType */
        {
            ret = srcBuf.readInt8(ref this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bFinishCount */
        {
            ret = srcBuf.readUInt8(ref this.bFinishCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastFinshTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastFinshTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iFinishPassCount */
        {
            ret = srcBuf.readInt32(ref this.iFinishPassCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.FinishPassID */
        {
            if (0 > this.iFinishPassCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (5 < this.iFinishPassCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (FinishPassID.Length < this.iFinishPassCount)
            {
                FinishPassID = new Int32[this.iFinishPassCount];
            }

            for (Int32 FinishPassID_i = 0; FinishPassID_i < this.iFinishPassCount; FinishPassID_i++)
            {
                ret = srcBuf.readInt32(ref this.FinishPassID[FinishPassID_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 活动关卡信息 */
public class DBActionPass : tsf4g_csharp_interface
{
    /* public members */
    public byte bCount; // 活动关卡数量
    public DBActionPassInfo[] astActionPassList; // 活动关卡

    /* construct methods */
    public DBActionPass()
    {
        astActionPassList = new DBActionPassInfo[4];
        for (int astActionPassList_i = 0; astActionPassList_i < 4; astActionPassList_i++)
        {
            astActionPassList[astActionPassList_i] = new DBActionPassInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBActionPass.CURRVERSION < cutVer)
        {
            cutVer = DBActionPass.CURRVERSION;
        }

        /* check cutversion */
        if (DBActionPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bCount */
        {
            ret = destBuf.writeUInt8(this.bCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astActionPassList */
        {
            if (4 < this.bCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActionPassList.Length < this.bCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astActionPassList_i = 0; astActionPassList_i < this.bCount; astActionPassList_i++)
            {
                ret = this.astActionPassList[astActionPassList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBActionPass.CURRVERSION < cutVer)
        {
            cutVer = DBActionPass.CURRVERSION;
        }

        /* check cutversion */
        if (DBActionPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bCount */
        {
            ret = srcBuf.readUInt8(ref this.bCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astActionPassList */
        {
            if (4 < this.bCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActionPassList.Length < this.bCount)
            {
                astActionPassList = new DBActionPassInfo[this.bCount];
                for (Int32 astActionPassList_i = 0; astActionPassList_i < this.bCount; astActionPassList_i++)
                {
                    astActionPassList[astActionPassList_i] = new DBActionPassInfo();
                }
            }

            for (Int32 astActionPassList_i = 0; astActionPassList_i < this.bCount; astActionPassList_i++)
            {
                ret = this.astActionPassList[astActionPassList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 活动完成状态, 暂定每天初始化, 每次领取之前检查, 领取之后更新 */
public class ActivityStatus : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iActivityID; // 活动ID
    public UInt16 wIsOnlyOneTime; // 是否是一次性活动
    public sbyte chStatus; // 完成状态
    public UInt16 wAwardedNum; // 领取次数,针对抽奖或浇花等限制类所加
    public Int32[] ConditionFinishCount; // 对应条件完成数

    /* construct methods */
    public ActivityStatus()
    {
        ConditionFinishCount = new Int32[2];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityStatus.CURRVERSION < cutVer)
        {
            cutVer = ActivityStatus.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iActivityID */
        {
            ret = destBuf.writeInt32(this.iActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wIsOnlyOneTime */
        if (ActivityStatus.VERSION_wIsOnlyOneTime <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wIsOnlyOneTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chStatus */
        {
            ret = destBuf.writeInt8(this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAwardedNum */
        if (ActivityStatus.VERSION_wAwardedNum <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAwardedNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.ConditionFinishCount */
        if (ActivityStatus.VERSION_ConditionFinishCount <= cutVer)
        {
            for (Int32 ConditionFinishCount_i = 0; ConditionFinishCount_i < 2; ConditionFinishCount_i++)
            {
                ret = destBuf.writeInt32(this.ConditionFinishCount[ConditionFinishCount_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityStatus.CURRVERSION < cutVer)
        {
            cutVer = ActivityStatus.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iActivityID */
        {
            ret = srcBuf.readInt32(ref this.iActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wIsOnlyOneTime */
        if (ActivityStatus.VERSION_wIsOnlyOneTime <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wIsOnlyOneTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wIsOnlyOneTime = 0;
        }

        /* unpack member: this.chStatus */
        {
            ret = srcBuf.readInt8(ref this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wAwardedNum */
        if (ActivityStatus.VERSION_wAwardedNum <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAwardedNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAwardedNum = 0;
        }

        /* unpack member: this.ConditionFinishCount */
        if (ActivityStatus.VERSION_ConditionFinishCount <= cutVer)
        {
            for (Int32 ConditionFinishCount_i = 0; ConditionFinishCount_i < 2; ConditionFinishCount_i++)
            {
                ret = srcBuf.readInt32(ref this.ConditionFinishCount[ConditionFinishCount_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 108;
    /* entry version info */
    public static readonly uint VERSION_wIsOnlyOneTime = 99;
    public static readonly uint VERSION_wAwardedNum = 108;
    public static readonly uint VERSION_ConditionFinishCount = 79;

    /* length of string or wstring */
}


/* 活动关卡开放 */
public class ActivityPass : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iActivityPassID; // 当天开放的活动关卡ID
    public Int16 nActivityPassTiliLimit; // 活动关卡开放的每日次数上限, 没打开时为0
    public Int16 nActivityPassBeginCount; // 活动关卡已进入次数

    /* construct methods */
    public ActivityPass()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityPass.CURRVERSION < cutVer)
        {
            cutVer = ActivityPass.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iActivityPassID */
        if (ActivityPass.VERSION_iActivityPassID <= cutVer)
        {
            ret = destBuf.writeInt32(this.iActivityPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nActivityPassTiliLimit */
        if (ActivityPass.VERSION_nActivityPassTiliLimit <= cutVer)
        {
            ret = destBuf.writeInt16(this.nActivityPassTiliLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nActivityPassBeginCount */
        if (ActivityPass.VERSION_nActivityPassBeginCount <= cutVer)
        {
            ret = destBuf.writeInt16(this.nActivityPassBeginCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityPass.CURRVERSION < cutVer)
        {
            cutVer = ActivityPass.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityPass.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iActivityPassID */
        if (ActivityPass.VERSION_iActivityPassID <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iActivityPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iActivityPassID = 0;
        }

        /* unpack member: this.nActivityPassTiliLimit */
        if (ActivityPass.VERSION_nActivityPassTiliLimit <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nActivityPassTiliLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nActivityPassTiliLimit = 0;
        }

        /* unpack member: this.nActivityPassBeginCount */
        if (ActivityPass.VERSION_nActivityPassBeginCount <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nActivityPassBeginCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nActivityPassBeginCount = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 111;
    /* entry version info */
    public static readonly uint VERSION_iActivityPassID = 111;
    public static readonly uint VERSION_nActivityPassTiliLimit = 111;
    public static readonly uint VERSION_nActivityPassBeginCount = 111;

    /* length of string or wstring */
}


public class WateringStatus : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wWateringID; // 浇花ID
    public byte bStatus; // 当前状态, 参见TASK_STATUS_*
    public sbyte chWateringStatus; // 当前状态, 参见TASK_STATUS_*

    /* construct methods */
    public WateringStatus()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || WateringStatus.CURRVERSION < cutVer)
        {
            cutVer = WateringStatus.CURRVERSION;
        }

        /* check cutversion */
        if (WateringStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wWateringID */
        {
            ret = destBuf.writeUInt16(this.wWateringID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bStatus */
        {
            ret = destBuf.writeUInt8(this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chWateringStatus */
        if (WateringStatus.VERSION_chWateringStatus <= cutVer)
        {
            ret = destBuf.writeInt8(this.chWateringStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || WateringStatus.CURRVERSION < cutVer)
        {
            cutVer = WateringStatus.CURRVERSION;
        }

        /* check cutversion */
        if (WateringStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wWateringID */
        {
            ret = srcBuf.readUInt16(ref this.wWateringID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bStatus */
        {
            ret = srcBuf.readUInt8(ref this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chWateringStatus */
        if (WateringStatus.VERSION_chWateringStatus <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chWateringStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chWateringStatus = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 144;
    /* entry version info */
    public static readonly uint VERSION_chWateringStatus = 144;

    /* length of string or wstring */
}


public class PaidLotteryStatus : tsf4g_csharp_interface
{
    /* public members */
    public byte bIsLotteryed; // 本次活动是否抽过奖
    public Int16 nPaidLotteryCountThisDay; // 当天已抽奖次数
    public Int16 nGetChance; // 当天已获得抽奖次数

    /* construct methods */
    public PaidLotteryStatus()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PaidLotteryStatus.CURRVERSION < cutVer)
        {
            cutVer = PaidLotteryStatus.CURRVERSION;
        }

        /* check cutversion */
        if (PaidLotteryStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIsLotteryed */
        {
            ret = destBuf.writeUInt8(this.bIsLotteryed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nPaidLotteryCountThisDay */
        {
            ret = destBuf.writeInt16(this.nPaidLotteryCountThisDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nGetChance */
        if (PaidLotteryStatus.VERSION_nGetChance <= cutVer)
        {
            ret = destBuf.writeInt16(this.nGetChance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PaidLotteryStatus.CURRVERSION < cutVer)
        {
            cutVer = PaidLotteryStatus.CURRVERSION;
        }

        /* check cutversion */
        if (PaidLotteryStatus.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIsLotteryed */
        {
            ret = srcBuf.readUInt8(ref this.bIsLotteryed);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nPaidLotteryCountThisDay */
        {
            ret = srcBuf.readInt16(ref this.nPaidLotteryCountThisDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nGetChance */
        if (PaidLotteryStatus.VERSION_nGetChance <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nGetChance);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nGetChance = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 190;
    /* entry version info */
    public static readonly uint VERSION_nGetChance = 190;

    /* length of string or wstring */
}


public class RoleDBActivityExchgLimitItem : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iExchgActivityID; // 兑换活动活动ID
    public byte bExchgID; // 兑换活动兑换ID
    public byte bExchgCount; // 已经兑换次数

    /* construct methods */
    public RoleDBActivityExchgLimitItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBActivityExchgLimitItem.CURRVERSION < cutVer)
        {
            cutVer = RoleDBActivityExchgLimitItem.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBActivityExchgLimitItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iExchgActivityID */
        {
            ret = destBuf.writeInt32(this.iExchgActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bExchgID */
        {
            ret = destBuf.writeUInt8(this.bExchgID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bExchgCount */
        {
            ret = destBuf.writeUInt8(this.bExchgCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBActivityExchgLimitItem.CURRVERSION < cutVer)
        {
            cutVer = RoleDBActivityExchgLimitItem.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBActivityExchgLimitItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iExchgActivityID */
        {
            ret = srcBuf.readInt32(ref this.iExchgActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bExchgID */
        {
            ret = srcBuf.readUInt8(ref this.bExchgID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bExchgCount */
        {
            ret = srcBuf.readUInt8(ref this.bExchgCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class RoleDBActivityExchgLimit : tsf4g_csharp_interface
{
    /* public members */
    public byte bNum; // 个数
    public RoleDBActivityExchgLimitItem[] astExchgItem; // 限制数据

    /* construct methods */
    public RoleDBActivityExchgLimit()
    {
        astExchgItem = new RoleDBActivityExchgLimitItem[64];
        for (int astExchgItem_i = 0; astExchgItem_i < 64; astExchgItem_i++)
        {
            astExchgItem[astExchgItem_i] = new RoleDBActivityExchgLimitItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBActivityExchgLimit.CURRVERSION < cutVer)
        {
            cutVer = RoleDBActivityExchgLimit.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBActivityExchgLimit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bNum */
        {
            ret = destBuf.writeUInt8(this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astExchgItem */
        {
            if (64 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astExchgItem.Length < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astExchgItem_i = 0; astExchgItem_i < this.bNum; astExchgItem_i++)
            {
                ret = this.astExchgItem[astExchgItem_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBActivityExchgLimit.CURRVERSION < cutVer)
        {
            cutVer = RoleDBActivityExchgLimit.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBActivityExchgLimit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bNum */
        {
            ret = srcBuf.readUInt8(ref this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astExchgItem */
        {
            if (64 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astExchgItem.Length < this.bNum)
            {
                astExchgItem = new RoleDBActivityExchgLimitItem[this.bNum];
                for (Int32 astExchgItem_i = 0; astExchgItem_i < this.bNum; astExchgItem_i++)
                {
                    astExchgItem[astExchgItem_i] = new RoleDBActivityExchgLimitItem();
                }
            }

            for (Int32 astExchgItem_i = 0; astExchgItem_i < this.bNum; astExchgItem_i++)
            {
                ret = this.astExchgItem[astExchgItem_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 角色活动保存数据, 仅一天有效 */
public class RoleDBActivity : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nPVEPointsAddRatio; // PVE积分收益百分比0-100或更多
    public Int16 nActivityNum; // 活动数量
    public ActivityStatus[] astActivityStatus; // 活动状态
    public UInt32 dwUpdateTime; // 活动列表数据最后更新时间
    public Int16 nLotteryCount; // 当天累计抽奖次数
    public Int16 nLotteryRemainCount; // 当天抽奖剩余次数
    public Int16 nWateringCount; // 当天累计浇花次数
    public Int16 nWateringRemainCount; // 当天剩余浇花次数
    public Int16 nActivityPassNum; // 活动关卡数量
    public ActivityPass[] astActivityPass; // 活动关卡状态
    public UInt16[] PassHeroXPAddRatio; // 关卡英雄经验收益百分比0-100或更多
    public UInt16[] PassPetXPAddRatio; // 关卡宠物经验收益百分比0-100或更多
    public UInt16[] PassGoldAddRatio; // 关卡金币收益百分比0-100或更多
    public UInt16[] PassDropAddRatio; // 关卡掉落收益百分比0-100或更多
    public UInt16[] PassSummerXPAddRatio; // 关卡掉落收益百分比0-100或更多
    public UInt16 wAdventureHeroXPAddRatio; // 冒险岛英雄经验收益百分比0-100或更多
    public UInt16 wAdventureGoldAddRatio; // 冒险岛金币经验收益百分比0-100或更多
    public UInt16 wAdventureDropAddRatio; // 冒险岛掉落收益百分比0-100或更多
    public Int32 iLotteryGiftID; // 抽奖礼品ID
    public UInt16 wWateringNum; // 浇花等级数量
    public WateringStatus[] astWateringStatus;
    public PaidLotteryStatus stPaidLotteryStatus; // 有偿抽奖
    public Int16 nADLotteryCountThisDay; // 当天已广告抽奖次数
    public PaidLotteryStatus stLuckyCatLotteryStatus; // 有偿抽奖
    public RoleDBActivityExchgLimit stActivityExchgLimit; // 活动兑换次数限制
    public UInt32 dwForceChargeActTime; // 强弹充值活动面板的时间
    public Int32 iAwardCampLevel; // 阵营活动等级
    public Int32[] AwardCampStatus;
    public byte bWMAwardBits; // 许愿机奖励领取状态位标记
    public UInt16 wWMNextAwardLeftTime; // 许愿机下一次领奖剩余时间
    public UInt32 dwWMLastCheckTime; // 许愿机领奖剩余时间最后检测时间
    public Int32 iSmashEggLotteryCount; // 有偿抽奖个数
    public PaidLotteryStatus[] astSmashEggLotteryStatus; // 有偿抽奖

    /* construct methods */
    public RoleDBActivity()
    {
        astActivityStatus = new ActivityStatus[200];
        for (int astActivityStatus_i = 0; astActivityStatus_i < 200; astActivityStatus_i++)
        {
            astActivityStatus[astActivityStatus_i] = new ActivityStatus();
        }

        astActivityPass = new ActivityPass[10];
        for (int astActivityPass_i = 0; astActivityPass_i < 10; astActivityPass_i++)
        {
            astActivityPass[astActivityPass_i] = new ActivityPass();
        }

        PassHeroXPAddRatio = new UInt16[4];
        PassPetXPAddRatio = new UInt16[4];
        PassGoldAddRatio = new UInt16[4];
        PassDropAddRatio = new UInt16[4];
        PassSummerXPAddRatio = new UInt16[4];
        astWateringStatus = new WateringStatus[3];
        for (int astWateringStatus_i = 0; astWateringStatus_i < 3; astWateringStatus_i++)
        {
            astWateringStatus[astWateringStatus_i] = new WateringStatus();
        }

        stPaidLotteryStatus = new PaidLotteryStatus();
        stLuckyCatLotteryStatus = new PaidLotteryStatus();
        stActivityExchgLimit = new RoleDBActivityExchgLimit();
        AwardCampStatus = new Int32[3];
        astSmashEggLotteryStatus = new PaidLotteryStatus[2];
        for (int astSmashEggLotteryStatus_i = 0; astSmashEggLotteryStatus_i < 2; astSmashEggLotteryStatus_i++)
        {
            astSmashEggLotteryStatus[astSmashEggLotteryStatus_i] = new PaidLotteryStatus();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.nPVEPointsAddRatio = 0;

        this.nActivityNum = 0;

        for (Int32 astActivityStatus_i = 0; astActivityStatus_i < 200; astActivityStatus_i++)
        {
            ret = this.astActivityStatus[astActivityStatus_i].construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        this.dwUpdateTime = 0;

        this.nLotteryCount = 0;

        this.nLotteryRemainCount = 0;

        this.nWateringCount = 0;

        this.nWateringRemainCount = 0;

        this.nActivityPassNum = 0;

        for (Int32 astActivityPass_i = 0; astActivityPass_i < 10; astActivityPass_i++)
        {
            ret = this.astActivityPass[astActivityPass_i].construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }






        this.wAdventureHeroXPAddRatio = 0;

        this.wAdventureGoldAddRatio = 0;

        this.wAdventureDropAddRatio = 0;

        this.iLotteryGiftID = 0;

        this.wWateringNum = 0;

        for (Int32 astWateringStatus_i = 0; astWateringStatus_i < 3; astWateringStatus_i++)
        {
            ret = this.astWateringStatus[astWateringStatus_i].construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        ret = this.stPaidLotteryStatus.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.nADLotteryCountThisDay = 0;

        ret = this.stLuckyCatLotteryStatus.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stActivityExchgLimit.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.dwForceChargeActTime = 0;

        this.iAwardCampLevel = 3;


        this.bWMAwardBits = 0;

        this.wWMNextAwardLeftTime = 0;

        this.dwWMLastCheckTime = 0;

        this.iSmashEggLotteryCount = 2;

        for (Int32 astSmashEggLotteryStatus_i = 0; astSmashEggLotteryStatus_i < 2; astSmashEggLotteryStatus_i++)
        {
            ret = this.astSmashEggLotteryStatus[astSmashEggLotteryStatus_i].construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBActivity.CURRVERSION < cutVer)
        {
            cutVer = RoleDBActivity.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBActivity.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nPVEPointsAddRatio */
        {
            ret = destBuf.writeInt16(this.nPVEPointsAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nActivityNum */
        {
            ret = destBuf.writeInt16(this.nActivityNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astActivityStatus */
        {
            if (0 > this.nActivityNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nActivityNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityStatus.Length < this.nActivityNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astActivityStatus_i = 0; astActivityStatus_i < this.nActivityNum; astActivityStatus_i++)
            {
                ret = this.astActivityStatus[astActivityStatus_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.dwUpdateTime */
        if (RoleDBActivity.VERSION_dwUpdateTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLotteryCount */
        if (RoleDBActivity.VERSION_nLotteryCount <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLotteryCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLotteryRemainCount */
        if (RoleDBActivity.VERSION_nLotteryRemainCount <= cutVer)
        {
            ret = destBuf.writeInt16(this.nLotteryRemainCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nWateringCount */
        if (RoleDBActivity.VERSION_nWateringCount <= cutVer)
        {
            ret = destBuf.writeInt16(this.nWateringCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nWateringRemainCount */
        if (RoleDBActivity.VERSION_nWateringRemainCount <= cutVer)
        {
            ret = destBuf.writeInt16(this.nWateringRemainCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nActivityPassNum */
        {
            ret = destBuf.writeInt16(this.nActivityPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astActivityPass */
        {
            if (0 > this.nActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (10 < this.nActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityPass.Length < this.nActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astActivityPass_i = 0; astActivityPass_i < this.nActivityPassNum; astActivityPass_i++)
            {
                ret = this.astActivityPass[astActivityPass_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.PassHeroXPAddRatio */
        if (RoleDBActivity.VERSION_PassHeroXPAddRatio <= cutVer)
        {
            for (Int32 PassHeroXPAddRatio_i = 0; PassHeroXPAddRatio_i < 4; PassHeroXPAddRatio_i++)
            {
                ret = destBuf.writeUInt16(this.PassHeroXPAddRatio[PassHeroXPAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.PassPetXPAddRatio */
        if (RoleDBActivity.VERSION_PassPetXPAddRatio <= cutVer)
        {
            for (Int32 PassPetXPAddRatio_i = 0; PassPetXPAddRatio_i < 4; PassPetXPAddRatio_i++)
            {
                ret = destBuf.writeUInt16(this.PassPetXPAddRatio[PassPetXPAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.PassGoldAddRatio */
        if (RoleDBActivity.VERSION_PassGoldAddRatio <= cutVer)
        {
            for (Int32 PassGoldAddRatio_i = 0; PassGoldAddRatio_i < 4; PassGoldAddRatio_i++)
            {
                ret = destBuf.writeUInt16(this.PassGoldAddRatio[PassGoldAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.PassDropAddRatio */
        if (RoleDBActivity.VERSION_PassDropAddRatio <= cutVer)
        {
            for (Int32 PassDropAddRatio_i = 0; PassDropAddRatio_i < 4; PassDropAddRatio_i++)
            {
                ret = destBuf.writeUInt16(this.PassDropAddRatio[PassDropAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.PassSummerXPAddRatio */
        if (RoleDBActivity.VERSION_PassSummerXPAddRatio <= cutVer)
        {
            for (Int32 PassSummerXPAddRatio_i = 0; PassSummerXPAddRatio_i < 4; PassSummerXPAddRatio_i++)
            {
                ret = destBuf.writeUInt16(this.PassSummerXPAddRatio[PassSummerXPAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.wAdventureHeroXPAddRatio */
        if (RoleDBActivity.VERSION_wAdventureHeroXPAddRatio <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAdventureHeroXPAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAdventureGoldAddRatio */
        if (RoleDBActivity.VERSION_wAdventureGoldAddRatio <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAdventureGoldAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAdventureDropAddRatio */
        if (RoleDBActivity.VERSION_wAdventureDropAddRatio <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAdventureDropAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLotteryGiftID */
        if (RoleDBActivity.VERSION_iLotteryGiftID <= cutVer)
        {
            ret = destBuf.writeInt32(this.iLotteryGiftID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wWateringNum */
        if (RoleDBActivity.VERSION_wWateringNum <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wWateringNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astWateringStatus */
        if (RoleDBActivity.VERSION_astWateringStatus <= cutVer)
        {
            if (3 < this.wWateringNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astWateringStatus.Length < this.wWateringNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astWateringStatus_i = 0; astWateringStatus_i < this.wWateringNum; astWateringStatus_i++)
            {
                ret = this.astWateringStatus[astWateringStatus_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stPaidLotteryStatus */
        if (RoleDBActivity.VERSION_stPaidLotteryStatus <= cutVer)
        {
            ret = this.stPaidLotteryStatus.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nADLotteryCountThisDay */
        if (RoleDBActivity.VERSION_nADLotteryCountThisDay <= cutVer)
        {
            ret = destBuf.writeInt16(this.nADLotteryCountThisDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stLuckyCatLotteryStatus */
        if (RoleDBActivity.VERSION_stLuckyCatLotteryStatus <= cutVer)
        {
            ret = this.stLuckyCatLotteryStatus.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stActivityExchgLimit */
        if (RoleDBActivity.VERSION_stActivityExchgLimit <= cutVer)
        {
            ret = this.stActivityExchgLimit.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwForceChargeActTime */
        if (RoleDBActivity.VERSION_dwForceChargeActTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwForceChargeActTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAwardCampLevel */
        if (RoleDBActivity.VERSION_iAwardCampLevel <= cutVer)
        {
            ret = destBuf.writeInt32(this.iAwardCampLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.AwardCampStatus */
        if (RoleDBActivity.VERSION_AwardCampStatus <= cutVer)
        {
            if (0 > this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (AwardCampStatus.Length < this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 AwardCampStatus_i = 0; AwardCampStatus_i < this.iAwardCampLevel; AwardCampStatus_i++)
            {
                ret = destBuf.writeInt32(this.AwardCampStatus[AwardCampStatus_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.bWMAwardBits */
        if (RoleDBActivity.VERSION_bWMAwardBits <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bWMAwardBits);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wWMNextAwardLeftTime */
        if (RoleDBActivity.VERSION_wWMNextAwardLeftTime <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wWMNextAwardLeftTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwWMLastCheckTime */
        if (RoleDBActivity.VERSION_dwWMLastCheckTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwWMLastCheckTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iSmashEggLotteryCount */
        if (RoleDBActivity.VERSION_iSmashEggLotteryCount <= cutVer)
        {
            ret = destBuf.writeInt32(this.iSmashEggLotteryCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astSmashEggLotteryStatus */
        if (RoleDBActivity.VERSION_astSmashEggLotteryStatus <= cutVer)
        {
            if (0 > this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (2 < this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSmashEggLotteryStatus.Length < this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astSmashEggLotteryStatus_i = 0; astSmashEggLotteryStatus_i < this.iSmashEggLotteryCount; astSmashEggLotteryStatus_i++)
            {
                ret = this.astSmashEggLotteryStatus[astSmashEggLotteryStatus_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBActivity.CURRVERSION < cutVer)
        {
            cutVer = RoleDBActivity.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBActivity.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nPVEPointsAddRatio */
        {
            ret = srcBuf.readInt16(ref this.nPVEPointsAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nActivityNum */
        {
            ret = srcBuf.readInt16(ref this.nActivityNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astActivityStatus */
        {
            if (0 > this.nActivityNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.nActivityNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityStatus.Length < this.nActivityNum)
            {
                astActivityStatus = new ActivityStatus[this.nActivityNum];
                for (Int32 astActivityStatus_i = 0; astActivityStatus_i < this.nActivityNum; astActivityStatus_i++)
                {
                    astActivityStatus[astActivityStatus_i] = new ActivityStatus();
                }
            }

            for (Int32 astActivityStatus_i = 0; astActivityStatus_i < this.nActivityNum; astActivityStatus_i++)
            {
                ret = this.astActivityStatus[astActivityStatus_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.dwUpdateTime */
        if (RoleDBActivity.VERSION_dwUpdateTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwUpdateTime = 0;
        }

        /* unpack member: this.nLotteryCount */
        if (RoleDBActivity.VERSION_nLotteryCount <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLotteryCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLotteryCount = 0;
        }

        /* unpack member: this.nLotteryRemainCount */
        if (RoleDBActivity.VERSION_nLotteryRemainCount <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nLotteryRemainCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nLotteryRemainCount = 0;
        }

        /* unpack member: this.nWateringCount */
        if (RoleDBActivity.VERSION_nWateringCount <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nWateringCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nWateringCount = 0;
        }

        /* unpack member: this.nWateringRemainCount */
        if (RoleDBActivity.VERSION_nWateringRemainCount <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nWateringRemainCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nWateringRemainCount = 0;
        }

        /* unpack member: this.nActivityPassNum */
        {
            ret = srcBuf.readInt16(ref this.nActivityPassNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astActivityPass */
        {
            if (0 > this.nActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (10 < this.nActivityPassNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityPass.Length < this.nActivityPassNum)
            {
                astActivityPass = new ActivityPass[this.nActivityPassNum];
                for (Int32 astActivityPass_i = 0; astActivityPass_i < this.nActivityPassNum; astActivityPass_i++)
                {
                    astActivityPass[astActivityPass_i] = new ActivityPass();
                }
            }

            for (Int32 astActivityPass_i = 0; astActivityPass_i < this.nActivityPassNum; astActivityPass_i++)
            {
                ret = this.astActivityPass[astActivityPass_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.PassHeroXPAddRatio */
        if (RoleDBActivity.VERSION_PassHeroXPAddRatio <= cutVer)
        {
            for (Int32 PassHeroXPAddRatio_i = 0; PassHeroXPAddRatio_i < 4; PassHeroXPAddRatio_i++)
            {
                ret = srcBuf.readUInt16(ref this.PassHeroXPAddRatio[PassHeroXPAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.PassPetXPAddRatio */
        if (RoleDBActivity.VERSION_PassPetXPAddRatio <= cutVer)
        {
            for (Int32 PassPetXPAddRatio_i = 0; PassPetXPAddRatio_i < 4; PassPetXPAddRatio_i++)
            {
                ret = srcBuf.readUInt16(ref this.PassPetXPAddRatio[PassPetXPAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.PassGoldAddRatio */
        if (RoleDBActivity.VERSION_PassGoldAddRatio <= cutVer)
        {
            for (Int32 PassGoldAddRatio_i = 0; PassGoldAddRatio_i < 4; PassGoldAddRatio_i++)
            {
                ret = srcBuf.readUInt16(ref this.PassGoldAddRatio[PassGoldAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.PassDropAddRatio */
        if (RoleDBActivity.VERSION_PassDropAddRatio <= cutVer)
        {
            for (Int32 PassDropAddRatio_i = 0; PassDropAddRatio_i < 4; PassDropAddRatio_i++)
            {
                ret = srcBuf.readUInt16(ref this.PassDropAddRatio[PassDropAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.PassSummerXPAddRatio */
        if (RoleDBActivity.VERSION_PassSummerXPAddRatio <= cutVer)
        {
            for (Int32 PassSummerXPAddRatio_i = 0; PassSummerXPAddRatio_i < 4; PassSummerXPAddRatio_i++)
            {
                ret = srcBuf.readUInt16(ref this.PassSummerXPAddRatio[PassSummerXPAddRatio_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.wAdventureHeroXPAddRatio */
        if (RoleDBActivity.VERSION_wAdventureHeroXPAddRatio <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAdventureHeroXPAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAdventureHeroXPAddRatio = 0;
        }

        /* unpack member: this.wAdventureGoldAddRatio */
        if (RoleDBActivity.VERSION_wAdventureGoldAddRatio <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAdventureGoldAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAdventureGoldAddRatio = 0;
        }

        /* unpack member: this.wAdventureDropAddRatio */
        if (RoleDBActivity.VERSION_wAdventureDropAddRatio <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAdventureDropAddRatio);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAdventureDropAddRatio = 0;
        }

        /* unpack member: this.iLotteryGiftID */
        if (RoleDBActivity.VERSION_iLotteryGiftID <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iLotteryGiftID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iLotteryGiftID = 0;
        }

        /* unpack member: this.wWateringNum */
        if (RoleDBActivity.VERSION_wWateringNum <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wWateringNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wWateringNum = 0;
        }

        /* unpack member: this.astWateringStatus */
        if (RoleDBActivity.VERSION_astWateringStatus <= cutVer)
        {
            if (3 < this.wWateringNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astWateringStatus.Length < this.wWateringNum)
            {
                astWateringStatus = new WateringStatus[this.wWateringNum];
                for (Int32 astWateringStatus_i = 0; astWateringStatus_i < this.wWateringNum; astWateringStatus_i++)
                {
                    astWateringStatus[astWateringStatus_i] = new WateringStatus();
                }
            }

            for (Int32 astWateringStatus_i = 0; astWateringStatus_i < this.wWateringNum; astWateringStatus_i++)
            {
                ret = this.astWateringStatus[astWateringStatus_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (3 < this.wWateringNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astWateringStatus_i = 0; astWateringStatus_i < this.wWateringNum; astWateringStatus_i++)
            {
                ret = this.astWateringStatus[astWateringStatus_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* unpack member: this.stPaidLotteryStatus */
        if (RoleDBActivity.VERSION_stPaidLotteryStatus <= cutVer)
        {
            ret = this.stPaidLotteryStatus.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stPaidLotteryStatus.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.nADLotteryCountThisDay */
        if (RoleDBActivity.VERSION_nADLotteryCountThisDay <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nADLotteryCountThisDay);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nADLotteryCountThisDay = 0;
        }

        /* unpack member: this.stLuckyCatLotteryStatus */
        if (RoleDBActivity.VERSION_stLuckyCatLotteryStatus <= cutVer)
        {
            ret = this.stLuckyCatLotteryStatus.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stLuckyCatLotteryStatus.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stActivityExchgLimit */
        if (RoleDBActivity.VERSION_stActivityExchgLimit <= cutVer)
        {
            ret = this.stActivityExchgLimit.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stActivityExchgLimit.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.dwForceChargeActTime */
        if (RoleDBActivity.VERSION_dwForceChargeActTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwForceChargeActTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwForceChargeActTime = 0;
        }

        /* unpack member: this.iAwardCampLevel */
        if (RoleDBActivity.VERSION_iAwardCampLevel <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iAwardCampLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iAwardCampLevel = 3;
        }

        /* unpack member: this.AwardCampStatus */
        if (RoleDBActivity.VERSION_AwardCampStatus <= cutVer)
        {
            if (0 > this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (AwardCampStatus.Length < this.iAwardCampLevel)
            {
                AwardCampStatus = new Int32[this.iAwardCampLevel];
            }

            for (Int32 AwardCampStatus_i = 0; AwardCampStatus_i < this.iAwardCampLevel; AwardCampStatus_i++)
            {
                ret = srcBuf.readInt32(ref this.AwardCampStatus[AwardCampStatus_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (3 < this.iAwardCampLevel)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
        }

        /* unpack member: this.bWMAwardBits */
        if (RoleDBActivity.VERSION_bWMAwardBits <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bWMAwardBits);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bWMAwardBits = 0;
        }

        /* unpack member: this.wWMNextAwardLeftTime */
        if (RoleDBActivity.VERSION_wWMNextAwardLeftTime <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wWMNextAwardLeftTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wWMNextAwardLeftTime = 0;
        }

        /* unpack member: this.dwWMLastCheckTime */
        if (RoleDBActivity.VERSION_dwWMLastCheckTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwWMLastCheckTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwWMLastCheckTime = 0;
        }

        /* unpack member: this.iSmashEggLotteryCount */
        if (RoleDBActivity.VERSION_iSmashEggLotteryCount <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iSmashEggLotteryCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iSmashEggLotteryCount = 2;
        }

        /* unpack member: this.astSmashEggLotteryStatus */
        if (RoleDBActivity.VERSION_astSmashEggLotteryStatus <= cutVer)
        {
            if (0 > this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (2 < this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astSmashEggLotteryStatus.Length < this.iSmashEggLotteryCount)
            {
                astSmashEggLotteryStatus = new PaidLotteryStatus[this.iSmashEggLotteryCount];
                for (Int32 astSmashEggLotteryStatus_i = 0; astSmashEggLotteryStatus_i < this.iSmashEggLotteryCount; astSmashEggLotteryStatus_i++)
                {
                    astSmashEggLotteryStatus[astSmashEggLotteryStatus_i] = new PaidLotteryStatus();
                }
            }

            for (Int32 astSmashEggLotteryStatus_i = 0; astSmashEggLotteryStatus_i < this.iSmashEggLotteryCount; astSmashEggLotteryStatus_i++)
            {
                ret = this.astSmashEggLotteryStatus[astSmashEggLotteryStatus_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (0 > this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (2 < this.iSmashEggLotteryCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 astSmashEggLotteryStatus_i = 0; astSmashEggLotteryStatus_i < this.iSmashEggLotteryCount; astSmashEggLotteryStatus_i++)
            {
                ret = this.astSmashEggLotteryStatus[astSmashEggLotteryStatus_i].construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 206;
    /* entry version info */
    public static readonly uint VERSION_dwUpdateTime = 107;
    public static readonly uint VERSION_nLotteryCount = 108;
    public static readonly uint VERSION_nLotteryRemainCount = 109;
    public static readonly uint VERSION_nWateringCount = 109;
    public static readonly uint VERSION_nWateringRemainCount = 109;
    public static readonly uint VERSION_PassHeroXPAddRatio = 112;
    public static readonly uint VERSION_PassPetXPAddRatio = 112;
    public static readonly uint VERSION_PassGoldAddRatio = 112;
    public static readonly uint VERSION_PassDropAddRatio = 112;
    public static readonly uint VERSION_PassSummerXPAddRatio = 112;
    public static readonly uint VERSION_wAdventureHeroXPAddRatio = 112;
    public static readonly uint VERSION_wAdventureGoldAddRatio = 112;
    public static readonly uint VERSION_wAdventureDropAddRatio = 112;
    public static readonly uint VERSION_iLotteryGiftID = 114;
    public static readonly uint VERSION_wWateringNum = 123;
    public static readonly uint VERSION_astWateringStatus = 123;
    public static readonly uint VERSION_stPaidLotteryStatus = 160;
    public static readonly uint VERSION_nADLotteryCountThisDay = 163;
    public static readonly uint VERSION_stLuckyCatLotteryStatus = 174;
    public static readonly uint VERSION_stActivityExchgLimit = 174;
    public static readonly uint VERSION_dwForceChargeActTime = 175;
    public static readonly uint VERSION_iAwardCampLevel = 180;
    public static readonly uint VERSION_AwardCampStatus = 182;
    public static readonly uint VERSION_bWMAwardBits = 193;
    public static readonly uint VERSION_wWMNextAwardLeftTime = 193;
    public static readonly uint VERSION_dwWMLastCheckTime = 193;
    public static readonly uint VERSION_iSmashEggLotteryCount = 206;
    public static readonly uint VERSION_astSmashEggLotteryStatus = 206;

    /* length of string or wstring */
}


/* 帽子信息 */
public class DBHatInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bUnopenHatNum; // 最近解锁但没点开的帽子个数
    public Int32[] UnopenHatIDs; // 帽子ID数组

    /* construct methods */
    public DBHatInfo()
    {
        UnopenHatIDs = new Int32[3];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBHatInfo.CURRVERSION < cutVer)
        {
            cutVer = DBHatInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBHatInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bUnopenHatNum */
        {
            ret = destBuf.writeUInt8(this.bUnopenHatNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.UnopenHatIDs */
        {
            if (3 < this.bUnopenHatNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (UnopenHatIDs.Length < this.bUnopenHatNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 UnopenHatIDs_i = 0; UnopenHatIDs_i < this.bUnopenHatNum; UnopenHatIDs_i++)
            {
                ret = destBuf.writeInt32(this.UnopenHatIDs[UnopenHatIDs_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBHatInfo.CURRVERSION < cutVer)
        {
            cutVer = DBHatInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBHatInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bUnopenHatNum */
        {
            ret = srcBuf.readUInt8(ref this.bUnopenHatNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.UnopenHatIDs */
        {
            if (3 < this.bUnopenHatNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (UnopenHatIDs.Length < this.bUnopenHatNum)
            {
                UnopenHatIDs = new Int32[this.bUnopenHatNum];
            }

            for (Int32 UnopenHatIDs_i = 0; UnopenHatIDs_i < this.bUnopenHatNum; UnopenHatIDs_i++)
            {
                ret = srcBuf.readInt32(ref this.UnopenHatIDs[UnopenHatIDs_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBChatContentUnion
{
    /* public members */
    public byte[] szText; // 文本内容
    public Int32 iCustomization; // 定制消息

    /* public methods */
    public DBChatContentUnion()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }
        else if (1 == selector)
        {
            if (null == szText)
            {
                szText = new byte[128];
            }
            /* this.szText have no defaultvalue */
        }
        else if (2 == selector)
        {
            this.iCustomization = 0;
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || DBChatContentUnion.CURRVERSION < cutVer)
        {
            cutVer = DBChatContentUnion.CURRVERSION;
        }

        /* check cutversion */
        if (DBChatContentUnion.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }
        else if (1 == selector)
        {
            /* record sizeinfo position */
            Int32 sizePos4szText = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szText = destBuf.getUsedSize();

            Int32 realSize4szText = TdrTypeUtil.cstrlen(this.szText);

            if (realSize4szText >= 128)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szText, realSize4szText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szText */
            Int32 size4szText = destBuf.getUsedSize() - beginPos4szText;
            ret = destBuf.writeUInt32((UInt32)(size4szText), sizePos4szText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            ret = destBuf.writeInt32(this.iCustomization);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || DBChatContentUnion.CURRVERSION < cutVer)
        {
            cutVer = DBChatContentUnion.CURRVERSION;
        }

        /* check cutversion */
        if (DBChatContentUnion.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }
        else if (1 == selector)
        {
            if (null == szText)
            {
                szText = new byte[128];
            }

            /* get sizeinfo for this.szText */
            UInt32 size4szText = 0;
            ret = srcBuf.readUInt32(ref size4szText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szText > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szText > this.szText.GetLength(0))
            {
                if ((int)size4szText <= LENGTH_szText)
                {
                    this.szText = new byte[size4szText];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szText)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szText, (int)size4szText);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szText[(int)size4szText - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szText = TdrTypeUtil.cstrlen(this.szText) + 1;
            if (size4szText != realSize4szText)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else if (2 == selector)
        {
            ret = srcBuf.readInt32(ref this.iCustomization);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szText = 128;
}


/* 聊天内容 */
public class DBChatContentInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bType; // 聊天内容类型
    public DBChatContentUnion stContent; // 聊天内容

    /* construct methods */
    public DBChatContentInfo()
    {
        stContent = new DBChatContentUnion();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChatContentInfo.CURRVERSION < cutVer)
        {
            cutVer = DBChatContentInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBChatContentInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bType */
        {
            ret = destBuf.writeUInt8(this.bType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stContent */
        {
            Int64 selector4stContent = this.bType;
            ret = this.stContent.pack(selector4stContent, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChatContentInfo.CURRVERSION < cutVer)
        {
            cutVer = DBChatContentInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBChatContentInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bType */
        {
            ret = srcBuf.readUInt8(ref this.bType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stContent */
        {
            Int64 selector4stContent = this.bType;
            ret = this.stContent.unpack(selector4stContent, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBChatSingleDetail : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullGID; // 发送者GID
    public byte[] szNickname;
    public byte[] szPicture;
    public DBChatContentInfo stContent; // 聊天内容
    public UInt16 wLevel; // 发送者等级

    /* construct methods */
    public DBChatSingleDetail()
    {
        szNickname = new byte[64];
        szPicture = new byte[256];
        stContent = new DBChatContentInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChatSingleDetail.CURRVERSION < cutVer)
        {
            cutVer = DBChatSingleDetail.CURRVERSION;
        }

        /* check cutversion */
        if (DBChatSingleDetail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullGID */
        {
            ret = destBuf.writeUInt64(this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szNickname */
        {
            /* record sizeinfo position */
            Int32 sizePos4szNickname = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szNickname = destBuf.getUsedSize();

            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname);

            if (realSize4szNickname >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szNickname, realSize4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szNickname */
            Int32 size4szNickname = destBuf.getUsedSize() - beginPos4szNickname;
            ret = destBuf.writeUInt32((UInt32)(size4szNickname), sizePos4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPicture */
        {
            /* record sizeinfo position */
            Int32 sizePos4szPicture = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPicture = destBuf.getUsedSize();

            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture);

            if (realSize4szPicture >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPicture, realSize4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szPicture */
            Int32 size4szPicture = destBuf.getUsedSize() - beginPos4szPicture;
            ret = destBuf.writeUInt32((UInt32)(size4szPicture), sizePos4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.stContent */
        {
            ret = this.stContent.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wLevel */
        {
            ret = destBuf.writeUInt16(this.wLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBChatSingleDetail.CURRVERSION < cutVer)
        {
            cutVer = DBChatSingleDetail.CURRVERSION;
        }

        /* check cutversion */
        if (DBChatSingleDetail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullGID */
        {
            ret = srcBuf.readUInt64(ref this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szNickname */
        {
            /* get sizeinfo for this.szNickname */
            UInt32 size4szNickname = 0;
            ret = srcBuf.readUInt32(ref size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szNickname > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szNickname > this.szNickname.GetLength(0))
            {
                if ((int)size4szNickname <= LENGTH_szNickname)
                {
                    this.szNickname = new byte[size4szNickname];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szNickname, (int)size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szNickname[(int)size4szNickname - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname) + 1;
            if (size4szNickname != realSize4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szPicture */
        {
            /* get sizeinfo for this.szPicture */
            UInt32 size4szPicture = 0;
            ret = srcBuf.readUInt32(ref size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPicture > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPicture > this.szPicture.GetLength(0))
            {
                if ((int)size4szPicture <= LENGTH_szPicture)
                {
                    this.szPicture = new byte[size4szPicture];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPicture, (int)size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPicture[(int)size4szPicture - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture) + 1;
            if (size4szPicture != realSize4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.stContent */
        {
            ret = this.stContent.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wLevel */
        {
            ret = srcBuf.readUInt16(ref this.wLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szNickname = 64;
    public static readonly uint LENGTH_szPicture = 256;
}


/* 新手引导节点信息 */
public class RoleDBNoviceGuideNode : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iGroupID; // 新手引导节点组
    public Int32 iNodeID; // 新手引导节点

    /* construct methods */
    public RoleDBNoviceGuideNode()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBNoviceGuideNode.CURRVERSION < cutVer)
        {
            cutVer = RoleDBNoviceGuideNode.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBNoviceGuideNode.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iGroupID */
        {
            ret = destBuf.writeInt32(this.iGroupID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iNodeID */
        {
            ret = destBuf.writeInt32(this.iNodeID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBNoviceGuideNode.CURRVERSION < cutVer)
        {
            cutVer = RoleDBNoviceGuideNode.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBNoviceGuideNode.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iGroupID */
        {
            ret = srcBuf.readInt32(ref this.iGroupID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iNodeID */
        {
            ret = srcBuf.readInt32(ref this.iNodeID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 新手引导 */
public class RoleDBNoviceGuide : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iNodeNum; // 新手引导节点数量
    public RoleDBNoviceGuideNode[] astNodeData; // 新手引导节点

    /* construct methods */
    public RoleDBNoviceGuide()
    {
        astNodeData = new RoleDBNoviceGuideNode[60];
        for (int astNodeData_i = 0; astNodeData_i < 60; astNodeData_i++)
        {
            astNodeData[astNodeData_i] = new RoleDBNoviceGuideNode();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBNoviceGuide.CURRVERSION < cutVer)
        {
            cutVer = RoleDBNoviceGuide.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBNoviceGuide.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iNodeNum */
        {
            ret = destBuf.writeInt32(this.iNodeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astNodeData */
        {
            if (0 > this.iNodeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (60 < this.iNodeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astNodeData.Length < this.iNodeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astNodeData_i = 0; astNodeData_i < this.iNodeNum; astNodeData_i++)
            {
                ret = this.astNodeData[astNodeData_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBNoviceGuide.CURRVERSION < cutVer)
        {
            cutVer = RoleDBNoviceGuide.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBNoviceGuide.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iNodeNum */
        {
            ret = srcBuf.readInt32(ref this.iNodeNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astNodeData */
        {
            if (0 > this.iNodeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (60 < this.iNodeNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astNodeData.Length < this.iNodeNum)
            {
                astNodeData = new RoleDBNoviceGuideNode[this.iNodeNum];
                for (Int32 astNodeData_i = 0; astNodeData_i < this.iNodeNum; astNodeData_i++)
                {
                    astNodeData[astNodeData_i] = new RoleDBNoviceGuideNode();
                }
            }

            for (Int32 astNodeData_i = 0; astNodeData_i < this.iNodeNum; astNodeData_i++)
            {
                ret = this.astNodeData[astNodeData_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 存储完成的第一次事件 */
public class RoleDBFristEvent : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iNum; // 数量
    public sbyte[] szFristEvents; // 数据

    /* construct methods */
    public RoleDBFristEvent()
    {
        szFristEvents = new sbyte[5];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBFristEvent.CURRVERSION < cutVer)
        {
            cutVer = RoleDBFristEvent.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBFristEvent.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iNum */
        {
            ret = destBuf.writeInt32(this.iNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szFristEvents */
        {
            if (0 > this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (5 < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szFristEvents.Length < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 szFristEvents_i = 0; szFristEvents_i < this.iNum; szFristEvents_i++)
            {
                ret = destBuf.writeInt8(this.szFristEvents[szFristEvents_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBFristEvent.CURRVERSION < cutVer)
        {
            cutVer = RoleDBFristEvent.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBFristEvent.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iNum */
        {
            ret = srcBuf.readInt32(ref this.iNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szFristEvents */
        {
            if (0 > this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (5 < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szFristEvents.Length < this.iNum)
            {
                szFristEvents = new sbyte[this.iNum];
            }

            for (Int32 szFristEvents_i = 0; szFristEvents_i < this.iNum; szFristEvents_i++)
            {
                ret = srcBuf.readInt8(ref this.szFristEvents[szFristEvents_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 排名名次次数 */
public class RankNumberData : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iRankType; // 排名类型
    public byte bNum; // 数量
    public UInt16[] RankCounts; // 名次数据

    /* construct methods */
    public RankNumberData()
    {
        RankCounts = new UInt16[3];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RankNumberData.CURRVERSION < cutVer)
        {
            cutVer = RankNumberData.CURRVERSION;
        }

        /* check cutversion */
        if (RankNumberData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iRankType */
        {
            ret = destBuf.writeInt32(this.iRankType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bNum */
        {
            ret = destBuf.writeUInt8(this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.RankCounts */
        {
            if (3 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (RankCounts.Length < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 RankCounts_i = 0; RankCounts_i < this.bNum; RankCounts_i++)
            {
                ret = destBuf.writeUInt16(this.RankCounts[RankCounts_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RankNumberData.CURRVERSION < cutVer)
        {
            cutVer = RankNumberData.CURRVERSION;
        }

        /* check cutversion */
        if (RankNumberData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iRankType */
        {
            ret = srcBuf.readInt32(ref this.iRankType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bNum */
        {
            ret = srcBuf.readUInt8(ref this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.RankCounts */
        {
            if (3 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (RankCounts.Length < this.bNum)
            {
                RankCounts = new UInt16[this.bNum];
            }

            for (Int32 RankCounts_i = 0; RankCounts_i < this.bNum; RankCounts_i++)
            {
                ret = srcBuf.readUInt16(ref this.RankCounts[RankCounts_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 排名名次次数 */
public class RankData : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNum; // 数量
    public RankNumberData stRankNumbers; // 名次数据

    /* construct methods */
    public RankData()
    {
        stRankNumbers = new RankNumberData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RankData.CURRVERSION < cutVer)
        {
            cutVer = RankData.CURRVERSION;
        }

        /* check cutversion */
        if (RankData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stRankNumbers */
        {
            if (1 == this.wNum)
            {
                ret = this.stRankNumbers.pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RankData.CURRVERSION < cutVer)
        {
            cutVer = RankData.CURRVERSION;
        }

        /* check cutversion */
        if (RankData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stRankNumbers */
        {
            if (1 == this.wNum)
            {
                ret = this.stRankNumbers.unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class HatInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iHatResID;

    /* construct methods */
    public HatInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HatInfo.CURRVERSION < cutVer)
        {
            cutVer = HatInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HatInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iHatResID */
        {
            ret = destBuf.writeInt32(this.iHatResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HatInfo.CURRVERSION < cutVer)
        {
            cutVer = HatInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HatInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iHatResID */
        {
            ret = srcBuf.readInt32(ref this.iHatResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class UsedHatData : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNum; // 已使用过的帽子个数
    public HatInfo[] astHatList; // 使用过的帽子列表

    /* construct methods */
    public UsedHatData()
    {
        astHatList = new HatInfo[100];
        for (int astHatList_i = 0; astHatList_i < 100; astHatList_i++)
        {
            astHatList[astHatList_i] = new HatInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || UsedHatData.CURRVERSION < cutVer)
        {
            cutVer = UsedHatData.CURRVERSION;
        }

        /* check cutversion */
        if (UsedHatData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astHatList */
        {
            if (100 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHatList.Length < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astHatList_i = 0; astHatList_i < this.wNum; astHatList_i++)
            {
                ret = this.astHatList[astHatList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || UsedHatData.CURRVERSION < cutVer)
        {
            cutVer = UsedHatData.CURRVERSION;
        }

        /* check cutversion */
        if (UsedHatData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astHatList */
        {
            if (100 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHatList.Length < this.wNum)
            {
                astHatList = new HatInfo[this.wNum];
                for (Int32 astHatList_i = 0; astHatList_i < this.wNum; astHatList_i++)
                {
                    astHatList[astHatList_i] = new HatInfo();
                }
            }

            for (Int32 astHatList_i = 0; astHatList_i < this.wNum; astHatList_i++)
            {
                ret = this.astHatList[astHatList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 违规数据 */
public class ViolationsData : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iCount; // 违规次数
    public UInt32 dwLastTime; // 最后违规时间

    /* construct methods */
    public ViolationsData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ViolationsData.CURRVERSION < cutVer)
        {
            cutVer = ViolationsData.CURRVERSION;
        }

        /* check cutversion */
        if (ViolationsData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iCount */
        {
            ret = destBuf.writeInt32(this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastTime */
        {
            ret = destBuf.writeUInt32(this.dwLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ViolationsData.CURRVERSION < cutVer)
        {
            cutVer = ViolationsData.CURRVERSION;
        }

        /* check cutversion */
        if (ViolationsData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iCount */
        {
            ret = srcBuf.readInt32(ref this.iCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBMysteriouShopGoods : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iID; // Goods ID
    public UInt16 wNum; // 购买次数

    /* construct methods */
    public DBMysteriouShopGoods()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBMysteriouShopGoods.CURRVERSION < cutVer)
        {
            cutVer = DBMysteriouShopGoods.CURRVERSION;
        }

        /* check cutversion */
        if (DBMysteriouShopGoods.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBMysteriouShopGoods.CURRVERSION < cutVer)
        {
            cutVer = DBMysteriouShopGoods.CURRVERSION;
        }

        /* check cutversion */
        if (DBMysteriouShopGoods.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 神秘商店限购物品的购买次数 */
public class MysteriousShopGoodsLimit : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iBatchID; // batchID
    public Int32 iGoodsLimitNum;
    public DBMysteriouShopGoods[] astShopGoods;

    /* construct methods */
    public MysteriousShopGoodsLimit()
    {
        astShopGoods = new DBMysteriouShopGoods[6];
        for (int astShopGoods_i = 0; astShopGoods_i < 6; astShopGoods_i++)
        {
            astShopGoods[astShopGoods_i] = new DBMysteriouShopGoods();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MysteriousShopGoodsLimit.CURRVERSION < cutVer)
        {
            cutVer = MysteriousShopGoodsLimit.CURRVERSION;
        }

        /* check cutversion */
        if (MysteriousShopGoodsLimit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iBatchID */
        {
            ret = destBuf.writeInt32(this.iBatchID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iGoodsLimitNum */
        {
            ret = destBuf.writeInt32(this.iGoodsLimitNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astShopGoods */
        {
            if (0 > this.iGoodsLimitNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (6 < this.iGoodsLimitNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astShopGoods.Length < this.iGoodsLimitNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astShopGoods_i = 0; astShopGoods_i < this.iGoodsLimitNum; astShopGoods_i++)
            {
                ret = this.astShopGoods[astShopGoods_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MysteriousShopGoodsLimit.CURRVERSION < cutVer)
        {
            cutVer = MysteriousShopGoodsLimit.CURRVERSION;
        }

        /* check cutversion */
        if (MysteriousShopGoodsLimit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iBatchID */
        {
            ret = srcBuf.readInt32(ref this.iBatchID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iGoodsLimitNum */
        {
            ret = srcBuf.readInt32(ref this.iGoodsLimitNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astShopGoods */
        {
            if (0 > this.iGoodsLimitNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (6 < this.iGoodsLimitNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astShopGoods.Length < this.iGoodsLimitNum)
            {
                astShopGoods = new DBMysteriouShopGoods[this.iGoodsLimitNum];
                for (Int32 astShopGoods_i = 0; astShopGoods_i < this.iGoodsLimitNum; astShopGoods_i++)
                {
                    astShopGoods[astShopGoods_i] = new DBMysteriouShopGoods();
                }
            }

            for (Int32 astShopGoods_i = 0; astShopGoods_i < this.iGoodsLimitNum; astShopGoods_i++)
            {
                ret = this.astShopGoods[astShopGoods_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* misc info */
public class RoleMiscInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bDoublePveCount; // 双人pve次数
    public UInt32 dwDoublePveLastTime; // 双人pve 最后时间
    public MysteriousShopGoodsLimit stMysteriousShopGoodsLimit; // 神秘商店限购物品

    /* construct methods */
    public RoleMiscInfo()
    {
        stMysteriousShopGoodsLimit = new MysteriousShopGoodsLimit();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleMiscInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleMiscInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleMiscInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bDoublePveCount */
        {
            ret = destBuf.writeUInt8(this.bDoublePveCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwDoublePveLastTime */
        {
            ret = destBuf.writeUInt32(this.dwDoublePveLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stMysteriousShopGoodsLimit */
        if (RoleMiscInfo.VERSION_stMysteriousShopGoodsLimit <= cutVer)
        {
            ret = this.stMysteriousShopGoodsLimit.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleMiscInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleMiscInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleMiscInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bDoublePveCount */
        {
            ret = srcBuf.readUInt8(ref this.bDoublePveCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwDoublePveLastTime */
        {
            ret = srcBuf.readUInt32(ref this.dwDoublePveLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stMysteriousShopGoodsLimit */
        if (RoleMiscInfo.VERSION_stMysteriousShopGoodsLimit <= cutVer)
        {
            ret = this.stMysteriousShopGoodsLimit.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stMysteriousShopGoodsLimit.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 132;
    /* entry version info */
    public static readonly uint VERSION_stMysteriousShopGoodsLimit = 132;

    /* length of string or wstring */
}


public class HeroServingInfo : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iActivityID; // 投放的活动ID
    public byte bStatus; // 投放进行状态
    public byte bIsAwarded; // 是否领取过超能英雄或装备
    public Int32 iExchangeValue; // 目前拥有的兑换值
    public UInt32 dwLastChestOpenTime; // 最后打开宝箱的时间
    public Int32 iChestOpenCountToday; // 当日打开宝箱次数
    public UInt32 dwLastBossPassChallegeTime; // 最后挑战Boss时间
    public Int32 iBossPassChallegeCountToday; // 当日挑战Boss次数
    public UInt32 dwLastSkillPassChallengeTime; // 最后玩小游戏的时间
    public Int32 iSkillPassChallengeCountToday; // 当日小游戏玩过次数
    public UInt32 dwLastTrialPassChallengeTime; // 最后试炼时间
    public Int32 iTrialPassChallengeCountToday; // 当日试炼次数
    public Int32 iFinishedSkillPassID; // 已完成的小游戏关卡ID,进度
    public Int32 iFinishedTrialPassID; // 已完成的试炼关卡ID, 进度

    /* construct methods */
    public HeroServingInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroServingInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroServingInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroServingInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iActivityID */
        {
            ret = destBuf.writeInt32(this.iActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bStatus */
        {
            ret = destBuf.writeUInt8(this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bIsAwarded */
        if (HeroServingInfo.VERSION_bIsAwarded <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bIsAwarded);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iExchangeValue */
        {
            ret = destBuf.writeInt32(this.iExchangeValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastChestOpenTime */
        {
            ret = destBuf.writeUInt32(this.dwLastChestOpenTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iChestOpenCountToday */
        {
            ret = destBuf.writeInt32(this.iChestOpenCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastBossPassChallegeTime */
        {
            ret = destBuf.writeUInt32(this.dwLastBossPassChallegeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iBossPassChallegeCountToday */
        {
            ret = destBuf.writeInt32(this.iBossPassChallegeCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastSkillPassChallengeTime */
        {
            ret = destBuf.writeUInt32(this.dwLastSkillPassChallengeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iSkillPassChallengeCountToday */
        {
            ret = destBuf.writeInt32(this.iSkillPassChallengeCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastTrialPassChallengeTime */
        {
            ret = destBuf.writeUInt32(this.dwLastTrialPassChallengeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iTrialPassChallengeCountToday */
        {
            ret = destBuf.writeInt32(this.iTrialPassChallengeCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFinishedSkillPassID */
        {
            ret = destBuf.writeInt32(this.iFinishedSkillPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFinishedTrialPassID */
        {
            ret = destBuf.writeInt32(this.iFinishedTrialPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || HeroServingInfo.CURRVERSION < cutVer)
        {
            cutVer = HeroServingInfo.CURRVERSION;
        }

        /* check cutversion */
        if (HeroServingInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iActivityID */
        {
            ret = srcBuf.readInt32(ref this.iActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bStatus */
        {
            ret = srcBuf.readUInt8(ref this.bStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bIsAwarded */
        if (HeroServingInfo.VERSION_bIsAwarded <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bIsAwarded);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bIsAwarded = 0;
        }

        /* unpack member: this.iExchangeValue */
        {
            ret = srcBuf.readInt32(ref this.iExchangeValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastChestOpenTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastChestOpenTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iChestOpenCountToday */
        {
            ret = srcBuf.readInt32(ref this.iChestOpenCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastBossPassChallegeTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastBossPassChallegeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iBossPassChallegeCountToday */
        {
            ret = srcBuf.readInt32(ref this.iBossPassChallegeCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastSkillPassChallengeTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastSkillPassChallengeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iSkillPassChallengeCountToday */
        {
            ret = srcBuf.readInt32(ref this.iSkillPassChallengeCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwLastTrialPassChallengeTime */
        {
            ret = srcBuf.readUInt32(ref this.dwLastTrialPassChallengeTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iTrialPassChallengeCountToday */
        {
            ret = srcBuf.readInt32(ref this.iTrialPassChallengeCountToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iFinishedSkillPassID */
        {
            ret = srcBuf.readInt32(ref this.iFinishedSkillPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iFinishedTrialPassID */
        {
            ret = srcBuf.readInt32(ref this.iFinishedTrialPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 141;
    /* entry version info */
    public static readonly uint VERSION_bIsAwarded = 141;

    /* length of string or wstring */
}


public class RoleDBHeroServingInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNum; // 正在投放的英雄数量
    public HeroServingInfo[] astHeroServingInfo;

    /* construct methods */
    public RoleDBHeroServingInfo()
    {
        astHeroServingInfo = new HeroServingInfo[50];
        for (int astHeroServingInfo_i = 0; astHeroServingInfo_i < 50; astHeroServingInfo_i++)
        {
            astHeroServingInfo[astHeroServingInfo_i] = new HeroServingInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBHeroServingInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleDBHeroServingInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBHeroServingInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astHeroServingInfo */
        {
            if (50 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeroServingInfo.Length < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astHeroServingInfo_i = 0; astHeroServingInfo_i < this.wNum; astHeroServingInfo_i++)
            {
                ret = this.astHeroServingInfo[astHeroServingInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBHeroServingInfo.CURRVERSION < cutVer)
        {
            cutVer = RoleDBHeroServingInfo.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBHeroServingInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astHeroServingInfo */
        {
            if (50 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astHeroServingInfo.Length < this.wNum)
            {
                astHeroServingInfo = new HeroServingInfo[this.wNum];
                for (Int32 astHeroServingInfo_i = 0; astHeroServingInfo_i < this.wNum; astHeroServingInfo_i++)
                {
                    astHeroServingInfo[astHeroServingInfo_i] = new HeroServingInfo();
                }
            }

            for (Int32 astHeroServingInfo_i = 0; astHeroServingInfo_i < this.wNum; astHeroServingInfo_i++)
            {
                ret = this.astHeroServingInfo[astHeroServingInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 141;
    /* entry version info */

    /* length of string or wstring */
}


public class DBPvpInfo : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chNum; // 今天pk过的玩家Num
    public UInt64[] GIDList; // 今天自动匹配pk过的玩家GID
    public sbyte chCur; // 数组满了替换的index
    public Int16 nFightingAdd; // 战力的加成
    public sbyte chWinToday; // 今天pk赢的次数
    public sbyte chIfGetReward; // 今天是否领过奖
    public Int32 iPkLastTime; // pk的最后时间
    public DBPVP33Info stPvp33Info; // 3v3的数据

    /* construct methods */
    public DBPvpInfo()
    {
        GIDList = new UInt64[10];
        stPvp33Info = new DBPVP33Info();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPvpInfo.CURRVERSION < cutVer)
        {
            cutVer = DBPvpInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBPvpInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chNum */
        {
            ret = destBuf.writeInt8(this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.GIDList */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (10 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (GIDList.Length < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 GIDList_i = 0; GIDList_i < this.chNum; GIDList_i++)
            {
                ret = destBuf.writeUInt64(this.GIDList[GIDList_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.chCur */
        {
            ret = destBuf.writeInt8(this.chCur);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nFightingAdd */
        {
            ret = destBuf.writeInt16(this.nFightingAdd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chWinToday */
        {
            ret = destBuf.writeInt8(this.chWinToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chIfGetReward */
        {
            ret = destBuf.writeInt8(this.chIfGetReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iPkLastTime */
        {
            ret = destBuf.writeInt32(this.iPkLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPvp33Info */
        if (DBPvpInfo.VERSION_stPvp33Info <= cutVer)
        {
            ret = this.stPvp33Info.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPvpInfo.CURRVERSION < cutVer)
        {
            cutVer = DBPvpInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBPvpInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chNum */
        {
            ret = srcBuf.readInt8(ref this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.GIDList */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (10 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (GIDList.Length < this.chNum)
            {
                GIDList = new UInt64[this.chNum];
            }

            for (Int32 GIDList_i = 0; GIDList_i < this.chNum; GIDList_i++)
            {
                ret = srcBuf.readUInt64(ref this.GIDList[GIDList_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.chCur */
        {
            ret = srcBuf.readInt8(ref this.chCur);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nFightingAdd */
        {
            ret = srcBuf.readInt16(ref this.nFightingAdd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chWinToday */
        {
            ret = srcBuf.readInt8(ref this.chWinToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chIfGetReward */
        {
            ret = srcBuf.readInt8(ref this.chIfGetReward);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iPkLastTime */
        {
            ret = srcBuf.readInt32(ref this.iPkLastTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stPvp33Info */
        if (DBPvpInfo.VERSION_stPvp33Info <= cutVer)
        {
            ret = this.stPvp33Info.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stPvp33Info.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 220;
    /* entry version info */
    public static readonly uint VERSION_stPvp33Info = 193;

    /* length of string or wstring */
}


public class RoleDBOthers : tsf4g_csharp_interface
{
    /* public members */
    public DBDailyCounter stDBDailyCounter; // dbcounter
    public RoleDBPetCapture stDBPetCapture; // 捕捉棒数据
    public RoleDBPet stDBPet; // 宠物数据
    public RoleDBFormula stDBFormula; // 物品合成已使用配方表
    public DBTask stDBTask; // 任务表
    public DBLastToyInfo stLastToyInfo; // 最近使用的玩具信息
    public DBNameCard stDBNameCard; // 名字牌ID列表
    public DBBadgeWall stDBBadgeWall; // 徽章属性列表
    public DBPVEInfo stDBPVEInfo; // PVE保存信息
    public DBWeapon stDBWeapon; // 武器列表
    public RoleDBNoviceGuide stNoviceGuideNode; // 新手引导节点
    public DBSignInfo stDBSignInfo; // 签到
    public DBLotteryInfo stDBLotteryInfo; // 爱心抽奖信息
    public RankRewardStat stRankRewardStat; // 排行榜发奖状态
    public DBActionPass stActionPass; // 活动关卡
    public RoleDBActivity stRoleDBActivity; // 角色活动保存数据
    public sbyte[] szLevelAward; // 是否领取升级礼包
    public BanEndInfo stDBBan; // 禁止时间数据
    public RoleDBFristEvent stFristEvent; // 存储完成的第一次事件
    public RankData stRankData; // 排名名次次数
    public DBHatInfo stHatInfo; // 帽子解锁数据
    public UsedHatData stUsedHatList; // 帽子装备数据
    public ViolationsData stViolationsData; // 违规数据
    public DBFriendInfo stFriendInfo; // 好友信息
    public RoleMiscInfo stMiscInfo; // 杂项
    public RoleDBHeroServingInfo stRoleDBHeroServingInfo; // 英雄投放活动
    public Int32 iLoginPrivilege; // 登入渠道
    public byte bFirstChargeAwardFlag; // 首充领奖标志，见DB_FIRST_CHARGE_AWARD_FLAG_TYPE
    public DBPvpInfo stPvpInfo; // 自由匹配的pk信息

    /* construct methods */
    public RoleDBOthers()
    {
        stDBDailyCounter = new DBDailyCounter();
        stDBPetCapture = new RoleDBPetCapture();
        stDBPet = new RoleDBPet();
        stDBFormula = new RoleDBFormula();
        stDBTask = new DBTask();
        stLastToyInfo = new DBLastToyInfo();
        stDBNameCard = new DBNameCard();
        stDBBadgeWall = new DBBadgeWall();
        stDBPVEInfo = new DBPVEInfo();
        stDBWeapon = new DBWeapon();
        stNoviceGuideNode = new RoleDBNoviceGuide();
        stDBSignInfo = new DBSignInfo();
        stDBLotteryInfo = new DBLotteryInfo();
        stRankRewardStat = new RankRewardStat();
        stActionPass = new DBActionPass();
        stRoleDBActivity = new RoleDBActivity();
        szLevelAward = new sbyte[20];
        stDBBan = new BanEndInfo();
        stFristEvent = new RoleDBFristEvent();
        stRankData = new RankData();
        stHatInfo = new DBHatInfo();
        stUsedHatList = new UsedHatData();
        stViolationsData = new ViolationsData();
        stFriendInfo = new DBFriendInfo();
        stMiscInfo = new RoleMiscInfo();
        stRoleDBHeroServingInfo = new RoleDBHeroServingInfo();
        stPvpInfo = new DBPvpInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        ret = this.stDBDailyCounter.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBPetCapture.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBPet.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBFormula.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBTask.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stLastToyInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBNameCard.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBBadgeWall.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBPVEInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBWeapon.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stNoviceGuideNode.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBSignInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stDBLotteryInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stRankRewardStat.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stActionPass.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stRoleDBActivity.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }


        ret = this.stDBBan.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stFristEvent.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stRankData.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stHatInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stUsedHatList.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stViolationsData.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stFriendInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stMiscInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stRoleDBHeroServingInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.iLoginPrivilege = 0;

        this.bFirstChargeAwardFlag = 0;

        ret = this.stPvpInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBOthers.CURRVERSION < cutVer)
        {
            cutVer = RoleDBOthers.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBOthers.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.stDBDailyCounter */
        {
            ret = this.stDBDailyCounter.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBPetCapture */
        if (RoleDBOthers.VERSION_stDBPetCapture <= cutVer)
        {
            ret = this.stDBPetCapture.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBPet */
        if (RoleDBOthers.VERSION_stDBPet <= cutVer)
        {
            ret = this.stDBPet.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBFormula */
        if (RoleDBOthers.VERSION_stDBFormula <= cutVer)
        {
            ret = this.stDBFormula.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBTask */
        if (RoleDBOthers.VERSION_stDBTask <= cutVer)
        {
            ret = this.stDBTask.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stLastToyInfo */
        if (RoleDBOthers.VERSION_stLastToyInfo <= cutVer)
        {
            ret = this.stLastToyInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBNameCard */
        if (RoleDBOthers.VERSION_stDBNameCard <= cutVer)
        {
            ret = this.stDBNameCard.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBBadgeWall */
        if (RoleDBOthers.VERSION_stDBBadgeWall <= cutVer)
        {
            ret = this.stDBBadgeWall.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBPVEInfo */
        if (RoleDBOthers.VERSION_stDBPVEInfo <= cutVer)
        {
            ret = this.stDBPVEInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBWeapon */
        if (RoleDBOthers.VERSION_stDBWeapon <= cutVer)
        {
            ret = this.stDBWeapon.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stNoviceGuideNode */
        if (RoleDBOthers.VERSION_stNoviceGuideNode <= cutVer)
        {
            ret = this.stNoviceGuideNode.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBSignInfo */
        if (RoleDBOthers.VERSION_stDBSignInfo <= cutVer)
        {
            ret = this.stDBSignInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBLotteryInfo */
        if (RoleDBOthers.VERSION_stDBLotteryInfo <= cutVer)
        {
            ret = this.stDBLotteryInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stRankRewardStat */
        if (RoleDBOthers.VERSION_stRankRewardStat <= cutVer)
        {
            ret = this.stRankRewardStat.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stActionPass */
        if (RoleDBOthers.VERSION_stActionPass <= cutVer)
        {
            ret = this.stActionPass.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stRoleDBActivity */
        if (RoleDBOthers.VERSION_stRoleDBActivity <= cutVer)
        {
            ret = this.stRoleDBActivity.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szLevelAward */
        if (RoleDBOthers.VERSION_szLevelAward <= cutVer)
        {
            for (Int32 szLevelAward_i = 0; szLevelAward_i < 20; szLevelAward_i++)
            {
                ret = destBuf.writeInt8(this.szLevelAward[szLevelAward_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.stDBBan */
        if (RoleDBOthers.VERSION_stDBBan <= cutVer)
        {
            ret = this.stDBBan.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stFristEvent */
        if (RoleDBOthers.VERSION_stFristEvent <= cutVer)
        {
            ret = this.stFristEvent.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stRankData */
        if (RoleDBOthers.VERSION_stRankData <= cutVer)
        {
            ret = this.stRankData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stHatInfo */
        if (RoleDBOthers.VERSION_stHatInfo <= cutVer)
        {
            ret = this.stHatInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stUsedHatList */
        if (RoleDBOthers.VERSION_stUsedHatList <= cutVer)
        {
            ret = this.stUsedHatList.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stViolationsData */
        if (RoleDBOthers.VERSION_stViolationsData <= cutVer)
        {
            ret = this.stViolationsData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stFriendInfo */
        if (RoleDBOthers.VERSION_stFriendInfo <= cutVer)
        {
            ret = this.stFriendInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stMiscInfo */
        if (RoleDBOthers.VERSION_stMiscInfo <= cutVer)
        {
            ret = this.stMiscInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stRoleDBHeroServingInfo */
        if (RoleDBOthers.VERSION_stRoleDBHeroServingInfo <= cutVer)
        {
            ret = this.stRoleDBHeroServingInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLoginPrivilege */
        if (RoleDBOthers.VERSION_iLoginPrivilege <= cutVer)
        {
            ret = destBuf.writeInt32(this.iLoginPrivilege);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bFirstChargeAwardFlag */
        if (RoleDBOthers.VERSION_bFirstChargeAwardFlag <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bFirstChargeAwardFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPvpInfo */
        if (RoleDBOthers.VERSION_stPvpInfo <= cutVer)
        {
            ret = this.stPvpInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleDBOthers.CURRVERSION < cutVer)
        {
            cutVer = RoleDBOthers.CURRVERSION;
        }

        /* check cutversion */
        if (RoleDBOthers.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.stDBDailyCounter */
        {
            ret = this.stDBDailyCounter.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDBPetCapture */
        if (RoleDBOthers.VERSION_stDBPetCapture <= cutVer)
        {
            ret = this.stDBPetCapture.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBPetCapture.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBPet */
        if (RoleDBOthers.VERSION_stDBPet <= cutVer)
        {
            ret = this.stDBPet.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBPet.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBFormula */
        if (RoleDBOthers.VERSION_stDBFormula <= cutVer)
        {
            ret = this.stDBFormula.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBFormula.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBTask */
        if (RoleDBOthers.VERSION_stDBTask <= cutVer)
        {
            ret = this.stDBTask.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBTask.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stLastToyInfo */
        if (RoleDBOthers.VERSION_stLastToyInfo <= cutVer)
        {
            ret = this.stLastToyInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stLastToyInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBNameCard */
        if (RoleDBOthers.VERSION_stDBNameCard <= cutVer)
        {
            ret = this.stDBNameCard.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBNameCard.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBBadgeWall */
        if (RoleDBOthers.VERSION_stDBBadgeWall <= cutVer)
        {
            ret = this.stDBBadgeWall.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBBadgeWall.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBPVEInfo */
        if (RoleDBOthers.VERSION_stDBPVEInfo <= cutVer)
        {
            ret = this.stDBPVEInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBPVEInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBWeapon */
        if (RoleDBOthers.VERSION_stDBWeapon <= cutVer)
        {
            ret = this.stDBWeapon.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBWeapon.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stNoviceGuideNode */
        if (RoleDBOthers.VERSION_stNoviceGuideNode <= cutVer)
        {
            ret = this.stNoviceGuideNode.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stNoviceGuideNode.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBSignInfo */
        if (RoleDBOthers.VERSION_stDBSignInfo <= cutVer)
        {
            ret = this.stDBSignInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBSignInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stDBLotteryInfo */
        if (RoleDBOthers.VERSION_stDBLotteryInfo <= cutVer)
        {
            ret = this.stDBLotteryInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBLotteryInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stRankRewardStat */
        if (RoleDBOthers.VERSION_stRankRewardStat <= cutVer)
        {
            ret = this.stRankRewardStat.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stRankRewardStat.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stActionPass */
        if (RoleDBOthers.VERSION_stActionPass <= cutVer)
        {
            ret = this.stActionPass.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stActionPass.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stRoleDBActivity */
        if (RoleDBOthers.VERSION_stRoleDBActivity <= cutVer)
        {
            ret = this.stRoleDBActivity.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stRoleDBActivity.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.szLevelAward */
        if (RoleDBOthers.VERSION_szLevelAward <= cutVer)
        {
            for (Int32 szLevelAward_i = 0; szLevelAward_i < 20; szLevelAward_i++)
            {
                ret = srcBuf.readInt8(ref this.szLevelAward[szLevelAward_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        /* unpack member: this.stDBBan */
        if (RoleDBOthers.VERSION_stDBBan <= cutVer)
        {
            ret = this.stDBBan.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBBan.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stFristEvent */
        if (RoleDBOthers.VERSION_stFristEvent <= cutVer)
        {
            ret = this.stFristEvent.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stFristEvent.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stRankData */
        if (RoleDBOthers.VERSION_stRankData <= cutVer)
        {
            ret = this.stRankData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stRankData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stHatInfo */
        if (RoleDBOthers.VERSION_stHatInfo <= cutVer)
        {
            ret = this.stHatInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stHatInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stUsedHatList */
        if (RoleDBOthers.VERSION_stUsedHatList <= cutVer)
        {
            ret = this.stUsedHatList.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stUsedHatList.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stViolationsData */
        if (RoleDBOthers.VERSION_stViolationsData <= cutVer)
        {
            ret = this.stViolationsData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stViolationsData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stFriendInfo */
        if (RoleDBOthers.VERSION_stFriendInfo <= cutVer)
        {
            ret = this.stFriendInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stFriendInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stMiscInfo */
        if (RoleDBOthers.VERSION_stMiscInfo <= cutVer)
        {
            ret = this.stMiscInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stMiscInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stRoleDBHeroServingInfo */
        if (RoleDBOthers.VERSION_stRoleDBHeroServingInfo <= cutVer)
        {
            ret = this.stRoleDBHeroServingInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stRoleDBHeroServingInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.iLoginPrivilege */
        if (RoleDBOthers.VERSION_iLoginPrivilege <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iLoginPrivilege);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iLoginPrivilege = 0;
        }

        /* unpack member: this.bFirstChargeAwardFlag */
        if (RoleDBOthers.VERSION_bFirstChargeAwardFlag <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bFirstChargeAwardFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bFirstChargeAwardFlag = 0;
        }

        /* unpack member: this.stPvpInfo */
        if (RoleDBOthers.VERSION_stPvpInfo <= cutVer)
        {
            ret = this.stPvpInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stPvpInfo.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 220;
    /* entry version info */
    public static readonly uint VERSION_stDBPetCapture = 12;
    public static readonly uint VERSION_stDBPet = 12;
    public static readonly uint VERSION_stDBFormula = 19;
    public static readonly uint VERSION_stDBTask = 23;
    public static readonly uint VERSION_stLastToyInfo = 27;
    public static readonly uint VERSION_stDBNameCard = 29;
    public static readonly uint VERSION_stDBBadgeWall = 30;
    public static readonly uint VERSION_stDBPVEInfo = 38;
    public static readonly uint VERSION_stDBWeapon = 40;
    public static readonly uint VERSION_stNoviceGuideNode = 52;
    public static readonly uint VERSION_stDBSignInfo = 61;
    public static readonly uint VERSION_stDBLotteryInfo = 61;
    public static readonly uint VERSION_stRankRewardStat = 63;
    public static readonly uint VERSION_stActionPass = 73;
    public static readonly uint VERSION_stRoleDBActivity = 79;
    public static readonly uint VERSION_szLevelAward = 79;
    public static readonly uint VERSION_stDBBan = 80;
    public static readonly uint VERSION_stFristEvent = 85;
    public static readonly uint VERSION_stRankData = 96;
    public static readonly uint VERSION_stHatInfo = 106;
    public static readonly uint VERSION_stUsedHatList = 112;
    public static readonly uint VERSION_stViolationsData = 115;
    public static readonly uint VERSION_stFriendInfo = 120;
    public static readonly uint VERSION_stMiscInfo = 126;
    public static readonly uint VERSION_stRoleDBHeroServingInfo = 140;
    public static readonly uint VERSION_iLoginPrivilege = 143;
    public static readonly uint VERSION_bFirstChargeAwardFlag = 147;
    public static readonly uint VERSION_stPvpInfo = 177;

    /* length of string or wstring */
}


public class RoleTreasureAttr : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iHP; // 生命值
    public Int32 iAttack; // 攻击
    public Int32 iDefend; // 防御
    public Int32 iElePower; // 元素力量
    public Int32 iCritical; // 暴击
    public Int32 iFightingForce; // 战斗力

    /* construct methods */
    public RoleTreasureAttr()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleTreasureAttr.CURRVERSION < cutVer)
        {
            cutVer = RoleTreasureAttr.CURRVERSION;
        }

        /* check cutversion */
        if (RoleTreasureAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iHP */
        {
            ret = destBuf.writeInt32(this.iHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAttack */
        {
            ret = destBuf.writeInt32(this.iAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iDefend */
        {
            ret = destBuf.writeInt32(this.iDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iElePower */
        {
            ret = destBuf.writeInt32(this.iElePower);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iCritical */
        {
            ret = destBuf.writeInt32(this.iCritical);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFightingForce */
        {
            ret = destBuf.writeInt32(this.iFightingForce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleTreasureAttr.CURRVERSION < cutVer)
        {
            cutVer = RoleTreasureAttr.CURRVERSION;
        }

        /* check cutversion */
        if (RoleTreasureAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iHP */
        {
            ret = srcBuf.readInt32(ref this.iHP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iAttack */
        {
            ret = srcBuf.readInt32(ref this.iAttack);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iDefend */
        {
            ret = srcBuf.readInt32(ref this.iDefend);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iElePower */
        {
            ret = srcBuf.readInt32(ref this.iElePower);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCritical */
        {
            ret = srcBuf.readInt32(ref this.iCritical);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iFightingForce */
        {
            ret = srcBuf.readInt32(ref this.iFightingForce);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 召唤师装备信息 */
public class SummonerWearEquip : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwInstID; // 物品实例ID
    public Int32 iResID; // 装备ResID

    /* construct methods */
    public SummonerWearEquip()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SummonerWearEquip.CURRVERSION < cutVer)
        {
            cutVer = SummonerWearEquip.CURRVERSION;
        }

        /* check cutversion */
        if (SummonerWearEquip.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwInstID */
        {
            ret = destBuf.writeUInt32(this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iResID */
        {
            ret = destBuf.writeInt32(this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SummonerWearEquip.CURRVERSION < cutVer)
        {
            cutVer = SummonerWearEquip.CURRVERSION;
        }

        /* check cutversion */
        if (SummonerWearEquip.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwInstID */
        {
            ret = srcBuf.readUInt32(ref this.dwInstID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iResID */
        {
            ret = srcBuf.readInt32(ref this.iResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 召唤师装备信息 */
public class SummonerWearData : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wCount; // 已穿着装备个数
    public SummonerWearEquip[] astEquip; // 穿着装备ID数组

    /* construct methods */
    public SummonerWearData()
    {
        astEquip = new SummonerWearEquip[6];
        for (int astEquip_i = 0; astEquip_i < 6; astEquip_i++)
        {
            astEquip[astEquip_i] = new SummonerWearEquip();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SummonerWearData.CURRVERSION < cutVer)
        {
            cutVer = SummonerWearData.CURRVERSION;
        }

        /* check cutversion */
        if (SummonerWearData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wCount */
        {
            ret = destBuf.writeUInt16(this.wCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astEquip */
        {
            if (6 < this.wCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astEquip.Length < this.wCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astEquip_i = 0; astEquip_i < this.wCount; astEquip_i++)
            {
                ret = this.astEquip[astEquip_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || SummonerWearData.CURRVERSION < cutVer)
        {
            cutVer = SummonerWearData.CURRVERSION;
        }

        /* check cutversion */
        if (SummonerWearData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wCount */
        {
            ret = srcBuf.readUInt16(ref this.wCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astEquip */
        {
            if (6 < this.wCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astEquip.Length < this.wCount)
            {
                astEquip = new SummonerWearEquip[this.wCount];
                for (Int32 astEquip_i = 0; astEquip_i < this.wCount; astEquip_i++)
                {
                    astEquip[astEquip_i] = new SummonerWearEquip();
                }
            }

            for (Int32 astEquip_i = 0; astEquip_i < this.wCount; astEquip_i++)
            {
                ret = this.astEquip[astEquip_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 每日统计数据 */
public class DailyStatData : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwLoginTimeToday; // 当日累计在线时长
    public UInt32 dwCommPassToday; // 当日通关普通关卡数

    /* construct methods */
    public DailyStatData()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DailyStatData.CURRVERSION < cutVer)
        {
            cutVer = DailyStatData.CURRVERSION;
        }

        /* check cutversion */
        if (DailyStatData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwLoginTimeToday */
        {
            ret = destBuf.writeUInt32(this.dwLoginTimeToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwCommPassToday */
        {
            ret = destBuf.writeUInt32(this.dwCommPassToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DailyStatData.CURRVERSION < cutVer)
        {
            cutVer = DailyStatData.CURRVERSION;
        }

        /* check cutversion */
        if (DailyStatData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwLoginTimeToday */
        {
            ret = srcBuf.readUInt32(ref this.dwLoginTimeToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwCommPassToday */
        {
            ret = srcBuf.readUInt32(ref this.dwCommPassToday);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 角色(召唤师)基本信息 */
public class RoleBaseAttr : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenID; // 帐号OpenID
    public byte bGender; // 性别，1男，2女
    public byte[] szNickname; // 游戏昵称
    public UInt32 dwCreateTime; // 数据创建时间-timet类型
    public Int64 llXP; // 经验
    public Int16 nLevel; // 等级
    public Int32 iGold; // 游戏内金币
    public Int32 iDreamCoin; // 游戏内金币
    public Int32 iLastDiamond; // 最近的钻石
    public UInt16 wTili; // 当前体力值
    public UInt32 dwTiliCD; // 体力自动回复CD时间 策划改为每天固定赠送体力 此字段无用
    public UInt32 dwBlockEnd; // 封号截至时间
    public UInt32 dwLastLoginTime; // 上次登录时间
    public UInt32 dwLastLogoutTime; // 上次存盘时间
    public Int32 iLoginCount; // 累计登录次数
    public Int32 iAchievementXP; // 成就经验
    public Int32 iAchievementLevel; // 成就等级
    public Int16 nCurNameCard; // 当前名字牌
    public Int32 iHeadIcon; // 角色头像ID
    public UInt16 wPveTili; // PVE体力
    public UInt32 dwFighting; // 战斗力
    public byte[] szPicture; // 用户平台头像
    public UInt32 dwHeart; // 爱心数量
    public UInt16 wToyCheckFailedCount; // 当天硬件验密失败次数
    public UInt32 dwLastToyCheckFailedTime; // 硬件验密最后失败时间
    public UInt16 wCardUseFailedCount; // 当天卡片验密失败次数
    public UInt32 dwLastCardUseFailedTime; // 卡片验密最后失败时间
    public SevenDayLogin stSevenDayLogin; // 七天登录
    public UInt32 dwLastStatOnlineTime; // 上次计算在线时长的时间
    public UInt32 dwTotalOnlineTime; // 在线时长
    public UInt16 wMaxPVERound; // PVE最大回合数
    public UInt32 dwMaxPVEPoints; // PVE最大积分数
    public SummonerWearData stSummonerWearData; // 召唤师穿戴信息
    public UInt16 wCurPetID; // 当前出战的宠物ID
    public DailyStatData stDailyStat; // 当日统计数据
    public Int32 iMaxAwardVersion; // 最大领取的版本号
    public SevenDayLogin stSpeSevenDayLogin; // 春节七天登录
    public byte bCampID; // 阵营ID, 取值1或2
    public UInt32 dwPVPWinCount; // 阵营活动期间PVP胜利次数
    public UInt32 dwPVPLastStatTime; // 阵营活动期间PVP最后统计时间
    public UInt32 dwParentBlockStart; // 家长设置封号开始时间
    public UInt32 dwParentBlockEnd; // 家长设置封号截止时间

    /* construct methods */
    public RoleBaseAttr()
    {
        szOpenID = new byte[64];
        szNickname = new byte[64];
        szPicture = new byte[256];
        stSevenDayLogin = new SevenDayLogin();
        stSummonerWearData = new SummonerWearData();
        stDailyStat = new DailyStatData();
        stSpeSevenDayLogin = new SevenDayLogin();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* this.szOpenID have no defaultvalue */

        this.bGender = 0;

        /* this.szNickname have no defaultvalue */

        this.dwCreateTime = 0;

        this.llXP = 0;

        this.nLevel = 0;

        this.iGold = 0;

        this.iDreamCoin = 0;

        this.iLastDiamond = 0;

        this.wTili = 0;

        this.dwTiliCD = 0;

        this.dwBlockEnd = 0;

        this.dwLastLoginTime = 0;

        this.dwLastLogoutTime = 0;

        this.iLoginCount = 0;

        this.iAchievementXP = 0;

        this.iAchievementLevel = 0;

        this.nCurNameCard = 0;

        this.iHeadIcon = 0;

        this.wPveTili = 0;

        this.dwFighting = 0;

        /* this.szPicture have no defaultvalue */

        this.dwHeart = 0;

        this.wToyCheckFailedCount = 0;

        this.dwLastToyCheckFailedTime = 0;

        this.wCardUseFailedCount = 0;

        this.dwLastCardUseFailedTime = 0;

        ret = this.stSevenDayLogin.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.dwLastStatOnlineTime = 0;

        this.dwTotalOnlineTime = 0;

        this.wMaxPVERound = 0;

        this.dwMaxPVEPoints = 0;

        ret = this.stSummonerWearData.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.wCurPetID = 0;

        ret = this.stDailyStat.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.iMaxAwardVersion = 0;

        ret = this.stSpeSevenDayLogin.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.bCampID = 0;

        this.dwPVPWinCount = 0;

        this.dwPVPLastStatTime = 0;

        this.dwParentBlockStart = 0;

        this.dwParentBlockEnd = 0;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleBaseAttr.CURRVERSION < cutVer)
        {
            cutVer = RoleBaseAttr.CURRVERSION;
        }

        /* check cutversion */
        if (RoleBaseAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenID */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenID = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenID = destBuf.getUsedSize();

            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID);

            if (realSize4szOpenID >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenID, realSize4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenID */
            Int32 size4szOpenID = destBuf.getUsedSize() - beginPos4szOpenID;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenID), sizePos4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bGender */
        if (RoleBaseAttr.VERSION_bGender <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bGender);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szNickname */
        if (RoleBaseAttr.VERSION_szNickname <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szNickname = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szNickname = destBuf.getUsedSize();

            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname);

            if (realSize4szNickname >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szNickname, realSize4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szNickname */
            Int32 size4szNickname = destBuf.getUsedSize() - beginPos4szNickname;
            ret = destBuf.writeUInt32((UInt32)(size4szNickname), sizePos4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwCreateTime */
        {
            ret = destBuf.writeUInt32(this.dwCreateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.llXP */
        {
            ret = destBuf.writeInt64(this.llXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLevel */
        {
            ret = destBuf.writeInt16(this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iGold */
        {
            ret = destBuf.writeInt32(this.iGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iDreamCoin */
        if (RoleBaseAttr.VERSION_iDreamCoin <= cutVer)
        {
            ret = destBuf.writeInt32(this.iDreamCoin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLastDiamond */
        if (RoleBaseAttr.VERSION_iLastDiamond <= cutVer)
        {
            ret = destBuf.writeInt32(this.iLastDiamond);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wTili */
        {
            ret = destBuf.writeUInt16(this.wTili);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwTiliCD */
        {
            ret = destBuf.writeUInt32(this.dwTiliCD);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBlockEnd */
        if (RoleBaseAttr.VERSION_dwBlockEnd <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwBlockEnd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastLoginTime */
        if (RoleBaseAttr.VERSION_dwLastLoginTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastLoginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastLogoutTime */
        if (RoleBaseAttr.VERSION_dwLastLogoutTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastLogoutTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iLoginCount */
        if (RoleBaseAttr.VERSION_iLoginCount <= cutVer)
        {
            ret = destBuf.writeInt32(this.iLoginCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAchievementXP */
        if (RoleBaseAttr.VERSION_iAchievementXP <= cutVer)
        {
            ret = destBuf.writeInt32(this.iAchievementXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iAchievementLevel */
        if (RoleBaseAttr.VERSION_iAchievementLevel <= cutVer)
        {
            ret = destBuf.writeInt32(this.iAchievementLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nCurNameCard */
        if (RoleBaseAttr.VERSION_nCurNameCard <= cutVer)
        {
            ret = destBuf.writeInt16(this.nCurNameCard);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iHeadIcon */
        if (RoleBaseAttr.VERSION_iHeadIcon <= cutVer)
        {
            ret = destBuf.writeInt32(this.iHeadIcon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wPveTili */
        if (RoleBaseAttr.VERSION_wPveTili <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wPveTili);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwFighting */
        if (RoleBaseAttr.VERSION_dwFighting <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szPicture */
        if (RoleBaseAttr.VERSION_szPicture <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szPicture = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPicture = destBuf.getUsedSize();

            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture);

            if (realSize4szPicture >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPicture, realSize4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szPicture */
            Int32 size4szPicture = destBuf.getUsedSize() - beginPos4szPicture;
            ret = destBuf.writeUInt32((UInt32)(size4szPicture), sizePos4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwHeart */
        if (RoleBaseAttr.VERSION_dwHeart <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwHeart);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wToyCheckFailedCount */
        if (RoleBaseAttr.VERSION_wToyCheckFailedCount <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wToyCheckFailedCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastToyCheckFailedTime */
        if (RoleBaseAttr.VERSION_dwLastToyCheckFailedTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastToyCheckFailedTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wCardUseFailedCount */
        if (RoleBaseAttr.VERSION_wCardUseFailedCount <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wCardUseFailedCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastCardUseFailedTime */
        if (RoleBaseAttr.VERSION_dwLastCardUseFailedTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastCardUseFailedTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSevenDayLogin */
        if (RoleBaseAttr.VERSION_stSevenDayLogin <= cutVer)
        {
            ret = this.stSevenDayLogin.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastStatOnlineTime */
        if (RoleBaseAttr.VERSION_dwLastStatOnlineTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastStatOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwTotalOnlineTime */
        if (RoleBaseAttr.VERSION_dwTotalOnlineTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwTotalOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMaxPVERound */
        if (RoleBaseAttr.VERSION_wMaxPVERound <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wMaxPVERound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMaxPVEPoints */
        if (RoleBaseAttr.VERSION_dwMaxPVEPoints <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwMaxPVEPoints);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSummonerWearData */
        if (RoleBaseAttr.VERSION_stSummonerWearData <= cutVer)
        {
            ret = this.stSummonerWearData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wCurPetID */
        if (RoleBaseAttr.VERSION_wCurPetID <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wCurPetID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDailyStat */
        if (RoleBaseAttr.VERSION_stDailyStat <= cutVer)
        {
            ret = this.stDailyStat.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iMaxAwardVersion */
        if (RoleBaseAttr.VERSION_iMaxAwardVersion <= cutVer)
        {
            ret = destBuf.writeInt32(this.iMaxAwardVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSpeSevenDayLogin */
        if (RoleBaseAttr.VERSION_stSpeSevenDayLogin <= cutVer)
        {
            ret = this.stSpeSevenDayLogin.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bCampID */
        if (RoleBaseAttr.VERSION_bCampID <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bCampID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwPVPWinCount */
        if (RoleBaseAttr.VERSION_dwPVPWinCount <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwPVPWinCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwPVPLastStatTime */
        if (RoleBaseAttr.VERSION_dwPVPLastStatTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwPVPLastStatTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwParentBlockStart */
        if (RoleBaseAttr.VERSION_dwParentBlockStart <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwParentBlockStart);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwParentBlockEnd */
        if (RoleBaseAttr.VERSION_dwParentBlockEnd <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwParentBlockEnd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || RoleBaseAttr.CURRVERSION < cutVer)
        {
            cutVer = RoleBaseAttr.CURRVERSION;
        }

        /* check cutversion */
        if (RoleBaseAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenID */
        {
            /* get sizeinfo for this.szOpenID */
            UInt32 size4szOpenID = 0;
            ret = srcBuf.readUInt32(ref size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenID > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenID > this.szOpenID.GetLength(0))
            {
                if ((int)size4szOpenID <= LENGTH_szOpenID)
                {
                    this.szOpenID = new byte[size4szOpenID];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenID, (int)size4szOpenID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenID[(int)size4szOpenID - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenID = TdrTypeUtil.cstrlen(this.szOpenID) + 1;
            if (size4szOpenID != realSize4szOpenID)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bGender */
        if (RoleBaseAttr.VERSION_bGender <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bGender);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bGender = 0;
        }

        /* unpack member: this.szNickname */
        if (RoleBaseAttr.VERSION_szNickname <= cutVer)
        {
            /* get sizeinfo for this.szNickname */
            UInt32 size4szNickname = 0;
            ret = srcBuf.readUInt32(ref size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szNickname > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szNickname > this.szNickname.GetLength(0))
            {
                if ((int)size4szNickname <= LENGTH_szNickname)
                {
                    this.szNickname = new byte[size4szNickname];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szNickname, (int)size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szNickname[(int)size4szNickname - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname) + 1;
            if (size4szNickname != realSize4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szNickname have no defaultvalue */
        }

        /* unpack member: this.dwCreateTime */
        {
            ret = srcBuf.readUInt32(ref this.dwCreateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.llXP */
        {
            ret = srcBuf.readInt64(ref this.llXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nLevel */
        {
            ret = srcBuf.readInt16(ref this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iGold */
        {
            ret = srcBuf.readInt32(ref this.iGold);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iDreamCoin */
        if (RoleBaseAttr.VERSION_iDreamCoin <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iDreamCoin);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iDreamCoin = 0;
        }

        /* unpack member: this.iLastDiamond */
        if (RoleBaseAttr.VERSION_iLastDiamond <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iLastDiamond);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iLastDiamond = 0;
        }

        /* unpack member: this.wTili */
        {
            ret = srcBuf.readUInt16(ref this.wTili);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwTiliCD */
        {
            ret = srcBuf.readUInt32(ref this.dwTiliCD);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwBlockEnd */
        if (RoleBaseAttr.VERSION_dwBlockEnd <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwBlockEnd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwBlockEnd = 0;
        }

        /* unpack member: this.dwLastLoginTime */
        if (RoleBaseAttr.VERSION_dwLastLoginTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastLoginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastLoginTime = 0;
        }

        /* unpack member: this.dwLastLogoutTime */
        if (RoleBaseAttr.VERSION_dwLastLogoutTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastLogoutTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastLogoutTime = 0;
        }

        /* unpack member: this.iLoginCount */
        if (RoleBaseAttr.VERSION_iLoginCount <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iLoginCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iLoginCount = 0;
        }

        /* unpack member: this.iAchievementXP */
        if (RoleBaseAttr.VERSION_iAchievementXP <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iAchievementXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iAchievementXP = 0;
        }

        /* unpack member: this.iAchievementLevel */
        if (RoleBaseAttr.VERSION_iAchievementLevel <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iAchievementLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iAchievementLevel = 0;
        }

        /* unpack member: this.nCurNameCard */
        if (RoleBaseAttr.VERSION_nCurNameCard <= cutVer)
        {
            ret = srcBuf.readInt16(ref this.nCurNameCard);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.nCurNameCard = 0;
        }

        /* unpack member: this.iHeadIcon */
        if (RoleBaseAttr.VERSION_iHeadIcon <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iHeadIcon);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iHeadIcon = 0;
        }

        /* unpack member: this.wPveTili */
        if (RoleBaseAttr.VERSION_wPveTili <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wPveTili);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wPveTili = 0;
        }

        /* unpack member: this.dwFighting */
        if (RoleBaseAttr.VERSION_dwFighting <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwFighting);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwFighting = 0;
        }

        /* unpack member: this.szPicture */
        if (RoleBaseAttr.VERSION_szPicture <= cutVer)
        {
            /* get sizeinfo for this.szPicture */
            UInt32 size4szPicture = 0;
            ret = srcBuf.readUInt32(ref size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPicture > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPicture > this.szPicture.GetLength(0))
            {
                if ((int)size4szPicture <= LENGTH_szPicture)
                {
                    this.szPicture = new byte[size4szPicture];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPicture, (int)size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPicture[(int)size4szPicture - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture) + 1;
            if (size4szPicture != realSize4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szPicture have no defaultvalue */
        }

        /* unpack member: this.dwHeart */
        if (RoleBaseAttr.VERSION_dwHeart <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwHeart);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwHeart = 0;
        }

        /* unpack member: this.wToyCheckFailedCount */
        if (RoleBaseAttr.VERSION_wToyCheckFailedCount <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wToyCheckFailedCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wToyCheckFailedCount = 0;
        }

        /* unpack member: this.dwLastToyCheckFailedTime */
        if (RoleBaseAttr.VERSION_dwLastToyCheckFailedTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastToyCheckFailedTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastToyCheckFailedTime = 0;
        }

        /* unpack member: this.wCardUseFailedCount */
        if (RoleBaseAttr.VERSION_wCardUseFailedCount <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wCardUseFailedCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wCardUseFailedCount = 0;
        }

        /* unpack member: this.dwLastCardUseFailedTime */
        if (RoleBaseAttr.VERSION_dwLastCardUseFailedTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastCardUseFailedTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastCardUseFailedTime = 0;
        }

        /* unpack member: this.stSevenDayLogin */
        if (RoleBaseAttr.VERSION_stSevenDayLogin <= cutVer)
        {
            ret = this.stSevenDayLogin.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stSevenDayLogin.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.dwLastStatOnlineTime */
        if (RoleBaseAttr.VERSION_dwLastStatOnlineTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastStatOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastStatOnlineTime = 0;
        }

        /* unpack member: this.dwTotalOnlineTime */
        if (RoleBaseAttr.VERSION_dwTotalOnlineTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwTotalOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwTotalOnlineTime = 0;
        }

        /* unpack member: this.wMaxPVERound */
        if (RoleBaseAttr.VERSION_wMaxPVERound <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wMaxPVERound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wMaxPVERound = 0;
        }

        /* unpack member: this.dwMaxPVEPoints */
        if (RoleBaseAttr.VERSION_dwMaxPVEPoints <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwMaxPVEPoints);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwMaxPVEPoints = 0;
        }

        /* unpack member: this.stSummonerWearData */
        if (RoleBaseAttr.VERSION_stSummonerWearData <= cutVer)
        {
            ret = this.stSummonerWearData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stSummonerWearData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.wCurPetID */
        if (RoleBaseAttr.VERSION_wCurPetID <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wCurPetID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wCurPetID = 0;
        }

        /* unpack member: this.stDailyStat */
        if (RoleBaseAttr.VERSION_stDailyStat <= cutVer)
        {
            ret = this.stDailyStat.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDailyStat.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.iMaxAwardVersion */
        if (RoleBaseAttr.VERSION_iMaxAwardVersion <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iMaxAwardVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iMaxAwardVersion = 0;
        }

        /* unpack member: this.stSpeSevenDayLogin */
        if (RoleBaseAttr.VERSION_stSpeSevenDayLogin <= cutVer)
        {
            ret = this.stSpeSevenDayLogin.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stSpeSevenDayLogin.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.bCampID */
        if (RoleBaseAttr.VERSION_bCampID <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bCampID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bCampID = 0;
        }

        /* unpack member: this.dwPVPWinCount */
        if (RoleBaseAttr.VERSION_dwPVPWinCount <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwPVPWinCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwPVPWinCount = 0;
        }

        /* unpack member: this.dwPVPLastStatTime */
        if (RoleBaseAttr.VERSION_dwPVPLastStatTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwPVPLastStatTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwPVPLastStatTime = 0;
        }

        /* unpack member: this.dwParentBlockStart */
        if (RoleBaseAttr.VERSION_dwParentBlockStart <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwParentBlockStart);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwParentBlockStart = 0;
        }

        /* unpack member: this.dwParentBlockEnd */
        if (RoleBaseAttr.VERSION_dwParentBlockEnd <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwParentBlockEnd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwParentBlockEnd = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 186;
    /* entry version info */
    public static readonly uint VERSION_bGender = 24;
    public static readonly uint VERSION_szNickname = 24;
    public static readonly uint VERSION_iDreamCoin = 129;
    public static readonly uint VERSION_iLastDiamond = 148;
    public static readonly uint VERSION_dwBlockEnd = 66;
    public static readonly uint VERSION_dwLastLoginTime = 24;
    public static readonly uint VERSION_dwLastLogoutTime = 8;
    public static readonly uint VERSION_iLoginCount = 15;
    public static readonly uint VERSION_iAchievementXP = 28;
    public static readonly uint VERSION_iAchievementLevel = 28;
    public static readonly uint VERSION_nCurNameCard = 33;
    public static readonly uint VERSION_iHeadIcon = 44;
    public static readonly uint VERSION_wPveTili = 51;
    public static readonly uint VERSION_dwFighting = 56;
    public static readonly uint VERSION_szPicture = 56;
    public static readonly uint VERSION_dwHeart = 58;
    public static readonly uint VERSION_wToyCheckFailedCount = 60;
    public static readonly uint VERSION_dwLastToyCheckFailedTime = 60;
    public static readonly uint VERSION_wCardUseFailedCount = 127;
    public static readonly uint VERSION_dwLastCardUseFailedTime = 127;
    public static readonly uint VERSION_stSevenDayLogin = 61;
    public static readonly uint VERSION_dwLastStatOnlineTime = 85;
    public static readonly uint VERSION_dwTotalOnlineTime = 85;
    public static readonly uint VERSION_wMaxPVERound = 87;
    public static readonly uint VERSION_dwMaxPVEPoints = 87;
    public static readonly uint VERSION_stSummonerWearData = 88;
    public static readonly uint VERSION_wCurPetID = 131;
    public static readonly uint VERSION_stDailyStat = 142;
    public static readonly uint VERSION_iMaxAwardVersion = 162;
    public static readonly uint VERSION_stSpeSevenDayLogin = 172;
    public static readonly uint VERSION_bCampID = 180;
    public static readonly uint VERSION_dwPVPWinCount = 180;
    public static readonly uint VERSION_dwPVPLastStatTime = 180;
    public static readonly uint VERSION_dwParentBlockStart = 186;
    public static readonly uint VERSION_dwParentBlockEnd = 186;

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenID = 64;
    public static readonly uint LENGTH_szNickname = 64;
    public static readonly uint LENGTH_szPicture = 256;
}


/* 角色存储表, 不超过10个blob字段！新加独立字段需要同步修改dbproxy */
public class DBAccountData : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullAccountGID; // 玩家帐号全局唯一GID, 与OpenID对应
    public RoleBaseAttr stBase; // 基础信息
    public ZRoleHeroDBData stHero; // DB英雄数据
    public ZRolePassDBData stPass; // DB关卡数据
    public RoleDBOthers stOthers; // 角色其他数据blob
    public UInt32 dwUpdateTime; // update db time
    public RoleDBBag stBag; // 背包数据

    /* construct methods */
    public DBAccountData()
    {
        stBase = new RoleBaseAttr();
        stHero = new ZRoleHeroDBData();
        stPass = new ZRolePassDBData();
        stOthers = new RoleDBOthers();
        stBag = new RoleDBBag();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.ullAccountGID = 0;

        ret = this.stBase.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stHero.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stPass.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        ret = this.stOthers.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        this.dwUpdateTime = 0;

        ret = this.stBag.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBAccountData.CURRVERSION < cutVer)
        {
            cutVer = DBAccountData.CURRVERSION;
        }

        /* check cutversion */
        if (DBAccountData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullAccountGID */
        {
            ret = destBuf.writeUInt64(this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stBase */
        {
            ret = this.stBase.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stHero */
        if (DBAccountData.VERSION_stHero <= cutVer)
        {
            ret = this.stHero.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPass */
        if (DBAccountData.VERSION_stPass <= cutVer)
        {
            ret = this.stPass.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stOthers */
        if (DBAccountData.VERSION_stOthers <= cutVer)
        {
            ret = this.stOthers.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwUpdateTime */
        {
            ret = destBuf.writeUInt32(this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stBag */
        if (DBAccountData.VERSION_stBag <= cutVer)
        {
            ret = this.stBag.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBAccountData.CURRVERSION < cutVer)
        {
            cutVer = DBAccountData.CURRVERSION;
        }

        /* check cutversion */
        if (DBAccountData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullAccountGID */
        {
            ret = srcBuf.readUInt64(ref this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stBase */
        {
            ret = this.stBase.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stHero */
        if (DBAccountData.VERSION_stHero <= cutVer)
        {
            ret = this.stHero.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stHero.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stPass */
        if (DBAccountData.VERSION_stPass <= cutVer)
        {
            ret = this.stPass.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stPass.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.stOthers */
        if (DBAccountData.VERSION_stOthers <= cutVer)
        {
            ret = this.stOthers.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stOthers.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.dwUpdateTime */
        {
            ret = srcBuf.readUInt32(ref this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stBag */
        if (DBAccountData.VERSION_stBag <= cutVer)
        {
            ret = this.stBag.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stBag.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 220;
    /* entry version info */
    public static readonly uint VERSION_stHero = 3;
    public static readonly uint VERSION_stPass = 5;
    public static readonly uint VERSION_stOthers = 2;
    public static readonly uint VERSION_stBag = 9;

    /* length of string or wstring */
}


/* 排行榜信息 */
public class DBRankInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwPassID; // 关卡ID或者排行榜id
    public Int32 iScore; // 关卡历史最高得分

    /* construct methods */
    public DBRankInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankInfo.CURRVERSION < cutVer)
        {
            cutVer = DBRankInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwPassID */
        {
            ret = destBuf.writeUInt32(this.dwPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iScore */
        {
            ret = destBuf.writeInt32(this.iScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankInfo.CURRVERSION < cutVer)
        {
            cutVer = DBRankInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwPassID */
        {
            ret = srcBuf.readUInt32(ref this.dwPassID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iScore */
        {
            ret = srcBuf.readInt32(ref this.iScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 复杂排行榜信息 */
public class DBRankUserDataInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwRankID; // 排行榜id
    public Int32 iScore; // 历史最高得分
    public UInt16 wLen; // 数组长度
    public sbyte[] szDataInfo;
    public UInt32 dwRankTime; // 存储时间

    /* construct methods */
    public DBRankUserDataInfo()
    {
        szDataInfo = new sbyte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankUserDataInfo.CURRVERSION < cutVer)
        {
            cutVer = DBRankUserDataInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankUserDataInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwRankID */
        {
            ret = destBuf.writeUInt32(this.dwRankID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iScore */
        {
            ret = destBuf.writeInt32(this.iScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wLen */
        {
            ret = destBuf.writeUInt16(this.wLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szDataInfo */
        {
            if (256 < this.wLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szDataInfo.Length < this.wLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 szDataInfo_i = 0; szDataInfo_i < this.wLen; szDataInfo_i++)
            {
                ret = destBuf.writeInt8(this.szDataInfo[szDataInfo_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.dwRankTime */
        if (DBRankUserDataInfo.VERSION_dwRankTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwRankTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankUserDataInfo.CURRVERSION < cutVer)
        {
            cutVer = DBRankUserDataInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankUserDataInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwRankID */
        {
            ret = srcBuf.readUInt32(ref this.dwRankID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iScore */
        {
            ret = srcBuf.readInt32(ref this.iScore);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wLen */
        {
            ret = srcBuf.readUInt16(ref this.wLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szDataInfo */
        {
            if (256 < this.wLen)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (szDataInfo.Length < this.wLen)
            {
                szDataInfo = new sbyte[this.wLen];
            }

            for (Int32 szDataInfo_i = 0; szDataInfo_i < this.wLen; szDataInfo_i++)
            {
                ret = srcBuf.readInt8(ref this.szDataInfo[szDataInfo_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.dwRankTime */
        if (DBRankUserDataInfo.VERSION_dwRankTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwRankTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwRankTime = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 133;
    /* entry version info */
    public static readonly uint VERSION_dwRankTime = 133;

    /* length of string or wstring */
}


public class DBRankList : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwCount; // 排行榜数量
    public DBRankInfo[] astDBRankInfo;

    /* construct methods */
    public DBRankList()
    {
        astDBRankInfo = new DBRankInfo[30];
        for (int astDBRankInfo_i = 0; astDBRankInfo_i < 30; astDBRankInfo_i++)
        {
            astDBRankInfo[astDBRankInfo_i] = new DBRankInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankList.CURRVERSION < cutVer)
        {
            cutVer = DBRankList.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankList.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwCount */
        {
            ret = destBuf.writeUInt32(this.dwCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astDBRankInfo */
        {
            if (30 < this.dwCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astDBRankInfo.Length < this.dwCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astDBRankInfo_i = 0; astDBRankInfo_i < this.dwCount; astDBRankInfo_i++)
            {
                ret = this.astDBRankInfo[astDBRankInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankList.CURRVERSION < cutVer)
        {
            cutVer = DBRankList.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankList.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwCount */
        {
            ret = srcBuf.readUInt32(ref this.dwCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astDBRankInfo */
        {
            if (30 < this.dwCount)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astDBRankInfo.Length < this.dwCount)
            {
                astDBRankInfo = new DBRankInfo[this.dwCount];
                for (Int32 astDBRankInfo_i = 0; astDBRankInfo_i < this.dwCount; astDBRankInfo_i++)
                {
                    astDBRankInfo[astDBRankInfo_i] = new DBRankInfo();
                }
            }

            for (Int32 astDBRankInfo_i = 0; astDBRankInfo_i < this.dwCount; astDBRankInfo_i++)
            {
                ret = this.astDBRankInfo[astDBRankInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBQQvipDetail : tsf4g_csharp_interface
{
    /* public members */
    public byte bIsVip; // 是否QQ会员
    public byte bIsSVip; // 是否年费会员

    /* construct methods */
    public DBQQvipDetail()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBQQvipDetail.CURRVERSION < cutVer)
        {
            cutVer = DBQQvipDetail.CURRVERSION;
        }

        /* check cutversion */
        if (DBQQvipDetail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bIsVip */
        {
            ret = destBuf.writeUInt8(this.bIsVip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bIsSVip */
        {
            ret = destBuf.writeUInt8(this.bIsSVip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBQQvipDetail.CURRVERSION < cutVer)
        {
            cutVer = DBQQvipDetail.CURRVERSION;
        }

        /* check cutversion */
        if (DBQQvipDetail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bIsVip */
        {
            ret = srcBuf.readUInt8(ref this.bIsVip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bIsSVip */
        {
            ret = srcBuf.readUInt8(ref this.bIsSVip);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 角色概要信息存储表 */
public class DBAccountSummaryData : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullAccountGID; // 玩家帐号全局唯一GID, 与OpenID对应
    public byte bGender; // 性别，1男，2女
    public byte[] szNickname; // 游戏昵称
    public UInt32 dwCreateTime; // 数据创建时间-timet类型
    public Int64 llXP; // 经验
    public Int16 nLevel; // 等级
    public Int32 iCurNameCard; // 当前称号
    public Int32 iFightPower; // 战斗力
    public Int32 iGameHead; // 游戏内头像ID
    public byte[] szPlatformHead;
    public PetSummaryInfo stPetInfo; // 当前宠物信息
    public HeroSummaryInfo stHeroInfo; // 当前英雄消息
    public DBBadgeWallSummary stDBBadgeWall; // 徽章
    public UInt16 wMaxPVERound; // PVE最大回合数
    public UInt32 dwMaxPVEPoints; // PVE最大积分数
    public SummonerWearData stSummonerWearData; // 召唤师穿戴信息
    public UInt32 dwLastSaveTime; // 最近保存时间
    public byte bLoginPrivilege; // 登陆特权
    public DBQQvipDetail stQQvipDetail; // QQ会员信息

    /* construct methods */
    public DBAccountSummaryData()
    {
        szNickname = new byte[64];
        szPlatformHead = new byte[256];
        stPetInfo = new PetSummaryInfo();
        stHeroInfo = new HeroSummaryInfo();
        stDBBadgeWall = new DBBadgeWallSummary();
        stSummonerWearData = new SummonerWearData();
        stQQvipDetail = new DBQQvipDetail();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBAccountSummaryData.CURRVERSION < cutVer)
        {
            cutVer = DBAccountSummaryData.CURRVERSION;
        }

        /* check cutversion */
        if (DBAccountSummaryData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullAccountGID */
        {
            ret = destBuf.writeUInt64(this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bGender */
        if (DBAccountSummaryData.VERSION_bGender <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bGender);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szNickname */
        if (DBAccountSummaryData.VERSION_szNickname <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szNickname = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szNickname = destBuf.getUsedSize();

            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname);

            if (realSize4szNickname >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szNickname, realSize4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szNickname */
            Int32 size4szNickname = destBuf.getUsedSize() - beginPos4szNickname;
            ret = destBuf.writeUInt32((UInt32)(size4szNickname), sizePos4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwCreateTime */
        {
            ret = destBuf.writeUInt32(this.dwCreateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.llXP */
        {
            ret = destBuf.writeInt64(this.llXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nLevel */
        {
            ret = destBuf.writeInt16(this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iCurNameCard */
        if (DBAccountSummaryData.VERSION_iCurNameCard <= cutVer)
        {
            ret = destBuf.writeInt32(this.iCurNameCard);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iFightPower */
        if (DBAccountSummaryData.VERSION_iFightPower <= cutVer)
        {
            ret = destBuf.writeInt32(this.iFightPower);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iGameHead */
        if (DBAccountSummaryData.VERSION_iGameHead <= cutVer)
        {
            ret = destBuf.writeInt32(this.iGameHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szPlatformHead */
        if (DBAccountSummaryData.VERSION_szPlatformHead <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szPlatformHead = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPlatformHead = destBuf.getUsedSize();

            Int32 realSize4szPlatformHead = TdrTypeUtil.cstrlen(this.szPlatformHead);

            if (realSize4szPlatformHead >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPlatformHead, realSize4szPlatformHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szPlatformHead */
            Int32 size4szPlatformHead = destBuf.getUsedSize() - beginPos4szPlatformHead;
            ret = destBuf.writeUInt32((UInt32)(size4szPlatformHead), sizePos4szPlatformHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.stPetInfo */
        {
            ret = this.stPetInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stHeroInfo */
        {
            ret = this.stHeroInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBBadgeWall */
        if (DBAccountSummaryData.VERSION_stDBBadgeWall <= cutVer)
        {
            ret = this.stDBBadgeWall.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMaxPVERound */
        if (DBAccountSummaryData.VERSION_wMaxPVERound <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wMaxPVERound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMaxPVEPoints */
        if (DBAccountSummaryData.VERSION_dwMaxPVEPoints <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwMaxPVEPoints);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSummonerWearData */
        if (DBAccountSummaryData.VERSION_stSummonerWearData <= cutVer)
        {
            ret = this.stSummonerWearData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwLastSaveTime */
        if (DBAccountSummaryData.VERSION_dwLastSaveTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwLastSaveTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bLoginPrivilege */
        if (DBAccountSummaryData.VERSION_bLoginPrivilege <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bLoginPrivilege);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stQQvipDetail */
        if (DBAccountSummaryData.VERSION_stQQvipDetail <= cutVer)
        {
            ret = this.stQQvipDetail.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBAccountSummaryData.CURRVERSION < cutVer)
        {
            cutVer = DBAccountSummaryData.CURRVERSION;
        }

        /* check cutversion */
        if (DBAccountSummaryData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullAccountGID */
        {
            ret = srcBuf.readUInt64(ref this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bGender */
        if (DBAccountSummaryData.VERSION_bGender <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bGender);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bGender = 0;
        }

        /* unpack member: this.szNickname */
        if (DBAccountSummaryData.VERSION_szNickname <= cutVer)
        {
            /* get sizeinfo for this.szNickname */
            UInt32 size4szNickname = 0;
            ret = srcBuf.readUInt32(ref size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szNickname > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szNickname > this.szNickname.GetLength(0))
            {
                if ((int)size4szNickname <= LENGTH_szNickname)
                {
                    this.szNickname = new byte[size4szNickname];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szNickname, (int)size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szNickname[(int)size4szNickname - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname) + 1;
            if (size4szNickname != realSize4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szNickname have no defaultvalue */
        }

        /* unpack member: this.dwCreateTime */
        {
            ret = srcBuf.readUInt32(ref this.dwCreateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.llXP */
        {
            ret = srcBuf.readInt64(ref this.llXP);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nLevel */
        {
            ret = srcBuf.readInt16(ref this.nLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCurNameCard */
        if (DBAccountSummaryData.VERSION_iCurNameCard <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iCurNameCard);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iCurNameCard = 0;
        }

        /* unpack member: this.iFightPower */
        if (DBAccountSummaryData.VERSION_iFightPower <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iFightPower);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iFightPower = 0;
        }

        /* unpack member: this.iGameHead */
        if (DBAccountSummaryData.VERSION_iGameHead <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iGameHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iGameHead = 0;
        }

        /* unpack member: this.szPlatformHead */
        if (DBAccountSummaryData.VERSION_szPlatformHead <= cutVer)
        {
            /* get sizeinfo for this.szPlatformHead */
            UInt32 size4szPlatformHead = 0;
            ret = srcBuf.readUInt32(ref size4szPlatformHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPlatformHead > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPlatformHead > this.szPlatformHead.GetLength(0))
            {
                if ((int)size4szPlatformHead <= LENGTH_szPlatformHead)
                {
                    this.szPlatformHead = new byte[size4szPlatformHead];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPlatformHead)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPlatformHead, (int)size4szPlatformHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPlatformHead[(int)size4szPlatformHead - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPlatformHead = TdrTypeUtil.cstrlen(this.szPlatformHead) + 1;
            if (size4szPlatformHead != realSize4szPlatformHead)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szPlatformHead have no defaultvalue */
        }

        /* unpack member: this.stPetInfo */
        {
            ret = this.stPetInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stHeroInfo */
        {
            ret = this.stHeroInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDBBadgeWall */
        if (DBAccountSummaryData.VERSION_stDBBadgeWall <= cutVer)
        {
            ret = this.stDBBadgeWall.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stDBBadgeWall.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.wMaxPVERound */
        if (DBAccountSummaryData.VERSION_wMaxPVERound <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wMaxPVERound);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wMaxPVERound = 0;
        }

        /* unpack member: this.dwMaxPVEPoints */
        if (DBAccountSummaryData.VERSION_dwMaxPVEPoints <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwMaxPVEPoints);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwMaxPVEPoints = 0;
        }

        /* unpack member: this.stSummonerWearData */
        if (DBAccountSummaryData.VERSION_stSummonerWearData <= cutVer)
        {
            ret = this.stSummonerWearData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stSummonerWearData.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* unpack member: this.dwLastSaveTime */
        if (DBAccountSummaryData.VERSION_dwLastSaveTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwLastSaveTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwLastSaveTime = 0;
        }

        /* unpack member: this.bLoginPrivilege */
        if (DBAccountSummaryData.VERSION_bLoginPrivilege <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bLoginPrivilege);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bLoginPrivilege = 0;
        }

        /* unpack member: this.stQQvipDetail */
        if (DBAccountSummaryData.VERSION_stQQvipDetail <= cutVer)
        {
            ret = this.stQQvipDetail.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            ret = this.stQQvipDetail.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 166;
    /* entry version info */
    public static readonly uint VERSION_bGender = 24;
    public static readonly uint VERSION_szNickname = 24;
    public static readonly uint VERSION_iCurNameCard = 55;
    public static readonly uint VERSION_iFightPower = 55;
    public static readonly uint VERSION_iGameHead = 55;
    public static readonly uint VERSION_szPlatformHead = 55;
    public static readonly uint VERSION_stDBBadgeWall = 64;
    public static readonly uint VERSION_wMaxPVERound = 91;
    public static readonly uint VERSION_dwMaxPVEPoints = 91;
    public static readonly uint VERSION_stSummonerWearData = 93;
    public static readonly uint VERSION_dwLastSaveTime = 94;
    public static readonly uint VERSION_bLoginPrivilege = 146;
    public static readonly uint VERSION_stQQvipDetail = 166;

    /* length of string or wstring */
    public static readonly uint LENGTH_szNickname = 64;
    public static readonly uint LENGTH_szPlatformHead = 256;
}


/* 排行榜相关信息表 */
public class DBRankInfoTable : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullAccountGID; // 玩家帐号全局唯一GID, 与OpenID对应
    public DBRankList stDBRankInfo;
    public DBRankUserDataInfo stDBRankPVE;

    /* construct methods */
    public DBRankInfoTable()
    {
        stDBRankInfo = new DBRankList();
        stDBRankPVE = new DBRankUserDataInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankInfoTable.CURRVERSION < cutVer)
        {
            cutVer = DBRankInfoTable.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankInfoTable.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullAccountGID */
        {
            ret = destBuf.writeUInt64(this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBRankInfo */
        {
            ret = this.stDBRankInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDBRankPVE */
        {
            ret = this.stDBRankPVE.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBRankInfoTable.CURRVERSION < cutVer)
        {
            cutVer = DBRankInfoTable.CURRVERSION;
        }

        /* check cutversion */
        if (DBRankInfoTable.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullAccountGID */
        {
            ret = srcBuf.readUInt64(ref this.ullAccountGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDBRankInfo */
        {
            ret = this.stDBRankInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDBRankPVE */
        {
            ret = this.stDBRankPVE.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 133;
    /* entry version info */

    /* length of string or wstring */
}


public class QQLoginInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenId;
    public byte[] szOpenKey;
    public UInt32 ulUserIp;
    public sbyte chGuest; // 游客模式，这仅是一个标签，因开发阶段要求游客还可以真正拉到数据，所以挂在QQ这，之后可以去掉

    /* construct methods */
    public QQLoginInfo()
    {
        szOpenId = new byte[64];
        szOpenKey = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QQLoginInfo.CURRVERSION < cutVer)
        {
            cutVer = QQLoginInfo.CURRVERSION;
        }

        /* check cutversion */
        if (QQLoginInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenId */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenId = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenId = destBuf.getUsedSize();

            Int32 realSize4szOpenId = TdrTypeUtil.cstrlen(this.szOpenId);

            if (realSize4szOpenId >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenId, realSize4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenId */
            Int32 size4szOpenId = destBuf.getUsedSize() - beginPos4szOpenId;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenId), sizePos4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szOpenKey */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenKey = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenKey = destBuf.getUsedSize();

            Int32 realSize4szOpenKey = TdrTypeUtil.cstrlen(this.szOpenKey);

            if (realSize4szOpenKey >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenKey, realSize4szOpenKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenKey */
            Int32 size4szOpenKey = destBuf.getUsedSize() - beginPos4szOpenKey;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenKey), sizePos4szOpenKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ulUserIp */
        {
            ret = destBuf.writeUInt32(this.ulUserIp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.chGuest */
        {
            ret = destBuf.writeInt8(this.chGuest);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || QQLoginInfo.CURRVERSION < cutVer)
        {
            cutVer = QQLoginInfo.CURRVERSION;
        }

        /* check cutversion */
        if (QQLoginInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenId */
        {
            /* get sizeinfo for this.szOpenId */
            UInt32 size4szOpenId = 0;
            ret = srcBuf.readUInt32(ref size4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenId > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenId > this.szOpenId.GetLength(0))
            {
                if ((int)size4szOpenId <= LENGTH_szOpenId)
                {
                    this.szOpenId = new byte[size4szOpenId];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenId)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenId, (int)size4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenId[(int)size4szOpenId - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenId = TdrTypeUtil.cstrlen(this.szOpenId) + 1;
            if (size4szOpenId != realSize4szOpenId)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szOpenKey */
        {
            /* get sizeinfo for this.szOpenKey */
            UInt32 size4szOpenKey = 0;
            ret = srcBuf.readUInt32(ref size4szOpenKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenKey > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenKey > this.szOpenKey.GetLength(0))
            {
                if ((int)size4szOpenKey <= LENGTH_szOpenKey)
                {
                    this.szOpenKey = new byte[size4szOpenKey];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenKey)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenKey, (int)size4szOpenKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenKey[(int)size4szOpenKey - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenKey = TdrTypeUtil.cstrlen(this.szOpenKey) + 1;
            if (size4szOpenKey != realSize4szOpenKey)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ulUserIp */
        {
            ret = srcBuf.readUInt32(ref this.ulUserIp);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.chGuest */
        {
            ret = srcBuf.readInt8(ref this.chGuest);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenId = 64;
    public static readonly uint LENGTH_szOpenKey = 64;
}


public class WXLoginInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenId;
    public byte[] szToken;

    /* construct methods */
    public WXLoginInfo()
    {
        szOpenId = new byte[64];
        szToken = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || WXLoginInfo.CURRVERSION < cutVer)
        {
            cutVer = WXLoginInfo.CURRVERSION;
        }

        /* check cutversion */
        if (WXLoginInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenId */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenId = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenId = destBuf.getUsedSize();

            Int32 realSize4szOpenId = TdrTypeUtil.cstrlen(this.szOpenId);

            if (realSize4szOpenId >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenId, realSize4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenId */
            Int32 size4szOpenId = destBuf.getUsedSize() - beginPos4szOpenId;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenId), sizePos4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szToken */
        {
            /* record sizeinfo position */
            Int32 sizePos4szToken = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szToken = destBuf.getUsedSize();

            Int32 realSize4szToken = TdrTypeUtil.cstrlen(this.szToken);

            if (realSize4szToken >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szToken, realSize4szToken);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szToken */
            Int32 size4szToken = destBuf.getUsedSize() - beginPos4szToken;
            ret = destBuf.writeUInt32((UInt32)(size4szToken), sizePos4szToken);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || WXLoginInfo.CURRVERSION < cutVer)
        {
            cutVer = WXLoginInfo.CURRVERSION;
        }

        /* check cutversion */
        if (WXLoginInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenId */
        {
            /* get sizeinfo for this.szOpenId */
            UInt32 size4szOpenId = 0;
            ret = srcBuf.readUInt32(ref size4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenId > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenId > this.szOpenId.GetLength(0))
            {
                if ((int)size4szOpenId <= LENGTH_szOpenId)
                {
                    this.szOpenId = new byte[size4szOpenId];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenId)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenId, (int)size4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenId[(int)size4szOpenId - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenId = TdrTypeUtil.cstrlen(this.szOpenId) + 1;
            if (size4szOpenId != realSize4szOpenId)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szToken */
        {
            /* get sizeinfo for this.szToken */
            UInt32 size4szToken = 0;
            ret = srcBuf.readUInt32(ref size4szToken);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szToken > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szToken > this.szToken.GetLength(0))
            {
                if ((int)size4szToken <= LENGTH_szToken)
                {
                    this.szToken = new byte[size4szToken];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szToken)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szToken, (int)size4szToken);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szToken[(int)size4szToken - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szToken = TdrTypeUtil.cstrlen(this.szToken) + 1;
            if (size4szToken != realSize4szToken)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenId = 64;
    public static readonly uint LENGTH_szToken = 256;
}


public class VerifyInfoUnit
{
    /* public members */
    public WXLoginInfo stWXLoginInfo;
    public QQLoginInfo stQQLoginInfo;
    public QQLoginInfo stGuestLoginInfo;

    /* public methods */
    public VerifyInfoUnit()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        switch (selector)
        {
            case 1:
                if (this.stWXLoginInfo == null) this.stWXLoginInfo = new WXLoginInfo();
                return this.stWXLoginInfo;
            case 2:
                if (this.stQQLoginInfo == null) this.stQQLoginInfo = new QQLoginInfo();
                return this.stQQLoginInfo;
            case 3:
                if (this.stGuestLoginInfo == null) this.stGuestLoginInfo = new QQLoginInfo();
                return this.stGuestLoginInfo;
        }

        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || VerifyInfoUnit.CURRVERSION < cutVer)
        {
            cutVer = VerifyInfoUnit.CURRVERSION;
        }

        /* check cutversion */
        if (VerifyInfoUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || VerifyInfoUnit.CURRVERSION < cutVer)
        {
            cutVer = VerifyInfoUnit.CURRVERSION;
        }

        /* check cutversion */
        if (VerifyInfoUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 玩家验证信息 */
public class VerifyInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bUserType; // 用户类型，取值OPEN_APP_USR_TYPE_**
    public VerifyInfoUnit stInfo;

    /* construct methods */
    public VerifyInfo()
    {
        stInfo = new VerifyInfoUnit();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || VerifyInfo.CURRVERSION < cutVer)
        {
            cutVer = VerifyInfo.CURRVERSION;
        }

        /* check cutversion */
        if (VerifyInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bUserType */
        {
            ret = destBuf.writeUInt8(this.bUserType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stInfo */
        {
            Int64 selector4stInfo = this.bUserType;
            ret = this.stInfo.pack(selector4stInfo, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || VerifyInfo.CURRVERSION < cutVer)
        {
            cutVer = VerifyInfo.CURRVERSION;
        }

        /* check cutversion */
        if (VerifyInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bUserType */
        {
            ret = srcBuf.readUInt8(ref this.bUserType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stInfo */
        {
            Int64 selector4stInfo = this.bUserType;
            ret = this.stInfo.unpack(selector4stInfo, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class MailAccItem : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chType; // 附件类型
    public Int32 iID; // 物品ID
    public Int16 nNum; // 物品个数
    public Int32 iItemNum; // 物品个数

    /* construct methods */
    public MailAccItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccItem.CURRVERSION < cutVer)
        {
            cutVer = MailAccItem.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chType */
        {
            ret = destBuf.writeInt8(this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iID */
        {
            ret = destBuf.writeInt32(this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nNum */
        {
            ret = destBuf.writeInt16(this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iItemNum */
        if (MailAccItem.VERSION_iItemNum <= cutVer)
        {
            ret = destBuf.writeInt32(this.iItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccItem.CURRVERSION < cutVer)
        {
            cutVer = MailAccItem.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chType */
        {
            ret = srcBuf.readInt8(ref this.chType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iID */
        {
            ret = srcBuf.readInt32(ref this.iID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nNum */
        {
            ret = srcBuf.readInt16(ref this.nNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iItemNum */
        if (MailAccItem.VERSION_iItemNum <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iItemNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iItemNum = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 208;
    /* entry version info */
    public static readonly uint VERSION_iItemNum = 208;

    /* length of string or wstring */
}


public class MailAccData : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chNum; // 附件个数
    public MailAccItem[] astAccList; // 附件列表

    /* construct methods */
    public MailAccData()
    {
        astAccList = new MailAccItem[5];
        for (int astAccList_i = 0; astAccList_i < 5; astAccList_i++)
        {
            astAccList[astAccList_i] = new MailAccItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccData.CURRVERSION < cutVer)
        {
            cutVer = MailAccData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chNum */
        {
            ret = destBuf.writeInt8(this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astAccList */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (5 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astAccList.Length < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astAccList_i = 0; astAccList_i < this.chNum; astAccList_i++)
            {
                ret = this.astAccList[astAccList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MailAccData.CURRVERSION < cutVer)
        {
            cutVer = MailAccData.CURRVERSION;
        }

        /* check cutversion */
        if (MailAccData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chNum */
        {
            ret = srcBuf.readInt8(ref this.chNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astAccList */
        {
            if (0 > this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (5 < this.chNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astAccList.Length < this.chNum)
            {
                astAccList = new MailAccItem[this.chNum];
                for (Int32 astAccList_i = 0; astAccList_i < this.chNum; astAccList_i++)
                {
                    astAccList[astAccList_i] = new MailAccItem();
                }
            }

            for (Int32 astAccList_i = 0; astAccList_i < this.chNum; astAccList_i++)
            {
                ret = this.astAccList[astAccList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 208;
    /* entry version info */

    /* length of string or wstring */
}


public class OffMsgMail : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nResID; // 邮件资源ID,用于表示发送原因
    public byte[] szTitle; // 标题
    public byte[] szContent; // 正文
    public UInt64 ullSrcGID; // 发送来源,为0表示系统
    public byte[] szNickname; // 游戏昵称
    public byte[] szPicture; // 用户平台头像
    public MailAccData stAccData; // 附件

    /* construct methods */
    public OffMsgMail()
    {
        szTitle = new byte[64];
        szContent = new byte[512];
        szNickname = new byte[64];
        szPicture = new byte[256];
        stAccData = new MailAccData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OffMsgMail.CURRVERSION < cutVer)
        {
            cutVer = OffMsgMail.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgMail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nResID */
        {
            ret = destBuf.writeInt16(this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szTitle */
        {
            /* record sizeinfo position */
            Int32 sizePos4szTitle = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szTitle = destBuf.getUsedSize();

            Int32 realSize4szTitle = TdrTypeUtil.cstrlen(this.szTitle);

            if (realSize4szTitle >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szTitle, realSize4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szTitle */
            Int32 size4szTitle = destBuf.getUsedSize() - beginPos4szTitle;
            ret = destBuf.writeUInt32((UInt32)(size4szTitle), sizePos4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szContent */
        {
            /* record sizeinfo position */
            Int32 sizePos4szContent = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szContent = destBuf.getUsedSize();

            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent);

            if (realSize4szContent >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szContent, realSize4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szContent */
            Int32 size4szContent = destBuf.getUsedSize() - beginPos4szContent;
            ret = destBuf.writeUInt32((UInt32)(size4szContent), sizePos4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ullSrcGID */
        {
            ret = destBuf.writeUInt64(this.ullSrcGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szNickname */
        if (OffMsgMail.VERSION_szNickname <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szNickname = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szNickname = destBuf.getUsedSize();

            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname);

            if (realSize4szNickname >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szNickname, realSize4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szNickname */
            Int32 size4szNickname = destBuf.getUsedSize() - beginPos4szNickname;
            ret = destBuf.writeUInt32((UInt32)(size4szNickname), sizePos4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPicture */
        if (OffMsgMail.VERSION_szPicture <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szPicture = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPicture = destBuf.getUsedSize();

            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture);

            if (realSize4szPicture >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPicture, realSize4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szPicture */
            Int32 size4szPicture = destBuf.getUsedSize() - beginPos4szPicture;
            ret = destBuf.writeUInt32((UInt32)(size4szPicture), sizePos4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.stAccData */
        {
            ret = this.stAccData.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OffMsgMail.CURRVERSION < cutVer)
        {
            cutVer = OffMsgMail.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgMail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nResID */
        {
            ret = srcBuf.readInt16(ref this.nResID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szTitle */
        {
            /* get sizeinfo for this.szTitle */
            UInt32 size4szTitle = 0;
            ret = srcBuf.readUInt32(ref size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szTitle > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szTitle > this.szTitle.GetLength(0))
            {
                if ((int)size4szTitle <= LENGTH_szTitle)
                {
                    this.szTitle = new byte[size4szTitle];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szTitle)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szTitle, (int)size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szTitle[(int)size4szTitle - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szTitle = TdrTypeUtil.cstrlen(this.szTitle) + 1;
            if (size4szTitle != realSize4szTitle)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szContent */
        {
            /* get sizeinfo for this.szContent */
            UInt32 size4szContent = 0;
            ret = srcBuf.readUInt32(ref size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szContent > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szContent > this.szContent.GetLength(0))
            {
                if ((int)size4szContent <= LENGTH_szContent)
                {
                    this.szContent = new byte[size4szContent];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szContent[(int)size4szContent - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent) + 1;
            if (size4szContent != realSize4szContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ullSrcGID */
        {
            ret = srcBuf.readUInt64(ref this.ullSrcGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szNickname */
        if (OffMsgMail.VERSION_szNickname <= cutVer)
        {
            /* get sizeinfo for this.szNickname */
            UInt32 size4szNickname = 0;
            ret = srcBuf.readUInt32(ref size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szNickname > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szNickname > this.szNickname.GetLength(0))
            {
                if ((int)size4szNickname <= LENGTH_szNickname)
                {
                    this.szNickname = new byte[size4szNickname];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szNickname, (int)size4szNickname);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szNickname[(int)size4szNickname - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szNickname = TdrTypeUtil.cstrlen(this.szNickname) + 1;
            if (size4szNickname != realSize4szNickname)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szNickname have no defaultvalue */
        }

        /* unpack member: this.szPicture */
        if (OffMsgMail.VERSION_szPicture <= cutVer)
        {
            /* get sizeinfo for this.szPicture */
            UInt32 size4szPicture = 0;
            ret = srcBuf.readUInt32(ref size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPicture > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPicture > this.szPicture.GetLength(0))
            {
                if ((int)size4szPicture <= LENGTH_szPicture)
                {
                    this.szPicture = new byte[size4szPicture];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPicture, (int)size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPicture[(int)size4szPicture - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture) + 1;
            if (size4szPicture != realSize4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szPicture have no defaultvalue */
        }

        /* unpack member: this.stAccData */
        {
            ret = this.stAccData.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 208;
    /* entry version info */
    public static readonly uint VERSION_szNickname = 80;
    public static readonly uint VERSION_szPicture = 80;

    /* length of string or wstring */
    public static readonly uint LENGTH_szTitle = 64;
    public static readonly uint LENGTH_szContent = 512;
    public static readonly uint LENGTH_szNickname = 64;
    public static readonly uint LENGTH_szPicture = 256;
}


public class PVPRoomInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullRoomID; // 房间ID
    public Int32 iRoomType; // 房间类型

    /* construct methods */
    public PVPRoomInfo()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVPRoomInfo.CURRVERSION < cutVer)
        {
            cutVer = PVPRoomInfo.CURRVERSION;
        }

        /* check cutversion */
        if (PVPRoomInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullRoomID */
        {
            ret = destBuf.writeUInt64(this.ullRoomID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iRoomType */
        {
            ret = destBuf.writeInt32(this.iRoomType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PVPRoomInfo.CURRVERSION < cutVer)
        {
            cutVer = PVPRoomInfo.CURRVERSION;
        }

        /* check cutversion */
        if (PVPRoomInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullRoomID */
        {
            ret = srcBuf.readUInt64(ref this.ullRoomID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iRoomType */
        {
            ret = srcBuf.readInt32(ref this.iRoomType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 系统消息内容 */
public class OffMsgSysData
{
    /* public members */
    public PVPRoomInfo stPVPRoom;

    /* public methods */
    public OffMsgSysData()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        switch (selector)
        {
            case 1:
                if (this.stPVPRoom == null) this.stPVPRoom = new PVPRoomInfo();
                return this.stPVPRoom;
        }

        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || OffMsgSysData.CURRVERSION < cutVer)
        {
            cutVer = OffMsgSysData.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgSysData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || OffMsgSysData.CURRVERSION < cutVer)
        {
            cutVer = OffMsgSysData.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgSysData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class OffMsgSys : tsf4g_csharp_interface
{
    /* public members */
    public Int16 nSysType; // 系统消息类型
    public UInt64 ullRoleGID;
    public OffMsgSysData stSysData; // 系统消息内容

    /* construct methods */
    public OffMsgSys()
    {
        stSysData = new OffMsgSysData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OffMsgSys.CURRVERSION < cutVer)
        {
            cutVer = OffMsgSys.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgSys.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.nSysType */
        {
            ret = destBuf.writeInt16(this.nSysType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.ullRoleGID */
        {
            ret = destBuf.writeUInt64(this.ullRoleGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stSysData */
        {
            Int64 selector4stSysData = this.nSysType;
            ret = this.stSysData.pack(selector4stSysData, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || OffMsgSys.CURRVERSION < cutVer)
        {
            cutVer = OffMsgSys.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgSys.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.nSysType */
        {
            ret = srcBuf.readInt16(ref this.nSysType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ullRoleGID */
        {
            ret = srcBuf.readUInt64(ref this.ullRoleGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stSysData */
        {
            Int64 selector4stSysData = this.nSysType;
            ret = this.stSysData.unpack(selector4stSysData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class OffMsgData
{
    /* public members */
    public OffMsgMail stMail;
    public OffMsgSys stSysMsg;
    public UInt64 ullAddFrdGid;
    public DBChatSingleDetail stFrdChat;

    /* public methods */
    public OffMsgData()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        switch (selector)
        {
            case 1:
                if (this.stMail == null) this.stMail = new OffMsgMail();
                return this.stMail;
            case 3:
                if (this.stSysMsg == null) this.stSysMsg = new OffMsgSys();
                return this.stSysMsg;
            case 5:
                if (this.stFrdChat == null) this.stFrdChat = new DBChatSingleDetail();
                return this.stFrdChat;
        }

        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }
        else if (4 == selector)
        {
            this.ullAddFrdGid = 0;
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || OffMsgData.CURRVERSION < cutVer)
        {
            cutVer = OffMsgData.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }
        else if (4 == selector)
        {
            ret = destBuf.writeUInt64(this.ullAddFrdGid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || OffMsgData.CURRVERSION < cutVer)
        {
            cutVer = OffMsgData.CURRVERSION;
        }

        /* check cutversion */
        if (OffMsgData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }
        else if (4 == selector)
        {
            ret = srcBuf.readUInt64(ref this.ullAddFrdGid);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 208;
    /* entry version info */

    /* length of string or wstring */
}


public class DBOffMsg : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullGID; // 角色GID
    public Int16 nType; // 消息类型
    public UInt32 dwSendTime; // 发送时间
    public UInt32 dwReadTime; // 阅读时间
    public OffMsgData stData; // 消息数据

    /* construct methods */
    public DBOffMsg()
    {
        stData = new OffMsgData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBOffMsg.CURRVERSION < cutVer)
        {
            cutVer = DBOffMsg.CURRVERSION;
        }

        /* check cutversion */
        if (DBOffMsg.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullGID */
        {
            ret = destBuf.writeUInt64(this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.nType */
        {
            ret = destBuf.writeInt16(this.nType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwSendTime */
        {
            ret = destBuf.writeUInt32(this.dwSendTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwReadTime */
        {
            ret = destBuf.writeUInt32(this.dwReadTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stData */
        {
            Int64 selector4stData = this.nType;
            ret = this.stData.pack(selector4stData, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBOffMsg.CURRVERSION < cutVer)
        {
            cutVer = DBOffMsg.CURRVERSION;
        }

        /* check cutversion */
        if (DBOffMsg.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullGID */
        {
            ret = srcBuf.readUInt64(ref this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.nType */
        {
            ret = srcBuf.readInt16(ref this.nType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwSendTime */
        {
            ret = srcBuf.readUInt32(ref this.dwSendTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwReadTime */
        {
            ret = srcBuf.readUInt32(ref this.dwReadTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stData */
        {
            Int64 selector4stData = this.nType;
            ret = this.stData.unpack(selector4stData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 208;
    /* entry version info */

    /* length of string or wstring */
}


/* 好友数据 */
public class MsdkUserInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szOpenId; // 好友openid
    public UInt64 ullGID; // 好友GID
    public byte[] szNickName;
    public Int32 iSex; // 性别，1男2女，见GENDER_TYPE_*
    public byte[] szPicture; // 用户头像,规格有原始图片(/0)、132*132(/132)、96*96(/96)、64*64(/64)、46*46(/46)

    /* construct methods */
    public MsdkUserInfo()
    {
        szOpenId = new byte[64];
        szNickName = new byte[64];
        szPicture = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MsdkUserInfo.CURRVERSION < cutVer)
        {
            cutVer = MsdkUserInfo.CURRVERSION;
        }

        /* check cutversion */
        if (MsdkUserInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szOpenId */
        {
            /* record sizeinfo position */
            Int32 sizePos4szOpenId = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szOpenId = destBuf.getUsedSize();

            Int32 realSize4szOpenId = TdrTypeUtil.cstrlen(this.szOpenId);

            if (realSize4szOpenId >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szOpenId, realSize4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szOpenId */
            Int32 size4szOpenId = destBuf.getUsedSize() - beginPos4szOpenId;
            ret = destBuf.writeUInt32((UInt32)(size4szOpenId), sizePos4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.ullGID */
        {
            ret = destBuf.writeUInt64(this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szNickName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szNickName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szNickName = destBuf.getUsedSize();

            Int32 realSize4szNickName = TdrTypeUtil.cstrlen(this.szNickName);

            if (realSize4szNickName >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szNickName, realSize4szNickName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szNickName */
            Int32 size4szNickName = destBuf.getUsedSize() - beginPos4szNickName;
            ret = destBuf.writeUInt32((UInt32)(size4szNickName), sizePos4szNickName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.iSex */
        {
            ret = destBuf.writeInt32(this.iSex);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szPicture */
        {
            /* record sizeinfo position */
            Int32 sizePos4szPicture = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPicture = destBuf.getUsedSize();

            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture);

            if (realSize4szPicture >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPicture, realSize4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szPicture */
            Int32 size4szPicture = destBuf.getUsedSize() - beginPos4szPicture;
            ret = destBuf.writeUInt32((UInt32)(size4szPicture), sizePos4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MsdkUserInfo.CURRVERSION < cutVer)
        {
            cutVer = MsdkUserInfo.CURRVERSION;
        }

        /* check cutversion */
        if (MsdkUserInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szOpenId */
        {
            /* get sizeinfo for this.szOpenId */
            UInt32 size4szOpenId = 0;
            ret = srcBuf.readUInt32(ref size4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szOpenId > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szOpenId > this.szOpenId.GetLength(0))
            {
                if ((int)size4szOpenId <= LENGTH_szOpenId)
                {
                    this.szOpenId = new byte[size4szOpenId];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szOpenId)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szOpenId, (int)size4szOpenId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szOpenId[(int)size4szOpenId - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szOpenId = TdrTypeUtil.cstrlen(this.szOpenId) + 1;
            if (size4szOpenId != realSize4szOpenId)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.ullGID */
        {
            ret = srcBuf.readUInt64(ref this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szNickName */
        {
            /* get sizeinfo for this.szNickName */
            UInt32 size4szNickName = 0;
            ret = srcBuf.readUInt32(ref size4szNickName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szNickName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szNickName > this.szNickName.GetLength(0))
            {
                if ((int)size4szNickName <= LENGTH_szNickName)
                {
                    this.szNickName = new byte[size4szNickName];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szNickName)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szNickName, (int)size4szNickName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szNickName[(int)size4szNickName - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szNickName = TdrTypeUtil.cstrlen(this.szNickName) + 1;
            if (size4szNickName != realSize4szNickName)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.iSex */
        {
            ret = srcBuf.readInt32(ref this.iSex);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szPicture */
        {
            /* get sizeinfo for this.szPicture */
            UInt32 size4szPicture = 0;
            ret = srcBuf.readUInt32(ref size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPicture > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPicture > this.szPicture.GetLength(0))
            {
                if ((int)size4szPicture <= LENGTH_szPicture)
                {
                    this.szPicture = new byte[size4szPicture];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPicture, (int)size4szPicture);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPicture[(int)size4szPicture - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPicture = TdrTypeUtil.cstrlen(this.szPicture) + 1;
            if (size4szPicture != realSize4szPicture)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szOpenId = 64;
    public static readonly uint LENGTH_szNickName = 64;
    public static readonly uint LENGTH_szPicture = 256;
}


/* 好友数据列表 */
public class MsdkFriendInfoList : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iNum; // 数量
    public MsdkUserInfo[] astInfos; // 好友数据列表

    /* construct methods */
    public MsdkFriendInfoList()
    {
        astInfos = new MsdkUserInfo[200];
        for (int astInfos_i = 0; astInfos_i < 200; astInfos_i++)
        {
            astInfos[astInfos_i] = new MsdkUserInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MsdkFriendInfoList.CURRVERSION < cutVer)
        {
            cutVer = MsdkFriendInfoList.CURRVERSION;
        }

        /* check cutversion */
        if (MsdkFriendInfoList.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iNum */
        {
            ret = destBuf.writeInt32(this.iNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astInfos */
        {
            if (0 > this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfos.Length < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astInfos_i = 0; astInfos_i < this.iNum; astInfos_i++)
            {
                ret = this.astInfos[astInfos_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || MsdkFriendInfoList.CURRVERSION < cutVer)
        {
            cutVer = MsdkFriendInfoList.CURRVERSION;
        }

        /* check cutversion */
        if (MsdkFriendInfoList.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iNum */
        {
            ret = srcBuf.readInt32(ref this.iNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astInfos */
        {
            if (0 > this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
            }
            if (200 < this.iNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfos.Length < this.iNum)
            {
                astInfos = new MsdkUserInfo[this.iNum];
                for (Int32 astInfos_i = 0; astInfos_i < this.iNum; astInfos_i++)
                {
                    astInfos[astInfos_i] = new MsdkUserInfo();
                }
            }

            for (Int32 astInfos_i = 0; astInfos_i < this.iNum; astInfos_i++)
            {
                ret = this.astInfos[astInfos_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBGlobalValue : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wType; // 数据类型
    public UInt64 ullValue; // 数据值

    /* construct methods */
    public DBGlobalValue()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBGlobalValue.CURRVERSION < cutVer)
        {
            cutVer = DBGlobalValue.CURRVERSION;
        }

        /* check cutversion */
        if (DBGlobalValue.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wType */
        {
            ret = destBuf.writeUInt16(this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.ullValue */
        {
            ret = destBuf.writeUInt64(this.ullValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBGlobalValue.CURRVERSION < cutVer)
        {
            cutVer = DBGlobalValue.CURRVERSION;
        }

        /* check cutversion */
        if (DBGlobalValue.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wType */
        {
            ret = srcBuf.readUInt16(ref this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ullValue */
        {
            ret = srcBuf.readUInt64(ref this.ullValue);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 单个登录公告信息 */
public class DBSingleLoginNoticeInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwID; // 系统分配的一个唯一公告ID
    public byte bContentType; // 见SYS_NOTICE_CONTENT_TYPE
    public byte[] szTitle; // 公告标题
    public byte[] szContent; // 公告内容
    public byte bPriority; // 优先级
    public byte bTimeType; // 时间类型见SYS_NOTICE_TIME_TYPE
    public UInt32 dwBeginTime; // 开始时间戳
    public UInt32 dwEndTime; // 结束时间戳
    public UInt32 dwMinRequireVer; // 要求的最低版本号(大于等于该版本号的客户端才能够显示此条公告)
    public byte bFilterFlag; // 过滤类型见SYS_NOTICE_FILTER_TYPE(通过|运算来进行相应过滤条件的检测)
    public UInt16 wMinLevel; // 最小等级(SYS_NOTICE_FILTER_LEVEL有效地情况下检测)
    public UInt16 wMaxLevel; // 最大等级(SYS_NOTICE_FILTER_LEVEL有效地情况下检测)
    public byte bJumpType; // 跳转类型
    public byte[] szJumpContent; // 跳转参数
    public byte bDeviceType; // IOS (0)   安卓(1)  both(2)
    public byte bFuncType; // 功能类型，用来表示该公告的具体功能类型（当前有打脸和商城轮播)
    public byte bRollTime; // 如果功能类型是轮播，该字段则表示两幅图轮播间隔
    public UInt16 wAreaLimitId; // 1 仅微信用户有效 2 仅手q大区有效  other 不做限制  (注: 0 表示以前老的公告，不做限制, 998,995等测试环境area也一样不做限制)

    /* construct methods */
    public DBSingleLoginNoticeInfo()
    {
        szTitle = new byte[64];
        szContent = new byte[256];
        szJumpContent = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.dwID = 0;

        this.bContentType = 0;

        /* this.szTitle have no defaultvalue */

        /* this.szContent have no defaultvalue */

        this.bPriority = 0;

        this.bTimeType = 0;

        this.dwBeginTime = 0;

        this.dwEndTime = 0;

        this.dwMinRequireVer = 0;

        this.bFilterFlag = 0;

        this.wMinLevel = 0;

        this.wMaxLevel = 0;

        this.bJumpType = 0;

        /* this.szJumpContent have no defaultvalue */

        this.bDeviceType = 0;

        this.bFuncType = 1;

        this.bRollTime = 0;

        this.wAreaLimitId = 0;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleLoginNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSingleLoginNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleLoginNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwID */
        {
            ret = destBuf.writeUInt32(this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bContentType */
        {
            ret = destBuf.writeUInt8(this.bContentType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szTitle */
        {
            /* record sizeinfo position */
            Int32 sizePos4szTitle = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szTitle = destBuf.getUsedSize();

            Int32 realSize4szTitle = TdrTypeUtil.cstrlen(this.szTitle);

            if (realSize4szTitle >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szTitle, realSize4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szTitle */
            Int32 size4szTitle = destBuf.getUsedSize() - beginPos4szTitle;
            ret = destBuf.writeUInt32((UInt32)(size4szTitle), sizePos4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szContent */
        {
            /* record sizeinfo position */
            Int32 sizePos4szContent = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szContent = destBuf.getUsedSize();

            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent);

            if (realSize4szContent >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szContent, realSize4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szContent */
            Int32 size4szContent = destBuf.getUsedSize() - beginPos4szContent;
            ret = destBuf.writeUInt32((UInt32)(size4szContent), sizePos4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bPriority */
        {
            ret = destBuf.writeUInt8(this.bPriority);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bTimeType */
        {
            ret = destBuf.writeUInt8(this.bTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBeginTime */
        {
            ret = destBuf.writeUInt32(this.dwBeginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwEndTime */
        {
            ret = destBuf.writeUInt32(this.dwEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMinRequireVer */
        {
            ret = destBuf.writeUInt32(this.dwMinRequireVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bFilterFlag */
        {
            ret = destBuf.writeUInt8(this.bFilterFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMinLevel */
        {
            ret = destBuf.writeUInt16(this.wMinLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMaxLevel */
        {
            ret = destBuf.writeUInt16(this.wMaxLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bJumpType */
        {
            ret = destBuf.writeUInt8(this.bJumpType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szJumpContent */
        {
            /* record sizeinfo position */
            Int32 sizePos4szJumpContent = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szJumpContent = destBuf.getUsedSize();

            Int32 realSize4szJumpContent = TdrTypeUtil.cstrlen(this.szJumpContent);

            if (realSize4szJumpContent >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szJumpContent, realSize4szJumpContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szJumpContent */
            Int32 size4szJumpContent = destBuf.getUsedSize() - beginPos4szJumpContent;
            ret = destBuf.writeUInt32((UInt32)(size4szJumpContent), sizePos4szJumpContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bDeviceType */
        {
            ret = destBuf.writeUInt8(this.bDeviceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bFuncType */
        if (DBSingleLoginNoticeInfo.VERSION_bFuncType <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bFuncType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bRollTime */
        if (DBSingleLoginNoticeInfo.VERSION_bRollTime <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bRollTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAreaLimitId */
        if (DBSingleLoginNoticeInfo.VERSION_wAreaLimitId <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAreaLimitId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleLoginNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSingleLoginNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleLoginNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwID */
        {
            ret = srcBuf.readUInt32(ref this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bContentType */
        {
            ret = srcBuf.readUInt8(ref this.bContentType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szTitle */
        {
            /* get sizeinfo for this.szTitle */
            UInt32 size4szTitle = 0;
            ret = srcBuf.readUInt32(ref size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szTitle > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szTitle > this.szTitle.GetLength(0))
            {
                if ((int)size4szTitle <= LENGTH_szTitle)
                {
                    this.szTitle = new byte[size4szTitle];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szTitle)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szTitle, (int)size4szTitle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szTitle[(int)size4szTitle - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szTitle = TdrTypeUtil.cstrlen(this.szTitle) + 1;
            if (size4szTitle != realSize4szTitle)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szContent */
        {
            /* get sizeinfo for this.szContent */
            UInt32 size4szContent = 0;
            ret = srcBuf.readUInt32(ref size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szContent > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szContent > this.szContent.GetLength(0))
            {
                if ((int)size4szContent <= LENGTH_szContent)
                {
                    this.szContent = new byte[size4szContent];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szContent[(int)size4szContent - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent) + 1;
            if (size4szContent != realSize4szContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bPriority */
        {
            ret = srcBuf.readUInt8(ref this.bPriority);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bTimeType */
        {
            ret = srcBuf.readUInt8(ref this.bTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwBeginTime */
        {
            ret = srcBuf.readUInt32(ref this.dwBeginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwEndTime */
        {
            ret = srcBuf.readUInt32(ref this.dwEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwMinRequireVer */
        {
            ret = srcBuf.readUInt32(ref this.dwMinRequireVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bFilterFlag */
        {
            ret = srcBuf.readUInt8(ref this.bFilterFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMinLevel */
        {
            ret = srcBuf.readUInt16(ref this.wMinLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMaxLevel */
        {
            ret = srcBuf.readUInt16(ref this.wMaxLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bJumpType */
        {
            ret = srcBuf.readUInt8(ref this.bJumpType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szJumpContent */
        {
            /* get sizeinfo for this.szJumpContent */
            UInt32 size4szJumpContent = 0;
            ret = srcBuf.readUInt32(ref size4szJumpContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szJumpContent > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szJumpContent > this.szJumpContent.GetLength(0))
            {
                if ((int)size4szJumpContent <= LENGTH_szJumpContent)
                {
                    this.szJumpContent = new byte[size4szJumpContent];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szJumpContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szJumpContent, (int)size4szJumpContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szJumpContent[(int)size4szJumpContent - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szJumpContent = TdrTypeUtil.cstrlen(this.szJumpContent) + 1;
            if (size4szJumpContent != realSize4szJumpContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bDeviceType */
        {
            ret = srcBuf.readUInt8(ref this.bDeviceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bFuncType */
        if (DBSingleLoginNoticeInfo.VERSION_bFuncType <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bFuncType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bFuncType = 1;
        }

        /* unpack member: this.bRollTime */
        if (DBSingleLoginNoticeInfo.VERSION_bRollTime <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bRollTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bRollTime = 0;
        }

        /* unpack member: this.wAreaLimitId */
        if (DBSingleLoginNoticeInfo.VERSION_wAreaLimitId <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAreaLimitId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAreaLimitId = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 216;
    /* entry version info */
    public static readonly uint VERSION_bFuncType = 139;
    public static readonly uint VERSION_bRollTime = 139;
    public static readonly uint VERSION_wAreaLimitId = 216;

    /* length of string or wstring */
    public static readonly uint LENGTH_szTitle = 64;
    public static readonly uint LENGTH_szContent = 256;
    public static readonly uint LENGTH_szJumpContent = 256;
}


/* 单个走马灯信息 */
public class DBSingleCycleRollNoticeInfo : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwID; // 系统分配的一个唯一走马灯ID
    public byte bRollType; // 滚动类型见SYS_NOTICE_ROLL_TYPE
    public byte bRollTime; // 滚动一次需要的时间(秒)
    public UInt32 dwRollCount; // 滚动多少次(如果是日循环的表示一天之类循环的次数)
    public byte[] szContent; // 走马灯内容
    public byte bPriority; // 优先级
    public byte bTimeType; // 时间类型见SYS_NOTICE_TIME_TYPE
    public UInt32 dwBeginTime; // 开始时间戳
    public UInt32 dwEndTime; // 结束时间戳
    public UInt32 dwMinRequireVer; // 要求的最低版本号(大于等于该版本号的客户端才能够显示此条公告)
    public byte bFilterFlag; // 过滤类型见SYS_NOTICE_FILTER_TYPE(通过|运算来进行相应过滤条件的检测)
    public UInt16 wMinLevel; // 最小等级(SYS_NOTICE_FILTER_LEVEL有效地情况下检测)
    public UInt16 wMaxLevel; // 最大等级(SYS_NOTICE_FILTER_LEVEL有效地情况下检测)
    public UInt16 wShowUIFlag; // 显示界面标识见SYS_NOTICE_ROLL_UI_TYPE
    public byte bDeviceType; // IOS (0)   安卓(1)  both(2)
    public UInt16 wAreaLimitId; // 1 仅微信用户有效 2 仅手q大区有效  other 不做限制  (注: 0 表示以前老的公告，不做限制, 998,995等测试环境area也一样不做限制)

    /* construct methods */
    public DBSingleCycleRollNoticeInfo()
    {
        szContent = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleCycleRollNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSingleCycleRollNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleCycleRollNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwID */
        {
            ret = destBuf.writeUInt32(this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bRollType */
        {
            ret = destBuf.writeUInt8(this.bRollType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bRollTime */
        {
            ret = destBuf.writeUInt8(this.bRollTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwRollCount */
        {
            ret = destBuf.writeUInt32(this.dwRollCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szContent */
        {
            /* record sizeinfo position */
            Int32 sizePos4szContent = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szContent = destBuf.getUsedSize();

            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent);

            if (realSize4szContent >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szContent, realSize4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szContent */
            Int32 size4szContent = destBuf.getUsedSize() - beginPos4szContent;
            ret = destBuf.writeUInt32((UInt32)(size4szContent), sizePos4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bPriority */
        {
            ret = destBuf.writeUInt8(this.bPriority);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bTimeType */
        {
            ret = destBuf.writeUInt8(this.bTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBeginTime */
        {
            ret = destBuf.writeUInt32(this.dwBeginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwEndTime */
        {
            ret = destBuf.writeUInt32(this.dwEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwMinRequireVer */
        {
            ret = destBuf.writeUInt32(this.dwMinRequireVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bFilterFlag */
        {
            ret = destBuf.writeUInt8(this.bFilterFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMinLevel */
        {
            ret = destBuf.writeUInt16(this.wMinLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMaxLevel */
        {
            ret = destBuf.writeUInt16(this.wMaxLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wShowUIFlag */
        {
            ret = destBuf.writeUInt16(this.wShowUIFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bDeviceType */
        {
            ret = destBuf.writeUInt8(this.bDeviceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wAreaLimitId */
        if (DBSingleCycleRollNoticeInfo.VERSION_wAreaLimitId <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wAreaLimitId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleCycleRollNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBSingleCycleRollNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleCycleRollNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwID */
        {
            ret = srcBuf.readUInt32(ref this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bRollType */
        {
            ret = srcBuf.readUInt8(ref this.bRollType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bRollTime */
        {
            ret = srcBuf.readUInt8(ref this.bRollTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwRollCount */
        {
            ret = srcBuf.readUInt32(ref this.dwRollCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szContent */
        {
            /* get sizeinfo for this.szContent */
            UInt32 size4szContent = 0;
            ret = srcBuf.readUInt32(ref size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szContent > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szContent > this.szContent.GetLength(0))
            {
                if ((int)size4szContent <= LENGTH_szContent)
                {
                    this.szContent = new byte[size4szContent];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szContent[(int)size4szContent - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent) + 1;
            if (size4szContent != realSize4szContent)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.bPriority */
        {
            ret = srcBuf.readUInt8(ref this.bPriority);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bTimeType */
        {
            ret = srcBuf.readUInt8(ref this.bTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwBeginTime */
        {
            ret = srcBuf.readUInt32(ref this.dwBeginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwEndTime */
        {
            ret = srcBuf.readUInt32(ref this.dwEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwMinRequireVer */
        {
            ret = srcBuf.readUInt32(ref this.dwMinRequireVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bFilterFlag */
        {
            ret = srcBuf.readUInt8(ref this.bFilterFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMinLevel */
        {
            ret = srcBuf.readUInt16(ref this.wMinLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMaxLevel */
        {
            ret = srcBuf.readUInt16(ref this.wMaxLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wShowUIFlag */
        {
            ret = srcBuf.readUInt16(ref this.wShowUIFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bDeviceType */
        {
            ret = srcBuf.readUInt8(ref this.bDeviceType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wAreaLimitId */
        if (DBSingleCycleRollNoticeInfo.VERSION_wAreaLimitId <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wAreaLimitId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wAreaLimitId = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 216;
    /* entry version info */
    public static readonly uint VERSION_wAreaLimitId = 216;

    /* length of string or wstring */
    public static readonly uint LENGTH_szContent = 256;
}


/* 登录公告信息 */
public class DBLoginNoticeInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bNum; // 登录公告条数
    public UInt32 dwUpdateTime; // 更新时间
    public DBSingleLoginNoticeInfo[] astInfo;

    /* construct methods */
    public DBLoginNoticeInfo()
    {
        astInfo = new DBSingleLoginNoticeInfo[200];
        for (int astInfo_i = 0; astInfo_i < 200; astInfo_i++)
        {
            astInfo[astInfo_i] = new DBSingleLoginNoticeInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.bNum = 0;

        this.dwUpdateTime = 0;

        for (Int32 astInfo_i = 0; astInfo_i < 200; astInfo_i++)
        {
            ret = this.astInfo[astInfo_i].construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLoginNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBLoginNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBLoginNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bNum */
        {
            ret = destBuf.writeUInt8(this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwUpdateTime */
        {
            ret = destBuf.writeUInt32(this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astInfo */
        {
            if (200 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfo.Length < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astInfo_i = 0; astInfo_i < this.bNum; astInfo_i++)
            {
                ret = this.astInfo[astInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBLoginNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBLoginNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBLoginNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bNum */
        {
            ret = srcBuf.readUInt8(ref this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwUpdateTime */
        {
            ret = srcBuf.readUInt32(ref this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astInfo */
        {
            if (200 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfo.Length < this.bNum)
            {
                astInfo = new DBSingleLoginNoticeInfo[this.bNum];
                for (Int32 astInfo_i = 0; astInfo_i < this.bNum; astInfo_i++)
                {
                    astInfo[astInfo_i] = new DBSingleLoginNoticeInfo();
                }
            }

            for (Int32 astInfo_i = 0; astInfo_i < this.bNum; astInfo_i++)
            {
                ret = this.astInfo[astInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 216;
    /* entry version info */

    /* length of string or wstring */
}


/* 走马灯信息 */
public class DBCycleRollNoticeInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte bNum; // 走马灯条数
    public UInt32 dwUpdateTime; // 更新时间
    public DBSingleCycleRollNoticeInfo[] astInfo;

    /* construct methods */
    public DBCycleRollNoticeInfo()
    {
        astInfo = new DBSingleCycleRollNoticeInfo[200];
        for (int astInfo_i = 0; astInfo_i < 200; astInfo_i++)
        {
            astInfo[astInfo_i] = new DBSingleCycleRollNoticeInfo();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCycleRollNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBCycleRollNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBCycleRollNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bNum */
        {
            ret = destBuf.writeUInt8(this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwUpdateTime */
        {
            ret = destBuf.writeUInt32(this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astInfo */
        {
            if (200 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfo.Length < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astInfo_i = 0; astInfo_i < this.bNum; astInfo_i++)
            {
                ret = this.astInfo[astInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBCycleRollNoticeInfo.CURRVERSION < cutVer)
        {
            cutVer = DBCycleRollNoticeInfo.CURRVERSION;
        }

        /* check cutversion */
        if (DBCycleRollNoticeInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bNum */
        {
            ret = srcBuf.readUInt8(ref this.bNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwUpdateTime */
        {
            ret = srcBuf.readUInt32(ref this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astInfo */
        {
            if (200 < this.bNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfo.Length < this.bNum)
            {
                astInfo = new DBSingleCycleRollNoticeInfo[this.bNum];
                for (Int32 astInfo_i = 0; astInfo_i < this.bNum; astInfo_i++)
                {
                    astInfo[astInfo_i] = new DBSingleCycleRollNoticeInfo();
                }
            }

            for (Int32 astInfo_i = 0; astInfo_i < this.bNum; astInfo_i++)
            {
                ret = this.astInfo[astInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 216;
    /* entry version info */

    /* length of string or wstring */
}


/* 单个用户CGI权限 */
public class DBSingleUserCGIPrivilege : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szName; // RTX名字
    public UInt32 dwPrivilegeFlag; // 权限标志

    /* construct methods */
    public DBSingleUserCGIPrivilege()
    {
        szName = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleUserCGIPrivilege.CURRVERSION < cutVer)
        {
            cutVer = DBSingleUserCGIPrivilege.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleUserCGIPrivilege.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szName = destBuf.getUsedSize();

            Int32 realSize4szName = TdrTypeUtil.cstrlen(this.szName);

            if (realSize4szName >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szName, realSize4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szName */
            Int32 size4szName = destBuf.getUsedSize() - beginPos4szName;
            ret = destBuf.writeUInt32((UInt32)(size4szName), sizePos4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwPrivilegeFlag */
        {
            ret = destBuf.writeUInt32(this.dwPrivilegeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBSingleUserCGIPrivilege.CURRVERSION < cutVer)
        {
            cutVer = DBSingleUserCGIPrivilege.CURRVERSION;
        }

        /* check cutversion */
        if (DBSingleUserCGIPrivilege.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szName */
        {
            /* get sizeinfo for this.szName */
            UInt32 size4szName = 0;
            ret = srcBuf.readUInt32(ref size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szName > this.szName.GetLength(0))
            {
                if ((int)size4szName <= LENGTH_szName)
                {
                    this.szName = new byte[size4szName];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szName)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szName, (int)size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szName[(int)size4szName - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szName = TdrTypeUtil.cstrlen(this.szName) + 1;
            if (size4szName != realSize4szName)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.dwPrivilegeFlag */
        {
            ret = srcBuf.readUInt32(ref this.dwPrivilegeFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
    public static readonly uint LENGTH_szName = 64;
}


/* 用户CGI权限 */
public class DBUserCGIPrivilege : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNum; // 用户数
    public DBSingleUserCGIPrivilege[] astInfo; // 权限信息

    /* construct methods */
    public DBUserCGIPrivilege()
    {
        astInfo = new DBSingleUserCGIPrivilege[500];
        for (int astInfo_i = 0; astInfo_i < 500; astInfo_i++)
        {
            astInfo[astInfo_i] = new DBSingleUserCGIPrivilege();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBUserCGIPrivilege.CURRVERSION < cutVer)
        {
            cutVer = DBUserCGIPrivilege.CURRVERSION;
        }

        /* check cutversion */
        if (DBUserCGIPrivilege.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astInfo */
        {
            if (500 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfo.Length < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astInfo_i = 0; astInfo_i < this.wNum; astInfo_i++)
            {
                ret = this.astInfo[astInfo_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBUserCGIPrivilege.CURRVERSION < cutVer)
        {
            cutVer = DBUserCGIPrivilege.CURRVERSION;
        }

        /* check cutversion */
        if (DBUserCGIPrivilege.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astInfo */
        {
            if (500 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astInfo.Length < this.wNum)
            {
                astInfo = new DBSingleUserCGIPrivilege[this.wNum];
                for (Int32 astInfo_i = 0; astInfo_i < this.wNum; astInfo_i++)
                {
                    astInfo[astInfo_i] = new DBSingleUserCGIPrivilege();
                }
            }

            for (Int32 astInfo_i = 0; astInfo_i < this.wNum; astInfo_i++)
            {
                ret = this.astInfo[astInfo_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


/* 全局结构 */
public class DBGlobalStructDetail
{
    /* public members */
    public DBLoginNoticeInfo stLoginNotice; // 登陆公告
    public DBCycleRollNoticeInfo stCycleRollNotice; // 走马灯
    public DBUserCGIPrivilege stCGIUserPrivilege; // 用户CGI权限

    /* public methods */
    public DBGlobalStructDetail()
    {
    }

    public tsf4g_csharp_interface select(Int64 selector)
    {
        switch (selector)
        {
            case 1:
                if (this.stLoginNotice == null) this.stLoginNotice = new DBLoginNoticeInfo();
                return this.stLoginNotice;
            case 2:
                if (this.stCycleRollNotice == null) this.stCycleRollNotice = new DBCycleRollNoticeInfo();
                return this.stCycleRollNotice;
            case 3:
                if (this.stCGIUserPrivilege == null) this.stCGIUserPrivilege = new DBUserCGIPrivilege();
                return this.stCGIUserPrivilege;
        }

        return null;
    }

    /* construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.construct();
        }

        return ret;
    }

    /* pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || DBGlobalStructDetail.CURRVERSION < cutVer)
        {
            cutVer = DBGlobalStructDetail.CURRVERSION;
        }

        /* check cutversion */
        if (DBGlobalStructDetail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.pack(ref destBuf, cutVer);
        }

        return ret;
    }

    /* unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || DBGlobalStructDetail.CURRVERSION < cutVer)
        {
            cutVer = DBGlobalStructDetail.CURRVERSION;
        }

        /* check cutversion */
        if (DBGlobalStructDetail.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        tsf4g_csharp_interface obj = select(selector);
        if (obj != null)
        {
            return obj.unpack(ref srcBuf, cutVer);
        }

        return ret;
    }


    /* version infomation */
    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 216;
    /* entry version info */

    /* length of string or wstring */
}


public class DBGlobalStruct : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wType; // 数据类型
    public DBGlobalStructDetail stDetail; // 具体数据

    /* construct methods */
    public DBGlobalStruct()
    {
        stDetail = new DBGlobalStructDetail();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.wType = 0;

        Int64 selector4stDetail = this.wType;
        ret = this.stDetail.construct(selector4stDetail);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBGlobalStruct.CURRVERSION < cutVer)
        {
            cutVer = DBGlobalStruct.CURRVERSION;
        }

        /* check cutversion */
        if (DBGlobalStruct.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wType */
        {
            ret = destBuf.writeUInt16(this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stDetail */
        {
            Int64 selector4stDetail = this.wType;
            ret = this.stDetail.pack(selector4stDetail, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBGlobalStruct.CURRVERSION < cutVer)
        {
            cutVer = DBGlobalStruct.CURRVERSION;
        }

        /* check cutversion */
        if (DBGlobalStruct.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wType */
        {
            ret = srcBuf.readUInt16(ref this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDetail */
        {
            Int64 selector4stDetail = this.wType;
            ret = this.stDetail.unpack(selector4stDetail, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 216;
    /* entry version info */

    /* length of string or wstring */
}


public class ActivityAward : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wType;
    public UInt32 dwID;
    public UInt16 wNum;
    public UInt16 wLimit; // 针对抽奖等设置的每天上限

    /* construct methods */
    public ActivityAward()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityAward.CURRVERSION < cutVer)
        {
            cutVer = ActivityAward.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityAward.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wType */
        {
            ret = destBuf.writeUInt16(this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwID */
        {
            ret = destBuf.writeUInt32(this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wLimit */
        if (ActivityAward.VERSION_wLimit <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityAward.CURRVERSION < cutVer)
        {
            cutVer = ActivityAward.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityAward.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wType */
        {
            ret = srcBuf.readUInt16(ref this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwID */
        {
            ret = srcBuf.readUInt32(ref this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wLimit */
        if (ActivityAward.VERSION_wLimit <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wLimit);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wLimit = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 107;
    /* entry version info */
    public static readonly uint VERSION_wLimit = 107;

    /* length of string or wstring */
}


public class ActivityCondition : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wType;
    public UInt32 dwID;
    public UInt32 dwParam; // 比较型参数
    public UInt16 wNum;

    /* construct methods */
    public ActivityCondition()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityCondition.CURRVERSION < cutVer)
        {
            cutVer = ActivityCondition.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityCondition.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wType */
        {
            ret = destBuf.writeUInt16(this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwID */
        {
            ret = destBuf.writeUInt32(this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwParam */
        if (ActivityCondition.VERSION_dwParam <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityCondition.CURRVERSION < cutVer)
        {
            cutVer = ActivityCondition.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityCondition.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wType */
        {
            ret = srcBuf.readUInt16(ref this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwID */
        {
            ret = srcBuf.readUInt32(ref this.dwID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwParam */
        if (ActivityCondition.VERSION_dwParam <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwParam = 0;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 99;
    /* entry version info */
    public static readonly uint VERSION_dwParam = 99;

    /* length of string or wstring */
}


public class ActivityUnit : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iActivityID; // 活动ID
    public byte[] szActivityName; // 活动名称
    public UInt16 wMinLevel; // 最小召唤师等级
    public UInt16 wMaxLevel; // 最大召唤师等级
    public UInt16 wType; // 类型
    public UInt16 wSubType; // 子类型
    public UInt16 wStyle; // 样式
    public UInt16 wIsOnlyOneTime; // 一次性活动, 与每天进行的活动进行区分
    public UInt32 dwPriority; // 优先级
    public byte bIsSimilarMerge; // 同类条件是否合并
    public UInt16 wTimeType; // 时间类型, 见上
    public UInt32 dwBeginOnlineTime; // 上线时间
    public UInt32 dwEndOnlineTime; // 下线时间
    public UInt16 wActivityTimeType; // 时间类型, 见上
    public UInt32 dwActivityBeginTime; // 活动开始时间
    public UInt32 dwActivityEndTime; // 活动结束时间
    public byte[] szDesc; // 活动描述
    public byte[] szPictureURL; // 图片URL
    public UInt16 wAwardNum; // 奖励数
    public ActivityAward[] astAwardList; // 奖励
    public UInt16 wConditionRelation; // 完成条件关系, 与或见上
    public UInt16 wConditionNum; // 完成条件数
    public ActivityCondition[] astConditionList; // 完成条件
    public UInt16 wGoType; // 跳转类型
    public byte[] szGoParam; // 跳转参数
    public UInt32 dwMinCltVersion; // 客户端最低版本号
    public byte[] szIconURL; // 图标URL
    public sbyte chIsHidden; // 是否在面板上隐藏

    /* construct methods */
    public ActivityUnit()
    {
        szActivityName = new byte[64];
        szDesc = new byte[1024];
        szPictureURL = new byte[256];
        astAwardList = new ActivityAward[5];
        for (int astAwardList_i = 0; astAwardList_i < 5; astAwardList_i++)
        {
            astAwardList[astAwardList_i] = new ActivityAward();
        }

        astConditionList = new ActivityCondition[2];
        for (int astConditionList_i = 0; astConditionList_i < 2; astConditionList_i++)
        {
            astConditionList[astConditionList_i] = new ActivityCondition();
        }

        szGoParam = new byte[256];
        szIconURL = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityUnit.CURRVERSION < cutVer)
        {
            cutVer = ActivityUnit.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iActivityID */
        {
            ret = destBuf.writeInt32(this.iActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szActivityName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szActivityName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szActivityName = destBuf.getUsedSize();

            Int32 realSize4szActivityName = TdrTypeUtil.cstrlen(this.szActivityName);

            if (realSize4szActivityName >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szActivityName, realSize4szActivityName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szActivityName */
            Int32 size4szActivityName = destBuf.getUsedSize() - beginPos4szActivityName;
            ret = destBuf.writeUInt32((UInt32)(size4szActivityName), sizePos4szActivityName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.wMinLevel */
        {
            ret = destBuf.writeUInt16(this.wMinLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wMaxLevel */
        {
            ret = destBuf.writeUInt16(this.wMaxLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wType */
        {
            ret = destBuf.writeUInt16(this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wSubType */
        {
            ret = destBuf.writeUInt16(this.wSubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wStyle */
        {
            ret = destBuf.writeUInt16(this.wStyle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wIsOnlyOneTime */
        if (ActivityUnit.VERSION_wIsOnlyOneTime <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wIsOnlyOneTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwPriority */
        if (ActivityUnit.VERSION_dwPriority <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwPriority);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.bIsSimilarMerge */
        if (ActivityUnit.VERSION_bIsSimilarMerge <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bIsSimilarMerge);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wTimeType */
        {
            ret = destBuf.writeUInt16(this.wTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwBeginOnlineTime */
        {
            ret = destBuf.writeUInt32(this.dwBeginOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwEndOnlineTime */
        {
            ret = destBuf.writeUInt32(this.dwEndOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wActivityTimeType */
        if (ActivityUnit.VERSION_wActivityTimeType <= cutVer)
        {
            ret = destBuf.writeUInt16(this.wActivityTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwActivityBeginTime */
        {
            ret = destBuf.writeUInt32(this.dwActivityBeginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwActivityEndTime */
        {
            ret = destBuf.writeUInt32(this.dwActivityEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szDesc */
        {
            /* record sizeinfo position */
            Int32 sizePos4szDesc = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szDesc = destBuf.getUsedSize();

            Int32 realSize4szDesc = TdrTypeUtil.cstrlen(this.szDesc);

            if (realSize4szDesc >= 1024)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szDesc, realSize4szDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szDesc */
            Int32 size4szDesc = destBuf.getUsedSize() - beginPos4szDesc;
            ret = destBuf.writeUInt32((UInt32)(size4szDesc), sizePos4szDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPictureURL */
        {
            /* record sizeinfo position */
            Int32 sizePos4szPictureURL = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPictureURL = destBuf.getUsedSize();

            Int32 realSize4szPictureURL = TdrTypeUtil.cstrlen(this.szPictureURL);

            if (realSize4szPictureURL >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPictureURL, realSize4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szPictureURL */
            Int32 size4szPictureURL = destBuf.getUsedSize() - beginPos4szPictureURL;
            ret = destBuf.writeUInt32((UInt32)(size4szPictureURL), sizePos4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.wAwardNum */
        {
            ret = destBuf.writeUInt16(this.wAwardNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astAwardList */
        {
            if (5 < this.wAwardNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astAwardList.Length < this.wAwardNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astAwardList_i = 0; astAwardList_i < this.wAwardNum; astAwardList_i++)
            {
                ret = this.astAwardList[astAwardList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.wConditionRelation */
        {
            ret = destBuf.writeUInt16(this.wConditionRelation);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.wConditionNum */
        {
            ret = destBuf.writeUInt16(this.wConditionNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astConditionList */
        {
            if (2 < this.wConditionNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astConditionList.Length < this.wConditionNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astConditionList_i = 0; astConditionList_i < this.wConditionNum; astConditionList_i++)
            {
                ret = this.astConditionList[astConditionList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.wGoType */
        {
            ret = destBuf.writeUInt16(this.wGoType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szGoParam */
        if (ActivityUnit.VERSION_szGoParam <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szGoParam = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szGoParam = destBuf.getUsedSize();

            Int32 realSize4szGoParam = TdrTypeUtil.cstrlen(this.szGoParam);

            if (realSize4szGoParam >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szGoParam, realSize4szGoParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szGoParam */
            Int32 size4szGoParam = destBuf.getUsedSize() - beginPos4szGoParam;
            ret = destBuf.writeUInt32((UInt32)(size4szGoParam), sizePos4szGoParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwMinCltVersion */
        if (ActivityUnit.VERSION_dwMinCltVersion <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwMinCltVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.szIconURL */
        if (ActivityUnit.VERSION_szIconURL <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szIconURL = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szIconURL = destBuf.getUsedSize();

            Int32 realSize4szIconURL = TdrTypeUtil.cstrlen(this.szIconURL);

            if (realSize4szIconURL >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szIconURL, realSize4szIconURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* set sizeinfo for this.szIconURL */
            Int32 size4szIconURL = destBuf.getUsedSize() - beginPos4szIconURL;
            ret = destBuf.writeUInt32((UInt32)(size4szIconURL), sizePos4szIconURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.chIsHidden */
        if (ActivityUnit.VERSION_chIsHidden <= cutVer)
        {
            ret = destBuf.writeInt8(this.chIsHidden);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || ActivityUnit.CURRVERSION < cutVer)
        {
            cutVer = ActivityUnit.CURRVERSION;
        }

        /* check cutversion */
        if (ActivityUnit.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iActivityID */
        {
            ret = srcBuf.readInt32(ref this.iActivityID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szActivityName */
        {
            /* get sizeinfo for this.szActivityName */
            UInt32 size4szActivityName = 0;
            ret = srcBuf.readUInt32(ref size4szActivityName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szActivityName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szActivityName > this.szActivityName.GetLength(0))
            {
                if ((int)size4szActivityName <= LENGTH_szActivityName)
                {
                    this.szActivityName = new byte[size4szActivityName];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szActivityName)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szActivityName, (int)size4szActivityName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szActivityName[(int)size4szActivityName - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szActivityName = TdrTypeUtil.cstrlen(this.szActivityName) + 1;
            if (size4szActivityName != realSize4szActivityName)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.wMinLevel */
        {
            ret = srcBuf.readUInt16(ref this.wMinLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wMaxLevel */
        {
            ret = srcBuf.readUInt16(ref this.wMaxLevel);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wType */
        {
            ret = srcBuf.readUInt16(ref this.wType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wSubType */
        {
            ret = srcBuf.readUInt16(ref this.wSubType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wStyle */
        {
            ret = srcBuf.readUInt16(ref this.wStyle);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wIsOnlyOneTime */
        if (ActivityUnit.VERSION_wIsOnlyOneTime <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wIsOnlyOneTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wIsOnlyOneTime = 0;
        }

        /* unpack member: this.dwPriority */
        if (ActivityUnit.VERSION_dwPriority <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwPriority);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwPriority = 0;
        }

        /* unpack member: this.bIsSimilarMerge */
        if (ActivityUnit.VERSION_bIsSimilarMerge <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bIsSimilarMerge);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bIsSimilarMerge = 0;
        }

        /* unpack member: this.wTimeType */
        {
            ret = srcBuf.readUInt16(ref this.wTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwBeginOnlineTime */
        {
            ret = srcBuf.readUInt32(ref this.dwBeginOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwEndOnlineTime */
        {
            ret = srcBuf.readUInt32(ref this.dwEndOnlineTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wActivityTimeType */
        if (ActivityUnit.VERSION_wActivityTimeType <= cutVer)
        {
            ret = srcBuf.readUInt16(ref this.wActivityTimeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.wActivityTimeType = 0;
        }

        /* unpack member: this.dwActivityBeginTime */
        {
            ret = srcBuf.readUInt32(ref this.dwActivityBeginTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwActivityEndTime */
        {
            ret = srcBuf.readUInt32(ref this.dwActivityEndTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szDesc */
        {
            /* get sizeinfo for this.szDesc */
            UInt32 size4szDesc = 0;
            ret = srcBuf.readUInt32(ref size4szDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szDesc > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szDesc > this.szDesc.GetLength(0))
            {
                if ((int)size4szDesc <= LENGTH_szDesc)
                {
                    this.szDesc = new byte[size4szDesc];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szDesc)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szDesc, (int)size4szDesc);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szDesc[(int)size4szDesc - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szDesc = TdrTypeUtil.cstrlen(this.szDesc) + 1;
            if (size4szDesc != realSize4szDesc)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szPictureURL */
        {
            /* get sizeinfo for this.szPictureURL */
            UInt32 size4szPictureURL = 0;
            ret = srcBuf.readUInt32(ref size4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPictureURL > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPictureURL > this.szPictureURL.GetLength(0))
            {
                if ((int)size4szPictureURL <= LENGTH_szPictureURL)
                {
                    this.szPictureURL = new byte[size4szPictureURL];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPictureURL)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPictureURL, (int)size4szPictureURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPictureURL[(int)size4szPictureURL - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPictureURL = TdrTypeUtil.cstrlen(this.szPictureURL) + 1;
            if (size4szPictureURL != realSize4szPictureURL)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.wAwardNum */
        {
            ret = srcBuf.readUInt16(ref this.wAwardNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astAwardList */
        {
            if (5 < this.wAwardNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astAwardList.Length < this.wAwardNum)
            {
                astAwardList = new ActivityAward[this.wAwardNum];
                for (Int32 astAwardList_i = 0; astAwardList_i < this.wAwardNum; astAwardList_i++)
                {
                    astAwardList[astAwardList_i] = new ActivityAward();
                }
            }

            for (Int32 astAwardList_i = 0; astAwardList_i < this.wAwardNum; astAwardList_i++)
            {
                ret = this.astAwardList[astAwardList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.wConditionRelation */
        {
            ret = srcBuf.readUInt16(ref this.wConditionRelation);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wConditionNum */
        {
            ret = srcBuf.readUInt16(ref this.wConditionNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astConditionList */
        {
            if (2 < this.wConditionNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astConditionList.Length < this.wConditionNum)
            {
                astConditionList = new ActivityCondition[this.wConditionNum];
                for (Int32 astConditionList_i = 0; astConditionList_i < this.wConditionNum; astConditionList_i++)
                {
                    astConditionList[astConditionList_i] = new ActivityCondition();
                }
            }

            for (Int32 astConditionList_i = 0; astConditionList_i < this.wConditionNum; astConditionList_i++)
            {
                ret = this.astConditionList[astConditionList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.wGoType */
        {
            ret = srcBuf.readUInt16(ref this.wGoType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szGoParam */
        if (ActivityUnit.VERSION_szGoParam <= cutVer)
        {
            /* get sizeinfo for this.szGoParam */
            UInt32 size4szGoParam = 0;
            ret = srcBuf.readUInt32(ref size4szGoParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szGoParam > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szGoParam > this.szGoParam.GetLength(0))
            {
                if ((int)size4szGoParam <= LENGTH_szGoParam)
                {
                    this.szGoParam = new byte[size4szGoParam];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szGoParam)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szGoParam, (int)size4szGoParam);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szGoParam[(int)size4szGoParam - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szGoParam = TdrTypeUtil.cstrlen(this.szGoParam) + 1;
            if (size4szGoParam != realSize4szGoParam)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szGoParam have no defaultvalue */
        }

        /* unpack member: this.dwMinCltVersion */
        if (ActivityUnit.VERSION_dwMinCltVersion <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwMinCltVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwMinCltVersion = 0;
        }

        /* unpack member: this.szIconURL */
        if (ActivityUnit.VERSION_szIconURL <= cutVer)
        {
            /* get sizeinfo for this.szIconURL */
            UInt32 size4szIconURL = 0;
            ret = srcBuf.readUInt32(ref size4szIconURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szIconURL > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szIconURL > this.szIconURL.GetLength(0))
            {
                if ((int)size4szIconURL <= LENGTH_szIconURL)
                {
                    this.szIconURL = new byte[size4szIconURL];
                }
                else
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
                }
            }

            /* string or wstring must contains a null character */
            if (1 > size4szIconURL)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szIconURL, (int)size4szIconURL);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szIconURL[(int)size4szIconURL - 1])
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szIconURL = TdrTypeUtil.cstrlen(this.szIconURL) + 1;
            if (size4szIconURL != realSize4szIconURL)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szIconURL have no defaultvalue */
        }

        /* unpack member: this.chIsHidden */
        if (ActivityUnit.VERSION_chIsHidden <= cutVer)
        {
            ret = srcBuf.readInt8(ref this.chIsHidden);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.chIsHidden = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 185;
    /* entry version info */
    public static readonly uint VERSION_wIsOnlyOneTime = 99;
    public static readonly uint VERSION_dwPriority = 123;
    public static readonly uint VERSION_bIsSimilarMerge = 123;
    public static readonly uint VERSION_wActivityTimeType = 92;
    public static readonly uint VERSION_szGoParam = 109;
    public static readonly uint VERSION_dwMinCltVersion = 161;
    public static readonly uint VERSION_szIconURL = 185;
    public static readonly uint VERSION_chIsHidden = 185;

    /* length of string or wstring */
    public static readonly uint LENGTH_szActivityName = 64;
    public static readonly uint LENGTH_szDesc = 1024;
    public static readonly uint LENGTH_szPictureURL = 256;
    public static readonly uint LENGTH_szGoParam = 256;
    public static readonly uint LENGTH_szIconURL = 256;
}


public class Activity : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNum; // 活动数量
    public ActivityUnit[] astActivityList; // 活动列表

    /* construct methods */
    public Activity()
    {
        astActivityList = new ActivityUnit[200];
        for (int astActivityList_i = 0; astActivityList_i < 200; astActivityList_i++)
        {
            astActivityList[astActivityList_i] = new ActivityUnit();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Activity.CURRVERSION < cutVer)
        {
            cutVer = Activity.CURRVERSION;
        }

        /* check cutversion */
        if (Activity.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNum */
        {
            ret = destBuf.writeUInt16(this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astActivityList */
        {
            if (200 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityList.Length < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astActivityList_i = 0; astActivityList_i < this.wNum; astActivityList_i++)
            {
                ret = this.astActivityList[astActivityList_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || Activity.CURRVERSION < cutVer)
        {
            cutVer = Activity.CURRVERSION;
        }

        /* check cutversion */
        if (Activity.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNum */
        {
            ret = srcBuf.readUInt16(ref this.wNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astActivityList */
        {
            if (200 < this.wNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astActivityList.Length < this.wNum)
            {
                astActivityList = new ActivityUnit[this.wNum];
                for (Int32 astActivityList_i = 0; astActivityList_i < this.wNum; astActivityList_i++)
                {
                    astActivityList[astActivityList_i] = new ActivityUnit();
                }
            }

            for (Int32 astActivityList_i = 0; astActivityList_i < this.wNum; astActivityList_i++)
            {
                ret = this.astActivityList[astActivityList_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 185;
    /* entry version info */

    /* length of string or wstring */
}


public class DBActivity : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iKey; // 写死:1234
    public Activity stActivity;
    public UInt32 dwUpdateTime; // 更新时间

    /* construct methods */
    public DBActivity()
    {
        stActivity = new Activity();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBActivity.CURRVERSION < cutVer)
        {
            cutVer = DBActivity.CURRVERSION;
        }

        /* check cutversion */
        if (DBActivity.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iKey */
        {
            ret = destBuf.writeInt32(this.iKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stActivity */
        {
            ret = this.stActivity.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.dwUpdateTime */
        if (DBActivity.VERSION_dwUpdateTime <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBActivity.CURRVERSION < cutVer)
        {
            cutVer = DBActivity.CURRVERSION;
        }

        /* check cutversion */
        if (DBActivity.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iKey */
        {
            ret = srcBuf.readInt32(ref this.iKey);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stActivity */
        {
            ret = this.stActivity.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwUpdateTime */
        if (DBActivity.VERSION_dwUpdateTime <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwUpdateTime);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwUpdateTime = 0;
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 185;
    /* entry version info */
    public static readonly uint VERSION_dwUpdateTime = 107;

    /* length of string or wstring */
}


public class PkStarItem : tsf4g_csharp_interface
{
    /* public members */
    public UInt64 ullGID; // 角色GID
    public Int32 iSeasonNo; // 赛季编号

    /* construct methods */
    public PkStarItem()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.ullGID = 0;

        this.iSeasonNo = 1;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PkStarItem.CURRVERSION < cutVer)
        {
            cutVer = PkStarItem.CURRVERSION;
        }

        /* check cutversion */
        if (PkStarItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ullGID */
        {
            ret = destBuf.writeUInt64(this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.iSeasonNo */
        {
            ret = destBuf.writeInt32(this.iSeasonNo);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PkStarItem.CURRVERSION < cutVer)
        {
            cutVer = PkStarItem.CURRVERSION;
        }

        /* check cutversion */
        if (PkStarItem.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ullGID */
        {
            ret = srcBuf.readUInt64(ref this.ullGID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iSeasonNo */
        {
            ret = srcBuf.readInt32(ref this.iSeasonNo);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class PkStarList : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwNum; // GID个数
    public PkStarItem[] astPkStarItem; // 当前星星级别下的用户数据列表

    /* construct methods */
    public PkStarList()
    {
        astPkStarItem = new PkStarItem[100000];
        for (int astPkStarItem_i = 0; astPkStarItem_i < 100000; astPkStarItem_i++)
        {
            astPkStarItem[astPkStarItem_i] = new PkStarItem();
        }

    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.dwNum = 0;

        for (Int32 astPkStarItem_i = 0; astPkStarItem_i < 100000; astPkStarItem_i++)
        {
            ret = this.astPkStarItem[astPkStarItem_i].construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PkStarList.CURRVERSION < cutVer)
        {
            cutVer = PkStarList.CURRVERSION;
        }

        /* check cutversion */
        if (PkStarList.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwNum */
        {
            ret = destBuf.writeUInt32(this.dwNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.astPkStarItem */
        {
            if (100000 < this.dwNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPkStarItem.Length < this.dwNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
            }

            for (Int32 astPkStarItem_i = 0; astPkStarItem_i < this.dwNum; astPkStarItem_i++)
            {
                ret = this.astPkStarItem[astPkStarItem_i].pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    TdrDebug.tdrTrace();
#endif
                    return ret;
                }
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || PkStarList.CURRVERSION < cutVer)
        {
            cutVer = PkStarList.CURRVERSION;
        }

        /* check cutversion */
        if (PkStarList.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwNum */
        {
            ret = srcBuf.readUInt32(ref this.dwNum);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.astPkStarItem */
        {
            if (100000 < this.dwNum)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }

            if (astPkStarItem.Length < this.dwNum)
            {
                astPkStarItem = new PkStarItem[this.dwNum];
                for (Int32 astPkStarItem_i = 0; astPkStarItem_i < this.dwNum; astPkStarItem_i++)
                {
                    astPkStarItem[astPkStarItem_i] = new PkStarItem();
                }
            }

            for (Int32 astPkStarItem_i = 0; astPkStarItem_i < this.dwNum; astPkStarItem_i++)
            {
                ret = this.astPkStarItem[astPkStarItem_i].unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


public class DBPkStar : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iStar; // 匹配星星
    public PkStarList stPkStarList; // 当前匹配星星下的数据列表

    /* construct methods */
    public DBPkStar()
    {
        stPkStarList = new PkStarList();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.iStar = 0;

        ret = this.stPkStarList.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPkStar.CURRVERSION < cutVer)
        {
            cutVer = DBPkStar.CURRVERSION;
        }

        /* check cutversion */
        if (DBPkStar.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iStar */
        {
            ret = destBuf.writeInt32(this.iStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        /* pack member: this.stPkStarList */
        {
            ret = this.stPkStarList.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                TdrDebug.tdrTrace();
#endif
                return ret;
            }
        }

        return ret;
    }


    public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DBPkStar.CURRVERSION < cutVer)
        {
            cutVer = DBPkStar.CURRVERSION;
        }

        /* check cutversion */
        if (DBPkStar.BASEVERSION > cutVer)
        {
#if (DEBUG)
            TdrDebug.tdrTrace();
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iStar */
        {
            ret = srcBuf.readInt32(ref this.iStar);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stPkStarList */
        {
            ret = this.stPkStarList.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* meta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /* entry version info */

    /* length of string or wstring */
}


}
