/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 7 */
/* metalib md5sum: cba5061e49b1bf9ffe9eafe9414d50f6 */

/* creation time: Thu Jun 19 17:46:08 2014 */
/* tdr version: 2.6.8, build at 20140425 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace tdir_cs
{


public enum  TDirChildType
{
    ChildType_Category = 0, // 分类节点
    ChildType_Leaf = 1, // 叶子节点
    ReservedID = 2, // 用于版本号同步调整
}
public enum  TDirFlagBitMap
{
    Flag_Heavy = 16, // 繁忙
    Flag_Crowed = 32, // 拥挤
    Flag_Fine = 64, // 良好
    Flag_Unavailable = 128, // 维护
}
public enum  GameSvr_Status
{
    UNAVAILABLE = 0, // 维护
    FINE = 1, // 良好
    HEAVY = 2, // 爆满
    CROWDED = 3, // 拥塞
}
public enum  TDRNODE_BOOL
{
    TDRNODE_BOOL_FALSE = 0, // false
    TDRNODE_BOOL_TRUE = 1, // true
}


/* 应用自定义静态数据 */
public class AppStaticAttr : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szBuf; // 自定义数据

    /* construct methods */
    public AppStaticAttr()
    {
        szBuf = new byte[256];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AppStaticAttr.CURRVERSION < cutVer)
        {
            cutVer = AppStaticAttr.CURRVERSION;
        }

        /* check cutversion */
        if (AppStaticAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szBuf */
        {
            /* record sizeinfo position */
            Int32 sizePos4szBuf = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szBuf = destBuf.getUsedSize();

            Int32 realSize4szBuf = TdrTypeUtil.cstrlen(this.szBuf);

            if (realSize4szBuf >= 256)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szBuf, realSize4szBuf);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szBuf */
            Int32 size4szBuf = destBuf.getUsedSize() - beginPos4szBuf;
            ret = destBuf.writeUInt32((UInt32)(size4szBuf), sizePos4szBuf);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AppStaticAttr.CURRVERSION < cutVer)
        {
            cutVer = AppStaticAttr.CURRVERSION;
        }

        /* check cutversion */
        if (AppStaticAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szBuf */
        {
            /* get sizeinfo for this.szBuf */
            UInt32 size4szBuf = 0;
            ret = srcBuf.readUInt32(ref size4szBuf);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szBuf > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szBuf > this.szBuf.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szBuf)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szBuf, (int)size4szBuf);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szBuf[(int)size4szBuf - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szBuf = TdrTypeUtil.cstrlen(this.szBuf) + 1;
            if (size4szBuf != realSize4szBuf)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AppStaticAttr.CURRVERSION < cutVer)
        {
            cutVer = AppStaticAttr.CURRVERSION;
        }

        /* check cutversion */
        if (AppStaticAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.szBuf */
        {
            Int32 size4szBuf = 256;

            /* load */
            ret = srcBuf.readCString(ref this.szBuf, (int)size4szBuf);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.szBuf */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szBuf]", this.szBuf);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 应用自定义动态数据 */
public class AppDynamicAttr : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wBufLen; // 自定义数据长度
    public sbyte[] szBuf; // 自定义数据

    /* construct methods */
    public AppDynamicAttr()
    {
        szBuf = new sbyte[1024];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AppDynamicAttr.CURRVERSION < cutVer)
        {
            cutVer = AppDynamicAttr.CURRVERSION;
        }

        /* check cutversion */
        if (AppDynamicAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wBufLen */
        {
            ret = destBuf.writeUInt16(this.wBufLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szBuf */
        {
            if (1024 < this.wBufLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 szBuf_i = 0; szBuf_i < this.wBufLen; szBuf_i++)
            {
                ret = destBuf.writeInt8(this.szBuf[szBuf_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AppDynamicAttr.CURRVERSION < cutVer)
        {
            cutVer = AppDynamicAttr.CURRVERSION;
        }

        /* check cutversion */
        if (AppDynamicAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wBufLen */
        {
            ret = srcBuf.readUInt16(ref this.wBufLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szBuf */
        {
            if (1024 < this.wBufLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 szBuf_i = 0; szBuf_i < this.wBufLen; szBuf_i++)
            {
                ret = srcBuf.readInt8(ref this.szBuf[szBuf_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || AppDynamicAttr.CURRVERSION < cutVer)
        {
            cutVer = AppDynamicAttr.CURRVERSION;
        }

        /* check cutversion */
        if (AppDynamicAttr.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.wBufLen */
        {
            ret = srcBuf.readUInt16(ref this.wBufLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szBuf */
        {
            for (Int32 szBuf_i = 0; szBuf_i < 1024; szBuf_i++)
            {
                ret = srcBuf.readInt8(ref this.szBuf[szBuf_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.wBufLen */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wBufLen]", "{0:d}", this.wBufLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szBuf */
        if (1024 < this.wBufLen)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[szBuf]", this.wBufLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 szBuf_i = 0; szBuf_i < this.wBufLen; szBuf_i++)
        {
            ret = destBuf.sprintf("0x{0:x2}", this.szBuf[szBuf_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 分类节点静态信息 */
public class CategoryStaticInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szName; // 分类节点名称
    public Int32 iCltAttr; // 客户端定义数据节点含义
    public Int32 iCltAttr1; // 客户端定义数据1节点含义
    public AppStaticAttr stAppAttr; // 应用自定义静态属性
    public byte[] szCurVersion; // 当前可以登录游戏的最低版本号；为空时，不做限制
    public byte bWindowAttr; // TCLS客户端以此区分不同大区的服务器
    public byte bAppID; // 产品线ID
    public UInt32 dwCltFlag; // TCLS客户端标志位

    /* construct methods */
    public CategoryStaticInfo()
    {
        szName = new byte[64];
        stAppAttr = new AppStaticAttr();
        szCurVersion = new byte[64];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* this.szName have no defaultvalue */

        this.iCltAttr = 0;

        this.iCltAttr1 = 0;

        ret = this.stAppAttr.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* this.szCurVersion have no defaultvalue */

        this.bWindowAttr = 1;

        this.bAppID = 1;

        this.dwCltFlag = 0;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryStaticInfo.CURRVERSION < cutVer)
        {
            cutVer = CategoryStaticInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryStaticInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szName = destBuf.getUsedSize();

            Int32 realSize4szName = TdrTypeUtil.cstrlen(this.szName);

            if (realSize4szName >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szName, realSize4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szName */
            Int32 size4szName = destBuf.getUsedSize() - beginPos4szName;
            ret = destBuf.writeUInt32((UInt32)(size4szName), sizePos4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.iCltAttr */
        {
            ret = destBuf.writeInt32(this.iCltAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iCltAttr1 */
        {
            ret = destBuf.writeInt32(this.iCltAttr1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stAppAttr */
        {
            ret = this.stAppAttr.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szCurVersion */
        if (CategoryStaticInfo.VERSION_szCurVersion <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szCurVersion = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szCurVersion = destBuf.getUsedSize();

            Int32 realSize4szCurVersion = TdrTypeUtil.cstrlen(this.szCurVersion);

            if (realSize4szCurVersion >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szCurVersion, realSize4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szCurVersion */
            Int32 size4szCurVersion = destBuf.getUsedSize() - beginPos4szCurVersion;
            ret = destBuf.writeUInt32((UInt32)(size4szCurVersion), sizePos4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.bWindowAttr */
        if (CategoryStaticInfo.VERSION_bWindowAttr <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bWindowAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bAppID */
        if (CategoryStaticInfo.VERSION_bAppID <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bAppID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwCltFlag */
        if (CategoryStaticInfo.VERSION_dwCltFlag <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwCltFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryStaticInfo.CURRVERSION < cutVer)
        {
            cutVer = CategoryStaticInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryStaticInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szName */
        {
            /* get sizeinfo for this.szName */
            UInt32 size4szName = 0;
            ret = srcBuf.readUInt32(ref size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szName > this.szName.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szName)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szName, (int)size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szName[(int)size4szName - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szName = TdrTypeUtil.cstrlen(this.szName) + 1;
            if (size4szName != realSize4szName)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.iCltAttr */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCltAttr1 */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stAppAttr */
        {
            ret = this.stAppAttr.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szCurVersion */
        if (CategoryStaticInfo.VERSION_szCurVersion <= cutVer)
        {
            /* get sizeinfo for this.szCurVersion */
            UInt32 size4szCurVersion = 0;
            ret = srcBuf.readUInt32(ref size4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szCurVersion > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szCurVersion > this.szCurVersion.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szCurVersion)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szCurVersion, (int)size4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szCurVersion[(int)size4szCurVersion - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szCurVersion = TdrTypeUtil.cstrlen(this.szCurVersion) + 1;
            if (size4szCurVersion != realSize4szCurVersion)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szCurVersion have no defaultvalue */
        }

        /* unpack member: this.bWindowAttr */
        if (CategoryStaticInfo.VERSION_bWindowAttr <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bWindowAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bWindowAttr = 1;
        }

        /* unpack member: this.bAppID */
        if (CategoryStaticInfo.VERSION_bAppID <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bAppID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bAppID = 1;
        }

        /* unpack member: this.dwCltFlag */
        if (CategoryStaticInfo.VERSION_dwCltFlag <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwCltFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwCltFlag = 0;
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryStaticInfo.CURRVERSION < cutVer)
        {
            cutVer = CategoryStaticInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryStaticInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.szName */
        {
            Int32 size4szName = 64;

            /* load */
            ret = srcBuf.readCString(ref this.szName, (int)size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        /* load member: this.iCltAttr */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iCltAttr1 */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stAppAttr */
        {
            ret = this.stAppAttr.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szCurVersion */
        if (CategoryStaticInfo.VERSION_szCurVersion <= cutVer)
        {
            Int32 size4szCurVersion = 64;

            /* load */
            ret = srcBuf.readCString(ref this.szCurVersion, (int)size4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }
        else /* set default value */
        {
                /* this.szCurVersion have no defaultvalue */
        }

        /* load member: this.bWindowAttr */
        if (CategoryStaticInfo.VERSION_bWindowAttr <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bWindowAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bWindowAttr = 1;
        }

        /* load member: this.bAppID */
        if (CategoryStaticInfo.VERSION_bAppID <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bAppID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bAppID = 1;
        }

        /* load member: this.dwCltFlag */
        if (CategoryStaticInfo.VERSION_dwCltFlag <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwCltFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwCltFlag = 0;
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.szName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szName]", this.szName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iCltAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iCltAttr]", "{0:d}", this.iCltAttr);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iCltAttr1 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iCltAttr1]", "{0:d}", this.iCltAttr1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stAppAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stAppAttr]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stAppAttr */
        if (0 > indent)
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.szCurVersion */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szCurVersion]", this.szCurVersion);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bWindowAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bWindowAttr]", "0x{0:x2}", this.bWindowAttr);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bAppID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bAppID]", "0x{0:x2}", this.bAppID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwCltFlag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwCltFlag]", "{0:d}", this.dwCltFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
    public static readonly uint VERSION_szCurVersion = 7;
    public static readonly uint VERSION_bWindowAttr = 7;
    public static readonly uint VERSION_bAppID = 7;
    public static readonly uint VERSION_dwCltFlag = 7;
}


/* 分类节点动态信息,暂未用,保留 */
public class CategoryDynamicInfo : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chStatus; // 节点状态
    public AppDynamicAttr stAppAttr; // 应用自定义动态属性

    /* construct methods */
    public CategoryDynamicInfo()
    {
        stAppAttr = new AppDynamicAttr();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.chStatus = 1;

        ret = this.stAppAttr.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryDynamicInfo.CURRVERSION < cutVer)
        {
            cutVer = CategoryDynamicInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryDynamicInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chStatus */
        {
            ret = destBuf.writeInt8(this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stAppAttr */
        {
            ret = this.stAppAttr.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryDynamicInfo.CURRVERSION < cutVer)
        {
            cutVer = CategoryDynamicInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryDynamicInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chStatus */
        {
            ret = srcBuf.readInt8(ref this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stAppAttr */
        {
            ret = this.stAppAttr.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryDynamicInfo.CURRVERSION < cutVer)
        {
            cutVer = CategoryDynamicInfo.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryDynamicInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.chStatus */
        {
            ret = srcBuf.readInt8(ref this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stAppAttr */
        {
            ret = this.stAppAttr.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.chStatus */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[chStatus]", "0x{0:x2}", this.chStatus);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stAppAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stAppAttr]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stAppAttr */
        if (0 > indent)
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 1;
    /*  entry version info */
}


/* 分类节点基本信息 */
public class CategoryEntry : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ulCategoryID; // 分类节点ID
    public UInt32 ulParentID; // 父分类节点的id
    public UInt32 dwFlag; // 节点标志位
    public CategoryStaticInfo stStaticInfo; // 分类节点静态数据
    public CategoryDynamicInfo stDynamicInfo; // 分类节点动态数据

    /* construct methods */
    public CategoryEntry()
    {
        stStaticInfo = new CategoryStaticInfo();
        stDynamicInfo = new CategoryDynamicInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.ulCategoryID = 0;

        this.ulParentID = 0;

        this.dwFlag = 0;

        ret = this.stStaticInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        ret = this.stDynamicInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryEntry.CURRVERSION < cutVer)
        {
            cutVer = CategoryEntry.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ulCategoryID */
        {
            ret = destBuf.writeUInt32(this.ulCategoryID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.ulParentID */
        {
            ret = destBuf.writeUInt32(this.ulParentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwFlag */
        {
            ret = destBuf.writeUInt32(this.dwFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stStaticInfo */
        {
            ret = this.stStaticInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stDynamicInfo */
        {
            ret = this.stDynamicInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryEntry.CURRVERSION < cutVer)
        {
            cutVer = CategoryEntry.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ulCategoryID */
        {
            ret = srcBuf.readUInt32(ref this.ulCategoryID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ulParentID */
        {
            ret = srcBuf.readUInt32(ref this.ulParentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwFlag */
        {
            ret = srcBuf.readUInt32(ref this.dwFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stStaticInfo */
        {
            ret = this.stStaticInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDynamicInfo */
        {
            ret = this.stDynamicInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CategoryEntry.CURRVERSION < cutVer)
        {
            cutVer = CategoryEntry.CURRVERSION;
        }

        /* check cutversion */
        if (CategoryEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ulCategoryID */
        {
            ret = srcBuf.readUInt32(ref this.ulCategoryID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ulParentID */
        {
            ret = srcBuf.readUInt32(ref this.ulParentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.dwFlag */
        {
            ret = srcBuf.readUInt32(ref this.dwFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stStaticInfo */
        {
            ret = this.stStaticInfo.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stDynamicInfo */
        {
            ret = this.stDynamicInfo.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ulCategoryID */
        ret = TdrBufUtil.printTdrIP(ref destBuf, indent, separator, "[ulCategoryID]", this.ulCategoryID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.ulParentID */
        ret = TdrBufUtil.printTdrIP(ref destBuf, indent, separator, "[ulParentID]", this.ulParentID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwFlag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwFlag]", "{0:d}", this.dwFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stStaticInfo */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stStaticInfo]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stStaticInfo */
        if (0 > indent)
        {
            ret = this.stStaticInfo.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stStaticInfo.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.stDynamicInfo */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stDynamicInfo]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stDynamicInfo */
        if (0 > indent)
        {
            ret = this.stDynamicInfo.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stDynamicInfo.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
}


/* 叶子节点的静态信息 */
public class LeafStaticInfo : tsf4g_csharp_interface
{
    /* public members */
    public byte[] szName; // 叶子节点名称
    public UInt32 dwBitmapMask; // 分区激活检查位，全0时不需要检查；bit n为1时，对应tacc中玩家激活信息bit n为1时允许进入游戏，否则不允许进入
    public byte[] szVirConnUrl; // 保留给客户端使用
    public byte[] szCurVersion; // 当前可以登录游戏的最低版本号；为空时，不做限制
    public Int32 iCltAttr; // 客户端定义数据含义
    public Int32 iCltAttr1; // 客户端定义数据1含义
    public AppStaticAttr stAppAttr; // 应用自定义静态属性
    public byte bWindowAttr; // TCLS客户端以此区分不同大区的服务器
    public byte bAppID; // 产品线ID
    public UInt32 dwCltFlag; // TCLS客户端标志位

    /* construct methods */
    public LeafStaticInfo()
    {
        szName = new byte[64];
        szVirConnUrl = new byte[512];
        szCurVersion = new byte[64];
        stAppAttr = new AppStaticAttr();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* this.szName have no defaultvalue */

        this.dwBitmapMask = 0;

        /* this.szVirConnUrl have no defaultvalue */

        /* this.szCurVersion have no defaultvalue */

        this.iCltAttr = 0;

        this.iCltAttr1 = 0;

        ret = this.stAppAttr.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        this.bWindowAttr = 1;

        this.bAppID = 1;

        this.dwCltFlag = 0;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafStaticInfo.CURRVERSION < cutVer)
        {
            cutVer = LeafStaticInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LeafStaticInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.szName */
        {
            /* record sizeinfo position */
            Int32 sizePos4szName = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szName = destBuf.getUsedSize();

            Int32 realSize4szName = TdrTypeUtil.cstrlen(this.szName);

            if (realSize4szName >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szName, realSize4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szName */
            Int32 size4szName = destBuf.getUsedSize() - beginPos4szName;
            ret = destBuf.writeUInt32((UInt32)(size4szName), sizePos4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.dwBitmapMask */
        {
            ret = destBuf.writeUInt32(this.dwBitmapMask);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szVirConnUrl */
        if (LeafStaticInfo.VERSION_szVirConnUrl <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szVirConnUrl = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szVirConnUrl = destBuf.getUsedSize();

            Int32 realSize4szVirConnUrl = TdrTypeUtil.cstrlen(this.szVirConnUrl);

            if (realSize4szVirConnUrl >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szVirConnUrl, realSize4szVirConnUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szVirConnUrl */
            Int32 size4szVirConnUrl = destBuf.getUsedSize() - beginPos4szVirConnUrl;
            ret = destBuf.writeUInt32((UInt32)(size4szVirConnUrl), sizePos4szVirConnUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szCurVersion */
        {
            /* record sizeinfo position */
            Int32 sizePos4szCurVersion = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szCurVersion = destBuf.getUsedSize();

            Int32 realSize4szCurVersion = TdrTypeUtil.cstrlen(this.szCurVersion);

            if (realSize4szCurVersion >= 64)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szCurVersion, realSize4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szCurVersion */
            Int32 size4szCurVersion = destBuf.getUsedSize() - beginPos4szCurVersion;
            ret = destBuf.writeUInt32((UInt32)(size4szCurVersion), sizePos4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.iCltAttr */
        {
            ret = destBuf.writeInt32(this.iCltAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iCltAttr1 */
        {
            ret = destBuf.writeInt32(this.iCltAttr1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stAppAttr */
        {
            ret = this.stAppAttr.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bWindowAttr */
        if (LeafStaticInfo.VERSION_bWindowAttr <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bWindowAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bAppID */
        if (LeafStaticInfo.VERSION_bAppID <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bAppID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwCltFlag */
        if (LeafStaticInfo.VERSION_dwCltFlag <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwCltFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafStaticInfo.CURRVERSION < cutVer)
        {
            cutVer = LeafStaticInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LeafStaticInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.szName */
        {
            /* get sizeinfo for this.szName */
            UInt32 size4szName = 0;
            ret = srcBuf.readUInt32(ref size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szName > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szName > this.szName.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szName)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szName, (int)size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szName[(int)size4szName - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szName = TdrTypeUtil.cstrlen(this.szName) + 1;
            if (size4szName != realSize4szName)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.dwBitmapMask */
        {
            ret = srcBuf.readUInt32(ref this.dwBitmapMask);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szVirConnUrl */
        if (LeafStaticInfo.VERSION_szVirConnUrl <= cutVer)
        {
            /* get sizeinfo for this.szVirConnUrl */
            UInt32 size4szVirConnUrl = 0;
            ret = srcBuf.readUInt32(ref size4szVirConnUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szVirConnUrl > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szVirConnUrl > this.szVirConnUrl.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szVirConnUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szVirConnUrl, (int)size4szVirConnUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szVirConnUrl[(int)size4szVirConnUrl - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szVirConnUrl = TdrTypeUtil.cstrlen(this.szVirConnUrl) + 1;
            if (size4szVirConnUrl != realSize4szVirConnUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szVirConnUrl have no defaultvalue */
        }

        /* unpack member: this.szCurVersion */
        {
            /* get sizeinfo for this.szCurVersion */
            UInt32 size4szCurVersion = 0;
            ret = srcBuf.readUInt32(ref size4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szCurVersion > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szCurVersion > this.szCurVersion.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szCurVersion)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szCurVersion, (int)size4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szCurVersion[(int)size4szCurVersion - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szCurVersion = TdrTypeUtil.cstrlen(this.szCurVersion) + 1;
            if (size4szCurVersion != realSize4szCurVersion)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.iCltAttr */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCltAttr1 */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stAppAttr */
        {
            ret = this.stAppAttr.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bWindowAttr */
        if (LeafStaticInfo.VERSION_bWindowAttr <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bWindowAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bWindowAttr = 1;
        }

        /* unpack member: this.bAppID */
        if (LeafStaticInfo.VERSION_bAppID <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bAppID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bAppID = 1;
        }

        /* unpack member: this.dwCltFlag */
        if (LeafStaticInfo.VERSION_dwCltFlag <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwCltFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwCltFlag = 0;
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafStaticInfo.CURRVERSION < cutVer)
        {
            cutVer = LeafStaticInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LeafStaticInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.szName */
        {
            Int32 size4szName = 64;

            /* load */
            ret = srcBuf.readCString(ref this.szName, (int)size4szName);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        /* load member: this.dwBitmapMask */
        {
            ret = srcBuf.readUInt32(ref this.dwBitmapMask);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szVirConnUrl */
        if (LeafStaticInfo.VERSION_szVirConnUrl <= cutVer)
        {
            Int32 size4szVirConnUrl = 512;

            /* load */
            ret = srcBuf.readCString(ref this.szVirConnUrl, (int)size4szVirConnUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }
        else /* set default value */
        {
                /* this.szVirConnUrl have no defaultvalue */
        }

        /* load member: this.szCurVersion */
        {
            Int32 size4szCurVersion = 64;

            /* load */
            ret = srcBuf.readCString(ref this.szCurVersion, (int)size4szCurVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        /* load member: this.iCltAttr */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iCltAttr1 */
        {
            ret = srcBuf.readInt32(ref this.iCltAttr1);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stAppAttr */
        {
            ret = this.stAppAttr.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.bWindowAttr */
        if (LeafStaticInfo.VERSION_bWindowAttr <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bWindowAttr);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bWindowAttr = 1;
        }

        /* load member: this.bAppID */
        if (LeafStaticInfo.VERSION_bAppID <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bAppID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bAppID = 1;
        }

        /* load member: this.dwCltFlag */
        if (LeafStaticInfo.VERSION_dwCltFlag <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwCltFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwCltFlag = 0;
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.szName */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szName]", this.szName);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwBitmapMask */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwBitmapMask]", "{0:d}", this.dwBitmapMask);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szVirConnUrl */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szVirConnUrl]", this.szVirConnUrl);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szCurVersion */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szCurVersion]", this.szCurVersion);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iCltAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iCltAttr]", "{0:d}", this.iCltAttr);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iCltAttr1 */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iCltAttr1]", "{0:d}", this.iCltAttr1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stAppAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stAppAttr]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stAppAttr */
        if (0 > indent)
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.bWindowAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bWindowAttr]", "0x{0:x2}", this.bWindowAttr);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bAppID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bAppID]", "0x{0:x2}", this.bAppID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwCltFlag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwCltFlag]", "{0:d}", this.dwCltFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
    public static readonly uint VERSION_szVirConnUrl = 4;
    public static readonly uint VERSION_bWindowAttr = 7;
    public static readonly uint VERSION_bAppID = 7;
    public static readonly uint VERSION_dwCltFlag = 7;
}


/* 叶子节点动态信息 */
public class LeafDynamicInfo : tsf4g_csharp_interface
{
    /* public members */
    public sbyte chStatus; // 叶子节点状态
    public byte[] szConnectUrl; // 接入url，eg:tcp://192.168.1.100,若上报数据为空则使用默认值；有多个URL时，使用逗号分隔
    public byte[] szPingUrl; // 该字符串保存用于网速测试的IP和端口
    public AppDynamicAttr stAppAttr; // 应用自定义动态属性

    /* construct methods */
    public LeafDynamicInfo()
    {
        szConnectUrl = new byte[512];
        szPingUrl = new byte[512];
        stAppAttr = new AppDynamicAttr();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.chStatus = 1;

        /* this.szConnectUrl have no defaultvalue */

        /* this.szPingUrl have no defaultvalue */

        ret = this.stAppAttr.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafDynamicInfo.CURRVERSION < cutVer)
        {
            cutVer = LeafDynamicInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LeafDynamicInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.chStatus */
        {
            ret = destBuf.writeInt8(this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szConnectUrl */
        {
            /* record sizeinfo position */
            Int32 sizePos4szConnectUrl = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szConnectUrl = destBuf.getUsedSize();

            Int32 realSize4szConnectUrl = TdrTypeUtil.cstrlen(this.szConnectUrl);

            if (realSize4szConnectUrl >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szConnectUrl, realSize4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szConnectUrl */
            Int32 size4szConnectUrl = destBuf.getUsedSize() - beginPos4szConnectUrl;
            ret = destBuf.writeUInt32((UInt32)(size4szConnectUrl), sizePos4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPingUrl */
        if (LeafDynamicInfo.VERSION_szPingUrl <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szPingUrl = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPingUrl = destBuf.getUsedSize();

            Int32 realSize4szPingUrl = TdrTypeUtil.cstrlen(this.szPingUrl);

            if (realSize4szPingUrl >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPingUrl, realSize4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szPingUrl */
            Int32 size4szPingUrl = destBuf.getUsedSize() - beginPos4szPingUrl;
            ret = destBuf.writeUInt32((UInt32)(size4szPingUrl), sizePos4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.stAppAttr */
        {
            ret = this.stAppAttr.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafDynamicInfo.CURRVERSION < cutVer)
        {
            cutVer = LeafDynamicInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LeafDynamicInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.chStatus */
        {
            ret = srcBuf.readInt8(ref this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szConnectUrl */
        {
            /* get sizeinfo for this.szConnectUrl */
            UInt32 size4szConnectUrl = 0;
            ret = srcBuf.readUInt32(ref size4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szConnectUrl > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szConnectUrl > this.szConnectUrl.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szConnectUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szConnectUrl, (int)size4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szConnectUrl[(int)size4szConnectUrl - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szConnectUrl = TdrTypeUtil.cstrlen(this.szConnectUrl) + 1;
            if (size4szConnectUrl != realSize4szConnectUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szPingUrl */
        if (LeafDynamicInfo.VERSION_szPingUrl <= cutVer)
        {
            /* get sizeinfo for this.szPingUrl */
            UInt32 size4szPingUrl = 0;
            ret = srcBuf.readUInt32(ref size4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPingUrl > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPingUrl > this.szPingUrl.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPingUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPingUrl, (int)size4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPingUrl[(int)size4szPingUrl - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPingUrl = TdrTypeUtil.cstrlen(this.szPingUrl) + 1;
            if (size4szPingUrl != realSize4szPingUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szPingUrl have no defaultvalue */
        }

        /* unpack member: this.stAppAttr */
        {
            ret = this.stAppAttr.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafDynamicInfo.CURRVERSION < cutVer)
        {
            cutVer = LeafDynamicInfo.CURRVERSION;
        }

        /* check cutversion */
        if (LeafDynamicInfo.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.chStatus */
        {
            ret = srcBuf.readInt8(ref this.chStatus);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szConnectUrl */
        {
            Int32 size4szConnectUrl = 512;

            /* load */
            ret = srcBuf.readCString(ref this.szConnectUrl, (int)size4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        /* load member: this.szPingUrl */
        if (LeafDynamicInfo.VERSION_szPingUrl <= cutVer)
        {
            Int32 size4szPingUrl = 512;

            /* load */
            ret = srcBuf.readCString(ref this.szPingUrl, (int)size4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }
        else /* set default value */
        {
                /* this.szPingUrl have no defaultvalue */
        }

        /* load member: this.stAppAttr */
        {
            ret = this.stAppAttr.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.chStatus */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[chStatus]", "0x{0:x2}", this.chStatus);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szConnectUrl */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szConnectUrl]", this.szConnectUrl);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szPingUrl */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPingUrl]", this.szPingUrl);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stAppAttr */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stAppAttr]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stAppAttr */
        if (0 > indent)
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stAppAttr.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
    public static readonly uint VERSION_szPingUrl = 7;
}


/* 叶子节点基本信息 */
public class LeafEntry : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 ulLeafID; // 叶子节点ID
    public UInt32 ulParentID; // 父分类节点的id
    public UInt32 dwFlag; // 节点标志位
    public LeafStaticInfo stStaticInfo; // 叶子节点静态数据
    public LeafDynamicInfo stDynamicInfo; // 叶子节点动态数据

    /* construct methods */
    public LeafEntry()
    {
        stStaticInfo = new LeafStaticInfo();
        stDynamicInfo = new LeafDynamicInfo();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.ulLeafID = 0;

        this.ulParentID = 0;

        this.dwFlag = 0;

        ret = this.stStaticInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        ret = this.stDynamicInfo.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafEntry.CURRVERSION < cutVer)
        {
            cutVer = LeafEntry.CURRVERSION;
        }

        /* check cutversion */
        if (LeafEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.ulLeafID */
        {
            ret = destBuf.writeUInt32(this.ulLeafID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.ulParentID */
        {
            ret = destBuf.writeUInt32(this.ulParentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwFlag */
        {
            ret = destBuf.writeUInt32(this.dwFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stStaticInfo */
        {
            ret = this.stStaticInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stDynamicInfo */
        {
            ret = this.stDynamicInfo.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafEntry.CURRVERSION < cutVer)
        {
            cutVer = LeafEntry.CURRVERSION;
        }

        /* check cutversion */
        if (LeafEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.ulLeafID */
        {
            ret = srcBuf.readUInt32(ref this.ulLeafID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.ulParentID */
        {
            ret = srcBuf.readUInt32(ref this.ulParentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwFlag */
        {
            ret = srcBuf.readUInt32(ref this.dwFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stStaticInfo */
        {
            ret = this.stStaticInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stDynamicInfo */
        {
            ret = this.stDynamicInfo.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || LeafEntry.CURRVERSION < cutVer)
        {
            cutVer = LeafEntry.CURRVERSION;
        }

        /* check cutversion */
        if (LeafEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.ulLeafID */
        {
            ret = srcBuf.readUInt32(ref this.ulLeafID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.ulParentID */
        {
            ret = srcBuf.readUInt32(ref this.ulParentID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.dwFlag */
        {
            ret = srcBuf.readUInt32(ref this.dwFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stStaticInfo */
        {
            ret = this.stStaticInfo.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stDynamicInfo */
        {
            ret = this.stDynamicInfo.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.ulLeafID */
        ret = TdrBufUtil.printTdrIP(ref destBuf, indent, separator, "[ulLeafID]", this.ulLeafID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.ulParentID */
        ret = TdrBufUtil.printTdrIP(ref destBuf, indent, separator, "[ulParentID]", this.ulParentID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwFlag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwFlag]", "{0:d}", this.dwFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stStaticInfo */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stStaticInfo]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stStaticInfo */
        if (0 > indent)
        {
            ret = this.stStaticInfo.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stStaticInfo.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.stDynamicInfo */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stDynamicInfo]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stDynamicInfo */
        if (0 > indent)
        {
            ret = this.stDynamicInfo.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stDynamicInfo.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
}


/* 目录树数据 */
public class TreeNodeData
{
    /* public members */
    public CategoryEntry stCategory; // 分类节点数据
    public LeafEntry stLeaf; // 叶子节点数据
    public sbyte chReserved; // 这个字段实现cs和node版本号同步调整

    /* public methods */
    public TreeNodeData()
    {
        stCategory = null;
        stLeaf = null;
    }

    /*   Construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.stCategory)
            {
                this.stCategory = new CategoryEntry();
            }

            ret = this.stCategory.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.stLeaf)
            {
                this.stLeaf = new LeafEntry();
            }

            ret = this.stLeaf.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }
        else if (2 == selector)
        {
            this.chReserved = 0;
        }

        return ret;
    }

    /*   pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || TreeNodeData.CURRVERSION < cutVer)
        {
            cutVer = TreeNodeData.CURRVERSION;
        }

        /* check cutversion */
        if (TreeNodeData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.stCategory)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.stCategory.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.stLeaf)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.stLeaf.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (TreeNodeData.VERSION_chReserved <= cutVer)
            {
                ret = destBuf.writeInt8(this.chReserved);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || TreeNodeData.CURRVERSION < cutVer)
        {
            cutVer = TreeNodeData.CURRVERSION;
        }

        /* check cutversion */
        if (TreeNodeData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.stCategory)
            {
                this.stCategory = new CategoryEntry();
            }


            ret = this.stCategory.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.stLeaf)
            {
                this.stLeaf = new LeafEntry();
            }


            ret = this.stLeaf.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (TreeNodeData.VERSION_chReserved <= cutVer)
            {
                ret = srcBuf.readInt8(ref this.chReserved);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
            else /* set default value */
            {
                this.chReserved = 0;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = load(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   load function */
    public TdrError.ErrorType load(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        /* adjust cutversion */
        if (0 == cutVer || TreeNodeData.CURRVERSION < cutVer)
        {
            cutVer = TreeNodeData.CURRVERSION;
        }

        /* check cutversion */
        if (TreeNodeData.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.stCategory)
            {
                this.stCategory = new CategoryEntry();
            }


            ret = this.stCategory.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.stLeaf)
            {
                this.stLeaf = new LeafEntry();
            }


            ret = this.stLeaf.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            if (TreeNodeData.VERSION_chReserved <= cutVer)
            {
                ret = srcBuf.readInt8(ref this.chReserved);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
            else /* set default value */
            {
                this.chReserved = 0;
            }
        }

        return ret;
    }

    TdrError.ErrorType visualize(Int64 selector, ref string buffer, int indent, char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(selector, ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /*   visualize function */
    public TdrError.ErrorType visualize(Int64 selector, ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (0 == selector)
        {
            if (null == this.stCategory)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stCategory]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* visualize children of this.stCategory */
            if (0 > indent)
            {
                ret = this.stCategory.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.stCategory.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (1 == selector)
        {
            if (null == this.stLeaf)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stLeaf]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* visualize children of this.stLeaf */
            if (0 > indent)
            {
                ret = this.stLeaf.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.stLeaf.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (2 == selector)
        {
            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[chReserved]", "0x{0:x2}", this.chReserved);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    /* version infomation */
    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
    public static readonly uint VERSION_chReserved = 7;
}


/* 目录树节点 */
public class TreeNodeEntry : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNodeType; // 节点类型
    public TreeNodeData stNodeData; // 节点数据

    /* construct methods */
    public TreeNodeEntry()
    {
        stNodeData = new TreeNodeData();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.wNodeType = 0;

        Int64 selector4stNodeData = this.wNodeType;
        ret = this.stNodeData.construct(selector4stNodeData);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TreeNodeEntry.CURRVERSION < cutVer)
        {
            cutVer = TreeNodeEntry.CURRVERSION;
        }

        /* check cutversion */
        if (TreeNodeEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNodeType */
        {
            ret = destBuf.writeUInt16(this.wNodeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stNodeData */
        {
            Int64 selector4stNodeData = this.wNodeType;
            ret = this.stNodeData.pack(selector4stNodeData, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TreeNodeEntry.CURRVERSION < cutVer)
        {
            cutVer = TreeNodeEntry.CURRVERSION;
        }

        /* check cutversion */
        if (TreeNodeEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNodeType */
        {
            ret = srcBuf.readUInt16(ref this.wNodeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stNodeData */
        {
            Int64 selector4stNodeData = this.wNodeType;
            ret = this.stNodeData.unpack(selector4stNodeData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TreeNodeEntry.CURRVERSION < cutVer)
        {
            cutVer = TreeNodeEntry.CURRVERSION;
        }

        /* check cutversion */
        if (TreeNodeEntry.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.wNodeType */
        {
            ret = srcBuf.readUInt16(ref this.wNodeType);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stNodeData */
        {
            Int64 selector4stNodeData = this.wNodeType;
            ret = this.stNodeData.load(selector4stNodeData, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.wNodeType */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wNodeType]", "{0:d}", this.wNodeType);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.stNodeData */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stNodeData]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stNodeData */
        Int64 selector4stNodeData = this.wNodeType;
        if (0 > indent)
        {
            ret = this.stNodeData.visualize(selector4stNodeData, ref destBuf, indent, separator);
        } else
        {
            ret = this.stNodeData.visualize(selector4stNodeData, ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
}


}
