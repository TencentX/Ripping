/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 7 */
/* metalib md5sum: cba5061e49b1bf9ffe9eafe9414d50f6 */

/* creation time: Thu Jun 19 17:46:08 2014 */
/* tdr version: 2.6.8, build at 20140425 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace tdir_cs
{


public enum  TDir_ERRCODE
{
    TDir_SUCCESS = 0, // 成功
    TDir_FRAMEHEAD_UNPACK_FAIL = 1, // TCONND包头解码失败
    TDir_FRAMEHEAD_PACK_FAIL = 2, // TCONND包头打包失败
    TDir_TBUS_SEND_FAIL = 3, // TBUS发送失败
    TDir_MSG_INVALID = 4, // TBUS发送失败
    TDir_UNKNOWN_SERVICEID = 5, // 未知 serviceID
    TDir_CS_UNPACK_FAIL = 1000, // 解客户端请求包失败
    TDir_CS_PACK_FAIL = 1001, // 打包客户端回应包失败
    TDir_NODE_PACK_FAIL = 1002, // 打包目录节点失败
    TDir_ROUTING_MSG_FAIL = 1003, // 路由消息失败
    TDir_SS_UNPACK_FAIL = 2000, // 解服务器上报消息失败
    TDir_SS_INVALID_REPORTID = 2001, // 服务器上报ID非法
    TDir_SS_INVALID_REPORTDATA = 2002, // 服务器上报数据非法
}


/* 叶子节点上报基本信息 */
public class GSBASE : tsf4g_csharp_interface
{
    /* public members */
    public Int32 iMaxOnline; // 最大容量
    public Int32 iCurrentOnline; // 当前在线
    public byte[] szConnectUrl; // 接入url:eg:tcp://192.168.1.100:8080,若上报数据为空则使用默认值
    public byte[] szPingUrl; // 该字符串保存用于网速测试的IP和端口

    /* construct methods */
    public GSBASE()
    {
        szConnectUrl = new byte[512];
        szPingUrl = new byte[512];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GSBASE.CURRVERSION < cutVer)
        {
            cutVer = GSBASE.CURRVERSION;
        }

        /* check cutversion */
        if (GSBASE.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.iMaxOnline */
        {
            ret = destBuf.writeInt32(this.iMaxOnline);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iCurrentOnline */
        {
            ret = destBuf.writeInt32(this.iCurrentOnline);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szConnectUrl */
        {
            /* record sizeinfo position */
            Int32 sizePos4szConnectUrl = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szConnectUrl = destBuf.getUsedSize();

            Int32 realSize4szConnectUrl = TdrTypeUtil.cstrlen(this.szConnectUrl);

            if (realSize4szConnectUrl >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szConnectUrl, realSize4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szConnectUrl */
            Int32 size4szConnectUrl = destBuf.getUsedSize() - beginPos4szConnectUrl;
            ret = destBuf.writeUInt32((UInt32)(size4szConnectUrl), sizePos4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.szPingUrl */
        if (GSBASE.VERSION_szPingUrl <= cutVer)
        {
            /* record sizeinfo position */
            Int32 sizePos4szPingUrl = destBuf.getUsedSize();

            /* reserve space for sizeinfo */
            ret = destBuf.reserve(sizeof(UInt32));
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* record real-data's begin postion in buf */
            Int32 beginPos4szPingUrl = destBuf.getUsedSize();

            Int32 realSize4szPingUrl = TdrTypeUtil.cstrlen(this.szPingUrl);

            if (realSize4szPingUrl >= 512)
            {
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* pack */
            ret = destBuf.writeCString(this.szPingUrl, realSize4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* gurantee string or wstring terminated with null character */
            ret = destBuf.writeUInt8(0x00);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.szPingUrl */
            Int32 size4szPingUrl = destBuf.getUsedSize() - beginPos4szPingUrl;
            ret = destBuf.writeUInt32((UInt32)(size4szPingUrl), sizePos4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GSBASE.CURRVERSION < cutVer)
        {
            cutVer = GSBASE.CURRVERSION;
        }

        /* check cutversion */
        if (GSBASE.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.iMaxOnline */
        {
            ret = srcBuf.readInt32(ref this.iMaxOnline);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iCurrentOnline */
        {
            ret = srcBuf.readInt32(ref this.iCurrentOnline);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szConnectUrl */
        {
            /* get sizeinfo for this.szConnectUrl */
            UInt32 size4szConnectUrl = 0;
            ret = srcBuf.readUInt32(ref size4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szConnectUrl > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szConnectUrl > this.szConnectUrl.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szConnectUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szConnectUrl, (int)size4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szConnectUrl[(int)size4szConnectUrl - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szConnectUrl = TdrTypeUtil.cstrlen(this.szConnectUrl) + 1;
            if (size4szConnectUrl != realSize4szConnectUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }

        /* unpack member: this.szPingUrl */
        if (GSBASE.VERSION_szPingUrl <= cutVer)
        {
            /* get sizeinfo for this.szPingUrl */
            UInt32 size4szPingUrl = 0;
            ret = srcBuf.readUInt32(ref size4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4szPingUrl > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            /* check whether sizeinfo is valid */
            if ((int)size4szPingUrl > this.szPingUrl.GetLength(0))
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
            }

            /* string or wstring must contains a null character */
            if (1 > size4szPingUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
            }

            /* unpack */
            ret = srcBuf.readCString(ref this.szPingUrl, (int)size4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* check whether string-content is consistent with sizeinfo */
            if (0 != this.szPingUrl[(int)size4szPingUrl - 1])
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
            Int32 realSize4szPingUrl = TdrTypeUtil.cstrlen(this.szPingUrl) + 1;
            if (size4szPingUrl != realSize4szPingUrl)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
            }
        }
        else /* set default value */
        {
                /* this.szPingUrl have no defaultvalue */
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GSBASE.CURRVERSION < cutVer)
        {
            cutVer = GSBASE.CURRVERSION;
        }

        /* check cutversion */
        if (GSBASE.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.iMaxOnline */
        {
            ret = srcBuf.readInt32(ref this.iMaxOnline);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iCurrentOnline */
        {
            ret = srcBuf.readInt32(ref this.iCurrentOnline);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szConnectUrl */
        {
            Int32 size4szConnectUrl = 512;

            /* load */
            ret = srcBuf.readCString(ref this.szConnectUrl, (int)size4szConnectUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }

        /* load member: this.szPingUrl */
        if (GSBASE.VERSION_szPingUrl <= cutVer)
        {
            Int32 size4szPingUrl = 512;

            /* load */
            ret = srcBuf.readCString(ref this.szPingUrl, (int)size4szPingUrl);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

        }
        else /* set default value */
        {
                /* this.szPingUrl have no defaultvalue */
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.iMaxOnline */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iMaxOnline]", "{0:d}", this.iMaxOnline);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iCurrentOnline */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iCurrentOnline]", "{0:d}", this.iCurrentOnline);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szConnectUrl */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szConnectUrl]", this.szConnectUrl);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szPingUrl */
        ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPingUrl]", this.szPingUrl);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 4;
    /*  entry version info */
    public static readonly uint VERSION_szPingUrl = 4;
}


}
