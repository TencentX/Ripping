/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 7 */
/* metalib md5sum: cba5061e49b1bf9ffe9eafe9414d50f6 */

/* creation time: Thu Jun 19 17:46:08 2014 */
/* tdr version: 2.6.8, build at 20140425 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace tdir_cs
{


public interface tsf4g_csharp_interface
{
    TdrError.ErrorType construct();
    TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize, uint cutVer);
    TdrError.ErrorType pack(ref TdrWriteBuf destBuf, uint cutVer);
    TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize, uint cutVer);
    TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer);
    TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize, uint cutVer);
    TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer);
    TdrError.ErrorType visualize(ref string buffer,int indent , char separator);
    TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator);
    TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo);
    TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo);
}


public enum  TPDU_CMD
{
    TPDU_CMD_NONE = 0,
    TPDU_CMD_Dir = 100, // Dir消息包头选择字
}
public enum  TDIR_PACK_FLAG
{
    TDIR_PACK_FLAG_FIRST_PACKAGE = 1,
    TDIR_PACK_FLAG_COMPRESS_TREE = 2,
    TDIR_PACK_FLAG_LAST_PACKAGE = 128,
}
public enum  TDir_MSG_ID
{
    TDir_MSG_GetDirTree_Req = 6001, // 请求目录树所有节点静态数据
    TDir_MSG_GetDirTree_Rsp = 6002, // 返回目录树所有节点静态数据
    TDir_MSG_Reserve = 9999, // 保留值，仅作为与tdir_node.xml 版本同步
}
public enum  ISP_CODE
{
    ISP_NONE = 0, // 未知
    ISP_CTC = 1, // 电信
    ISP_CNC = 2, // 联通
    ISP_CERNET = 3, // 教育网
    ISP_BJDXT = 4, // 电信通
    ISP_MOBILE = 5, // 移动
    ISP_TIETONG = 6, // 铁通
    ISP_TOPWAY = 7, // 天威
    ISP_UNIVERSITY = 8, // 大学
    ISP_FOUNDERBN = 9, // 方正宽带
    ISP_GWBN = 10, // 长宽
    ISP_PCCW = 11, // 电讯盈科
    ISP_BGCTV = 12, // 歌华有线
    ISP_CTM = 13, // 澳门电讯
    ISP_FTG = 14, // 科盈电讯
    ISP_SMARTONE = 15, // 数码通
    ISP_OCN = 16, // 东方有线
    ISP_NEWWORLDTEL = 17, // 新世界电讯
    ISP_WHARFTT = 18, // 九仓电讯
    ISP_CITYTEL = 19, // 城市电讯
    ISP_ICABLE = 20, // 香港有线
    ISP_CNLINK = 21, // 互联通
    ISP_CITICPACIFIC = 22, // 中信泰富
    ISP_HUTCHISONTEL = 23, // 和记电讯
    ISP_CONSULTLINK = 24, // 咨询联网
    ISP_NOVA = 25, // 南凌
    ISP_PACNET = 26, // 亚太环通
    ISP_NEWNETWORK = 27, // 新网络
    ISP_DYX = 28, // 第一线
    ISP_SUNNYVISION = 29, // 新力讯
    ISP_EVEROKGROUP = 30, // 恒通国际
    ISP_SINGTEL = 31, // 新电
    ISP_QVSP = 32, // 互联优势
    ISP_INFOTECH = 33, // 香港资讯科技
    ISP_CHINATEL = 34, // 中国电信(香港)
}
public enum  PROVINCE_CODE
{
    PROVINCE_NONE = 0,
    PROVINCE_HEILONGJIANG = 1,
    PROVINCE_JILIN = 2,
    PROVINCE_LIAONING = 3,
    PROVINCE_BEIJING = 4,
    PROVINCE_TIANJING = 5,
    PROVINCE_HEBEI = 6,
    PROVINCE_SHANDONG = 7,
    PROVINCE_SHANXI = 8,
    PROVINCE_HAINAN = 9,
    PROVINCE_SHANGXI = 10,
    PROVINCE_NEIMENGGU = 11,
    PROVINCE_NINGXIA = 12,
    PROVINCE_GANSU = 13,
    PROVINCE_QINGHAI = 14,
    PROVINCE_XINJIANG = 15,
    PROVINCE_XIZANG = 16,
    PROVINCE_SICHUAN = 17,
    PROVINCE_CHONGQING = 18,
    PROVINCE_HUBEI = 19,
    PROVINCE_HENAN = 20,
    PROVINCE_TAIWAN = 21,
    PROVINCE_ANHUI = 22,
    PROVINCE_JIANGSU = 23,
    PROVINCE_SHANGHAI = 24,
    PROVINCE_ZHEJIANG = 25,
    PROVINCE_HUNAN = 26,
    PROVINCE_JIANGXI = 27,
    PROVINCE_FUJIAN = 28,
    PROVINCE_GUIZHOU = 29,
    PROVINCE_YUNAN = 30,
    PROVINCE_GUANGDONG = 31,
    PROVINCE_GUANGXI = 32,
    PROVINCE_HONGKONG = 33,
    PROVINCE_MACAU = 34,
}


public class TPDUBase : tsf4g_csharp_interface
{
    /* public members */
    public byte bMagic;
    public byte bVersion;
    public byte bCmd;
    public byte bHeadLen;
    public Int32 iBodyLen;
    public Int32 iServiceId; // 业务ID

    /* construct methods */
    public TPDUBase()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        this.bMagic = 10;

        this.bVersion = 1;

        this.bCmd = 0;

        this.bHeadLen = 0;

        this.iBodyLen = 0;

        this.iServiceId = 0;

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TPDUBase.CURRVERSION < cutVer)
        {
            cutVer = TPDUBase.CURRVERSION;
        }

        /* check cutversion */
        if (TPDUBase.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.bMagic */
        {
            ret = destBuf.writeUInt8(this.bMagic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bVersion */
        {
            ret = destBuf.writeUInt8(this.bVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bCmd */
        {
            ret = destBuf.writeUInt8(this.bCmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bHeadLen */
        {
            ret = destBuf.writeUInt8(this.bHeadLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iBodyLen */
        {
            ret = destBuf.writeInt32(this.iBodyLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iServiceId */
        if (TPDUBase.VERSION_iServiceId <= cutVer)
        {
            ret = destBuf.writeInt32(this.iServiceId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TPDUBase.CURRVERSION < cutVer)
        {
            cutVer = TPDUBase.CURRVERSION;
        }

        /* check cutversion */
        if (TPDUBase.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.bMagic */
        {
            ret = srcBuf.readUInt8(ref this.bMagic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bVersion */
        {
            ret = srcBuf.readUInt8(ref this.bVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bCmd */
        {
            ret = srcBuf.readUInt8(ref this.bCmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bHeadLen */
        {
            ret = srcBuf.readUInt8(ref this.bHeadLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iBodyLen */
        {
            ret = srcBuf.readInt32(ref this.iBodyLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iServiceId */
        if (TPDUBase.VERSION_iServiceId <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iServiceId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iServiceId = 0;
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || TPDUBase.CURRVERSION < cutVer)
        {
            cutVer = TPDUBase.CURRVERSION;
        }

        /* check cutversion */
        if (TPDUBase.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.bMagic */
        {
            ret = srcBuf.readUInt8(ref this.bMagic);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.bVersion */
        {
            ret = srcBuf.readUInt8(ref this.bVersion);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.bCmd */
        {
            ret = srcBuf.readUInt8(ref this.bCmd);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.bHeadLen */
        {
            ret = srcBuf.readUInt8(ref this.bHeadLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iBodyLen */
        {
            ret = srcBuf.readInt32(ref this.iBodyLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iServiceId */
        if (TPDUBase.VERSION_iServiceId <= cutVer)
        {
            ret = srcBuf.readInt32(ref this.iServiceId);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.iServiceId = 0;
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.bMagic */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bMagic]", "0x{0:x2}", this.bMagic);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bVersion */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bVersion]", "0x{0:x2}", this.bVersion);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bCmd */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bCmd]", "0x{0:x2}", this.bCmd);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bHeadLen */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bHeadLen]", "0x{0:x2}", this.bHeadLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iBodyLen */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iBodyLen]", "{0:d}", this.iBodyLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iServiceId */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iServiceId]", "{0:d}", this.iServiceId);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 5;
    /*  entry version info */
    public static readonly uint VERSION_iServiceId = 5;
}


public class DirMsgHead : tsf4g_csharp_interface
{
    /* public members */
    public UInt32 dwMsgID; // 消息ID，用于作为消息体成员的选择器
    public Int32 iSeq; // 消息序列号，响应消息其值取请求消息中的序号
    public Int32 iErrorCode; // 零表示处理成功,其它为错误码(参考tdir_protocol_common.h中TDir_ERRCODE宏),出错包体为空
    public byte bIspCode; // 网络提供商,下行包有效
    public byte bProvinceCode; // 网络所在地,下行包有效

    /* construct methods */
    public DirMsgHead()
    {
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DirMsgHead.CURRVERSION < cutVer)
        {
            cutVer = DirMsgHead.CURRVERSION;
        }

        /* check cutversion */
        if (DirMsgHead.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.dwMsgID */
        {
            ret = destBuf.writeUInt32(this.dwMsgID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iSeq */
        {
            ret = destBuf.writeInt32(this.iSeq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.iErrorCode */
        {
            ret = destBuf.writeInt32(this.iErrorCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bIspCode */
        if (DirMsgHead.VERSION_bIspCode <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bIspCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.bProvinceCode */
        if (DirMsgHead.VERSION_bProvinceCode <= cutVer)
        {
            ret = destBuf.writeUInt8(this.bProvinceCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DirMsgHead.CURRVERSION < cutVer)
        {
            cutVer = DirMsgHead.CURRVERSION;
        }

        /* check cutversion */
        if (DirMsgHead.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.dwMsgID */
        {
            ret = srcBuf.readUInt32(ref this.dwMsgID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iSeq */
        {
            ret = srcBuf.readInt32(ref this.iSeq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.iErrorCode */
        {
            ret = srcBuf.readInt32(ref this.iErrorCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.bIspCode */
        if (DirMsgHead.VERSION_bIspCode <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bIspCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bIspCode = 0;
        }

        /* unpack member: this.bProvinceCode */
        if (DirMsgHead.VERSION_bProvinceCode <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bProvinceCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bProvinceCode = 0;
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || DirMsgHead.CURRVERSION < cutVer)
        {
            cutVer = DirMsgHead.CURRVERSION;
        }

        /* check cutversion */
        if (DirMsgHead.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.dwMsgID */
        {
            ret = srcBuf.readUInt32(ref this.dwMsgID);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iSeq */
        {
            ret = srcBuf.readInt32(ref this.iSeq);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.iErrorCode */
        {
            ret = srcBuf.readInt32(ref this.iErrorCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.bIspCode */
        if (DirMsgHead.VERSION_bIspCode <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bIspCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bIspCode = 0;
        }

        /* load member: this.bProvinceCode */
        if (DirMsgHead.VERSION_bProvinceCode <= cutVer)
        {
            ret = srcBuf.readUInt8(ref this.bProvinceCode);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.bProvinceCode = 0;
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.dwMsgID */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwMsgID]", "{0:d}", this.dwMsgID);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iSeq */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iSeq]", "{0:d}", this.iSeq);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.iErrorCode */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iErrorCode]", "{0:d}", this.iErrorCode);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bIspCode */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bIspCode]", "0x{0:x2}", this.bIspCode);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.bProvinceCode */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bProvinceCode]", "0x{0:x2}", this.bProvinceCode);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 2;
    /*  entry version info */
    public static readonly uint VERSION_bIspCode = 2;
    public static readonly uint VERSION_bProvinceCode = 2;
}


public class TPDUExt
{
    /* public members */
    public DirMsgHead stDirHead;

    /* public methods */
    public TPDUExt()
    {
        stDirHead = null;
    }

    /*   Construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (100 == selector)
        {
            if (null == this.stDirHead)
            {
                this.stDirHead = new DirMsgHead();
            }

            ret = this.stDirHead.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    /*   pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || TPDUExt.CURRVERSION < cutVer)
        {
            cutVer = TPDUExt.CURRVERSION;
        }

        /* check cutversion */
        if (TPDUExt.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (100 == selector)
        {
            if (null == this.stDirHead)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = this.stDirHead.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || TPDUExt.CURRVERSION < cutVer)
        {
            cutVer = TPDUExt.CURRVERSION;
        }

        /* check cutversion */
        if (TPDUExt.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (100 == selector)
        {
            if (null == this.stDirHead)
            {
                this.stDirHead = new DirMsgHead();
            }


            ret = this.stDirHead.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = load(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   load function */
    public TdrError.ErrorType load(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        /* adjust cutversion */
        if (0 == cutVer || TPDUExt.CURRVERSION < cutVer)
        {
            cutVer = TPDUExt.CURRVERSION;
        }

        /* check cutversion */
        if (TPDUExt.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (100 == selector)
        {
            if (null == this.stDirHead)
            {
                this.stDirHead = new DirMsgHead();
            }


            ret = this.stDirHead.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    TdrError.ErrorType visualize(Int64 selector, ref string buffer, int indent, char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(selector, ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /*   visualize function */
    public TdrError.ErrorType visualize(Int64 selector, ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (100 == selector)
        {
            if (null == this.stDirHead)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stDirHead]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* visualize children of this.stDirHead */
            if (0 > indent)
            {
                ret = this.stDirHead.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.stDirHead.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* version infomation */
    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 2;
    /*  entry version info */
}


public class CldMsgHead : tsf4g_csharp_interface
{
    /* public members */
    public TPDUBase stBase;
    public TPDUExt stExt;

    /* construct methods */
    public CldMsgHead()
    {
        stBase = new TPDUBase();
        stExt = new TPDUExt();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        ret = this.stBase.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        Int64 selector4stExt = this.stBase.bCmd;
        ret = this.stExt.construct(selector4stExt);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CldMsgHead.CURRVERSION < cutVer)
        {
            cutVer = CldMsgHead.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsgHead.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.stBase */
        {
            ret = this.stBase.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.stExt */
        {
            Int64 selector4stExt = this.stBase.bCmd;
            ret = this.stExt.pack(selector4stExt, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CldMsgHead.CURRVERSION < cutVer)
        {
            cutVer = CldMsgHead.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsgHead.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.stBase */
        {
            ret = this.stBase.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stExt */
        {
            Int64 selector4stExt = this.stBase.bCmd;
            ret = this.stExt.unpack(selector4stExt, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CldMsgHead.CURRVERSION < cutVer)
        {
            cutVer = CldMsgHead.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsgHead.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.stBase */
        {
            ret = this.stBase.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stExt */
        {
            Int64 selector4stExt = this.stBase.bCmd;
            ret = this.stExt.load(selector4stExt, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.stBase */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stBase]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stBase */
        if (0 > indent)
        {
            ret = this.stBase.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stBase.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.stExt */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stExt]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stExt */
        Int64 selector4stExt = this.stBase.bCmd;
        if (0 > indent)
        {
            ret = this.stExt.visualize(selector4stExt, ref destBuf, indent, separator);
        } else
        {
            ret = this.stExt.visualize(selector4stExt, ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 5;
    /*  entry version info */
}


/* 返回目录树所有节点静态数据+动态数据 */
public class GetDirTreeRsp : tsf4g_csharp_interface
{
    /* public members */
    public UInt16 wNodeCount; // 目录树总节点数量
    public UInt32 dwNodeNetDataLen; // 目录树节点网络字节序数据的总长度
    public sbyte chPackFlag; // 包标志:(1)第一个分包bit0置位,最后一个分包bit7置位;(2)bit1置位表示压缩目录树,否则不压缩
    public UInt16 wPackNodes; // 如果目录树不压缩,表示本数据包携带的目录节点个数,否则保留该字段,固定填入0
    public UInt16 wDataLen; // 携带的节点列表数据长度
    public sbyte[] szNodeData; // 携带的详细目录节点列表: [TreeNodeEntry]
    public UInt32 dwRsvedBufLen; // 对于v2.4.1版本,该字段保存节点列表数据长度;对于其它版本,保留
    public sbyte[] szRsvedBuf; // 对于v2.4.1版本,该字段保存节点列表数据;对于其它版本,保留

    /* construct methods */
    public GetDirTreeRsp()
    {
        szNodeData = new sbyte[64000];
        szRsvedBuf = new sbyte[524288];
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /*no need to  set defaultvalue */

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GetDirTreeRsp.CURRVERSION < cutVer)
        {
            cutVer = GetDirTreeRsp.CURRVERSION;
        }

        /* check cutversion */
        if (GetDirTreeRsp.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* pack member: this.wNodeCount */
        {
            ret = destBuf.writeUInt16(this.wNodeCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.dwNodeNetDataLen */
        if (GetDirTreeRsp.VERSION_dwNodeNetDataLen <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwNodeNetDataLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.chPackFlag */
        {
            ret = destBuf.writeInt8(this.chPackFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.wPackNodes */
        {
            ret = destBuf.writeUInt16(this.wPackNodes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.wDataLen */
        {
            ret = destBuf.writeUInt16(this.wDataLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szNodeData */
        {
            if (64000 < this.wDataLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 szNodeData_i = 0; szNodeData_i < this.wDataLen; szNodeData_i++)
            {
                ret = destBuf.writeInt8(this.szNodeData[szNodeData_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        /* pack member: this.dwRsvedBufLen */
        if (GetDirTreeRsp.VERSION_dwRsvedBufLen <= cutVer)
        {
            ret = destBuf.writeUInt32(this.dwRsvedBufLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        /* pack member: this.szRsvedBuf */
        if (GetDirTreeRsp.VERSION_szRsvedBuf <= cutVer)
        {
            if (524288 < this.dwRsvedBufLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 szRsvedBuf_i = 0; szRsvedBuf_i < this.dwRsvedBufLen; szRsvedBuf_i++)
            {
                ret = destBuf.writeInt8(this.szRsvedBuf[szRsvedBuf_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GetDirTreeRsp.CURRVERSION < cutVer)
        {
            cutVer = GetDirTreeRsp.CURRVERSION;
        }

        /* check cutversion */
        if (GetDirTreeRsp.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* unpack member: this.wNodeCount */
        {
            ret = srcBuf.readUInt16(ref this.wNodeCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.dwNodeNetDataLen */
        if (GetDirTreeRsp.VERSION_dwNodeNetDataLen <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwNodeNetDataLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwNodeNetDataLen = 0;
        }

        /* unpack member: this.chPackFlag */
        {
            ret = srcBuf.readInt8(ref this.chPackFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wPackNodes */
        {
            ret = srcBuf.readUInt16(ref this.wPackNodes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.wDataLen */
        {
            ret = srcBuf.readUInt16(ref this.wDataLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.szNodeData */
        {
            if (64000 < this.wDataLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 szNodeData_i = 0; szNodeData_i < this.wDataLen; szNodeData_i++)
            {
                ret = srcBuf.readInt8(ref this.szNodeData[szNodeData_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* unpack member: this.dwRsvedBufLen */
        if (GetDirTreeRsp.VERSION_dwRsvedBufLen <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwRsvedBufLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwRsvedBufLen = 0;
        }

        /* unpack member: this.szRsvedBuf */
        if (GetDirTreeRsp.VERSION_szRsvedBuf <= cutVer)
        {
            if (524288 < this.dwRsvedBufLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
            for (Int32 szRsvedBuf_i = 0; szRsvedBuf_i < this.dwRsvedBufLen; szRsvedBuf_i++)
            {
                ret = srcBuf.readInt8(ref this.szRsvedBuf[szRsvedBuf_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
            if (524288 < this.dwRsvedBufLen)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || GetDirTreeRsp.CURRVERSION < cutVer)
        {
            cutVer = GetDirTreeRsp.CURRVERSION;
        }

        /* check cutversion */
        if (GetDirTreeRsp.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        /* load member: this.wNodeCount */
        {
            ret = srcBuf.readUInt16(ref this.wNodeCount);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.dwNodeNetDataLen */
        if (GetDirTreeRsp.VERSION_dwNodeNetDataLen <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwNodeNetDataLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwNodeNetDataLen = 0;
        }

        /* load member: this.chPackFlag */
        {
            ret = srcBuf.readInt8(ref this.chPackFlag);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.wPackNodes */
        {
            ret = srcBuf.readUInt16(ref this.wPackNodes);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.wDataLen */
        {
            ret = srcBuf.readUInt16(ref this.wDataLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.szNodeData */
        {
            for (Int32 szNodeData_i = 0; szNodeData_i < 64000; szNodeData_i++)
            {
                ret = srcBuf.readInt8(ref this.szNodeData[szNodeData_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }

        /* load member: this.dwRsvedBufLen */
        if (GetDirTreeRsp.VERSION_dwRsvedBufLen <= cutVer)
        {
            ret = srcBuf.readUInt32(ref this.dwRsvedBufLen);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else /* set default value */
        {
            this.dwRsvedBufLen = 0;
        }

        /* load member: this.szRsvedBuf */
        if (GetDirTreeRsp.VERSION_szRsvedBuf <= cutVer)
        {
            for (Int32 szRsvedBuf_i = 0; szRsvedBuf_i < 524288; szRsvedBuf_i++)
            {
                ret = srcBuf.readInt8(ref this.szRsvedBuf[szRsvedBuf_i]);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
        }
        else /* set default value */
        {
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.wNodeCount */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wNodeCount]", "{0:d}", this.wNodeCount);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwNodeNetDataLen */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwNodeNetDataLen]", "{0:d}", this.dwNodeNetDataLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.chPackFlag */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[chPackFlag]", "0x{0:x2}", this.chPackFlag);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.wPackNodes */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wPackNodes]", "{0:d}", this.wPackNodes);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.wDataLen */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wDataLen]", "{0:d}", this.wDataLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szNodeData */
        if (64000 < this.wDataLen)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[szNodeData]", this.wDataLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 szNodeData_i = 0; szNodeData_i < this.wDataLen; szNodeData_i++)
        {
            ret = destBuf.sprintf("0x{0:x2}", this.szNodeData[szNodeData_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.dwRsvedBufLen */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwRsvedBufLen]", "{0:d}", this.dwRsvedBufLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize member: this.szRsvedBuf */
        if (524288 < this.dwRsvedBufLen)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
        }
        ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[szRsvedBuf]", this.dwRsvedBufLen);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }
        for (Int32 szRsvedBuf_i = 0; szRsvedBuf_i < this.dwRsvedBufLen; szRsvedBuf_i++)
        {
            ret = destBuf.sprintf("0x{0:x2}", this.szRsvedBuf[szRsvedBuf_i]);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        ret = destBuf.sprintf("{0}",separator);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 3;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
    public static readonly uint VERSION_dwNodeNetDataLen = 7;
    public static readonly uint VERSION_dwRsvedBufLen = 6;
    public static readonly uint VERSION_szRsvedBuf = 6;
}


public class CldMsgBody
{
    /* public members */
    public GetDirTreeRsp stGetDirTreeRsp;
    public TreeNodeEntry stReserve; // 这个字段实现cs和node版本号同步调整

    /* public methods */
    public CldMsgBody()
    {
        stGetDirTreeRsp = null;
        stReserve = null;
    }

    /*   Construct function */
    public TdrError.ErrorType construct(Int64 selector)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (6002 == selector)
        {
            if (null == this.stGetDirTreeRsp)
            {
                this.stGetDirTreeRsp = new GetDirTreeRsp();
            }

            ret = this.stGetDirTreeRsp.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }
        else if (9999 == selector)
        {
            if (null == this.stReserve)
            {
                this.stReserve = new TreeNodeEntry();
            }

            ret = this.stReserve.construct();
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }
        }

        return ret;
    }

    /*   pack function */
    public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || CldMsgBody.CURRVERSION < cutVer)
        {
            cutVer = CldMsgBody.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsgBody.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (6002 == selector)
        {
            if (CldMsgBody.VERSION_stGetDirTreeRsp <= cutVer)
            {
                if (null == this.stGetDirTreeRsp)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
                }

                ret = this.stGetDirTreeRsp.pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }
        else if (9999 == selector)
        {
            if (CldMsgBody.VERSION_stReserve <= cutVer)
            {
                if (null == this.stReserve)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
                }

                ret = this.stReserve.pack(ref destBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   unpack function */
    public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        /* adjust cutversion */
        if (0 == cutVer || CldMsgBody.CURRVERSION < cutVer)
        {
            cutVer = CldMsgBody.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsgBody.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (6002 == selector)
        {
            if (CldMsgBody.VERSION_stGetDirTreeRsp <= cutVer)
            {
            if (null == this.stGetDirTreeRsp)
            {
                this.stGetDirTreeRsp = new GetDirTreeRsp();
            }


                ret = this.stGetDirTreeRsp.unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
            else /* set default value */
            {
                ret = this.stGetDirTreeRsp.construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }
        else if (9999 == selector)
        {
            if (CldMsgBody.VERSION_stReserve <= cutVer)
            {
            if (null == this.stReserve)
            {
                this.stReserve = new TreeNodeEntry();
            }


                ret = this.stReserve.unpack(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
            else /* set default value */
            {
                ret = this.stReserve.construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
        TdrError.ErrorType ret = load(selector, ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    /*   load function */
    public TdrError.ErrorType load(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        /* adjust cutversion */
        if (0 == cutVer || CldMsgBody.CURRVERSION < cutVer)
        {
            cutVer = CldMsgBody.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsgBody.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }

        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (6002 == selector)
        {
            if (CldMsgBody.VERSION_stGetDirTreeRsp <= cutVer)
            {
            if (null == this.stGetDirTreeRsp)
            {
                this.stGetDirTreeRsp = new GetDirTreeRsp();
            }


                ret = this.stGetDirTreeRsp.load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
            else /* set default value */
            {
                ret = this.stGetDirTreeRsp.construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }
        else if (9999 == selector)
        {
            if (CldMsgBody.VERSION_stReserve <= cutVer)
            {
            if (null == this.stReserve)
            {
                this.stReserve = new TreeNodeEntry();
            }


                ret = this.stReserve.load(ref srcBuf, cutVer);
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
                    return ret;
                }
            }
            else /* set default value */
            {
                ret = this.stReserve.construct();
                if (TdrError.ErrorType.TDR_NO_ERROR != ret)
                {
#if (DEBUG)
                    StackTrace st = new StackTrace(true);
                    for (int i = 0; i < st.FrameCount; i++)
                    {
                        if (null != st.GetFrame(i).GetFileName())
                        {
                            Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                        }
                    }
#endif
                    return ret;
                }
            }
        }

        return ret;
    }

    TdrError.ErrorType visualize(Int64 selector, ref string buffer, int indent, char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(selector, ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /*   visualize function */
    public TdrError.ErrorType visualize(Int64 selector, ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        if (6002 == selector)
        {
            if (null == this.stGetDirTreeRsp)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stGetDirTreeRsp]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* visualize children of this.stGetDirTreeRsp */
            if (0 > indent)
            {
                ret = this.stGetDirTreeRsp.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.stGetDirTreeRsp.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }
        else if (9999 == selector)
        {
            if (null == this.stReserve)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return TdrError.ErrorType.TDR_ERR_ARG_IS_NULL;
            }

            ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stReserve]", true);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* visualize children of this.stReserve */
            if (0 > indent)
            {
                ret = this.stReserve.visualize(ref destBuf, indent, separator);
            } else
            {
                ret = this.stReserve.visualize(ref destBuf, indent + 1, separator);
            }
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* version infomation */
    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
    public static readonly uint VERSION_stGetDirTreeRsp = 3;
    public static readonly uint VERSION_stReserve = 7;
}


/* DIR与客户端通信消息 */
public class CldMsg : tsf4g_csharp_interface
{
    /* public members */
    public CldMsgHead stHead;
    public CldMsgBody stBody;

    /* construct methods */
    public CldMsg()
    {
        stHead = new CldMsgHead();
        stBody = new CldMsgBody();
    }

    /* public methods */
    public TdrError.ErrorType construct()
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        ret = this.stHead.construct();
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        Int64 selector4stBody = this.stHead.stExt.stDirHead.dwMsgID;
        ret = this.stBody.construct(selector4stBody);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref byte[] buffer, int size,ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
        {
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
        TdrError.ErrorType ret = pack(ref destBuf, cutVer);
        if (ret == TdrError.ErrorType.TDR_NO_ERROR)
        {
            buffer = destBuf.getBeginPtr();

            usedSize = destBuf.getUsedSize();
        }

        return ret;
    }

    public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* adjust cutversion */
        if (0 == cutVer || CldMsg.CURRVERSION < cutVer)
        {
            cutVer = CldMsg.CURRVERSION;
        }

        /* check cutversion */
        if (CldMsg.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
        }
        if (TPDUBase.BASEVERSION > cutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_CONFILICT;
        }

        int savedBeginPos = destBuf.getUsedSize();

        /* pack member: this.stHead */
        {
            /* record sizeinfo position */
            Int32 sizePos4stHead = savedBeginPos + 3;
            /* record real-data's begin postion in buf */
            Int32 beginPos4stHead = destBuf.getUsedSize();

            ret = this.stHead.pack(ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.stHead */
            Int32 size4stHead = destBuf.getUsedSize() - beginPos4stHead;
            ret = destBuf.writeUInt8((byte)(size4stHead), sizePos4stHead);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* pack member: this.stBody */
        {
            Int64 selector4stBody = this.stHead.stExt.stDirHead.dwMsgID;
            /* record sizeinfo position */
            Int32 sizePos4stBody = savedBeginPos + 4;
            /* record real-data's begin postion in buf */
            Int32 beginPos4stBody = destBuf.getUsedSize();

            ret = this.stBody.pack(selector4stBody, ref destBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
#if (DEBUG)
                StackTrace st = new StackTrace(true);
                for (int i = 0; i < st.FrameCount; i++)
                {
                    if (null != st.GetFrame(i).GetFileName())
                    {
                        Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                    }
                }
#endif
                return ret;
            }

            /* set sizeinfo for this.stBody */
            Int32 size4stBody = destBuf.getUsedSize() - beginPos4stBody;
            ret = destBuf.writeUInt32((UInt32)(size4stBody), sizePos4stBody);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* set version-indicator */
        ret = destBuf.writeUInt8((byte)(cutVer), savedBeginPos + 1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType unpack(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* get versionindicator */
        byte netCutVer = 0;
        ret = srcBuf.readUInt8(ref netCutVer, srcBuf.getUsedSize() + 1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* check versionindicator */
        if (CldMsg.BASEVERSION > netCutVer || netCutVer > CldMsg.CURRVERSION)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_NET_CUTVER_INVALID;
        }
        if (TPDUBase.BASEVERSION > netCutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_CONFILICT;
        }
        cutVer = netCutVer;

        int savedBeginPos = srcBuf.getUsedSize();

        /* unpack member: this.stHead */
        {
            /* get sizeinfo for this.stHead */
            byte size4stHead = 0;
            ret = srcBuf.readUInt8(ref size4stHead, savedBeginPos + 3);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4stHead > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            ret = this.stHead.unpack(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* unpack member: this.stBody */
        {
            Int64 selector4stBody = this.stHead.stExt.stDirHead.dwMsgID;
            /* get sizeinfo for this.stBody */
            UInt32 size4stBody = 0;
            ret = srcBuf.readUInt32(ref size4stBody, savedBeginPos + 4);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }

            /* check whether data in buffer are enough */
            if ((int)size4stBody > srcBuf.getLeftSize())
            {
                return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
            }

            ret = this.stBody.unpack(selector4stBody, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    public TdrError.ErrorType load(ref byte [] buffer, int size, ref int usedSize , uint cutVer)
    {
        if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = load(ref srcBuf, cutVer);

        usedSize = srcBuf.getUsedSize();

        return ret;
    }

    public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
    {
        srcBuf.disableEndian();
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* get versionindicator */
        byte netCutVer = 0;
        ret = srcBuf.readUInt8(ref netCutVer, srcBuf.getUsedSize() + 1);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* check versionindicator */
        if (CldMsg.BASEVERSION > netCutVer || netCutVer > CldMsg.CURRVERSION)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_NET_CUTVER_INVALID;
        }
        if (TPDUBase.BASEVERSION > netCutVer)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_CUTVER_CONFILICT;
        }
        cutVer = netCutVer;

        int savedBeginPos = srcBuf.getUsedSize();

        /* load member: this.stHead */
        {
            ret = this.stHead.load(ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        /* load member: this.stBody */
        {
            Int64 selector4stBody = this.stHead.stExt.stDirHead.dwMsgID;
            ret = this.stBody.load(selector4stBody, ref srcBuf, cutVer);
            if (TdrError.ErrorType.TDR_NO_ERROR != ret)
            {
                return ret;
            }
        }

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref string buffer,int indent , char separator)
    {
        TdrVisualBuf destBuf = new TdrVisualBuf();
        TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

        buffer = destBuf.getVisualBuf();

        return ret;
    }

    /* set indent = -1 to disable indent , default: separator = '\n' */
    public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
    {
        TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

        /* visualize member: this.stHead */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stHead]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stHead */
        if (0 > indent)
        {
            ret = this.stHead.visualize(ref destBuf, indent, separator);
        } else
        {
            ret = this.stHead.visualize(ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        /* visualize member: this.stBody */
        ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stBody]", true);
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return ret;
        }

        /* visualize children of this.stBody */
        Int64 selector4stBody = this.stHead.stExt.stDirHead.dwMsgID;
        if (0 > indent)
        {
            ret = this.stBody.visualize(selector4stBody, ref destBuf, indent, separator);
        } else
        {
            ret = this.stBody.visualize(selector4stBody, ref destBuf, indent + 1, separator);
        }
        if (TdrError.ErrorType.TDR_NO_ERROR != ret)
        {
            return ret;
        }

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(byte[] buffer ,int size , ref uint sizeInfo)
    {
        if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
        {
#if (DEBUG)
            StackTrace st = new StackTrace(true);
            for (int i = 0; i < st.FrameCount; i++)
            {
                if (null != st.GetFrame(i).GetFileName())
                {
                    Console.WriteLine("TSF4G_TRACE:  " + st.GetFrame(i).ToString());
                }
            }
#endif
            return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
        }

        TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
        TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

        return ret;
    }

    public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
    {
        return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
    }

    /*  pstMeta version info */
    public static readonly uint BASEVERSION = 1;
    public static readonly uint CURRVERSION = 7;
    /*  entry version info */
}


}
